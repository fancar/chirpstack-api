syntax = "proto3";

package hr;

option go_package = "github.com/brocaar/chirpstack-api/go/v3/handyrusty";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "common/common.proto";
import "gw/gw.proto";



// HandyRustyService provides the "handy-rusty additional enforta tools" API methods.
service HandyRustyService {
    // GetVersion returns the ChirpStack Network Server version.
    rpc GetVersion(google.protobuf.Empty) returns (GetVersionResponse) {}

    // GetDeviceCounters returns the summary-counters log-items for given organisation_id
    rpc GetDeviceCounters(GetDeviceCountersRequest) returns (GetDeviceCountersResponse) {}

    // GetDeviceCounters returns the summary-counters log-items for given organisation_id
    rpc GetGatewayCounters(GetGatewayCountersRequest) returns (GetGatewayCountersResponse) {}

    // GetFrameCounters returns the summary-counters of frames by type
    rpc GetFrameCounters(GetFrameCountersRequest) returns (GetFrameCountersResponse) {}

    // GetFramesSpeed returns the frames per minute array for given timedate gap
    rpc GetFrameSpeed(GetFrameSpeedRequest) returns (GetFrameSpeedResponse) {}  

    // ExecCommand sends command to the gateway and returns the answer
    rpc ExecCommand(ExecCommandRequest) returns (gw.GatewayCommandExecResponse) {}

    // GetDeviceFramesLog returns an array with device-frame logs
    rpc GetDeviceFramesLog(GetDeviceFramesLogRequest) returns (GetDeviceFramesLogResponse) {}

    // StreamDeviceFramesLogCSV streams the frame-logs from handyrusty CH-storage.
    rpc StreamDeviceFramesLogCSV(GetDeviceFramesLogRequest) returns (stream StreamDeviceFramesLogCSVResponse) {}

    // GetCurrentState returns items for monitoring purposes.
    rpc GetCurrentState(google.protobuf.Empty) returns (GetCurrentStateResponse) {}

    // Store to clickhouse replies of integration event notifications
    rpc StoreIntegrationReplies(StoreIntegrationReplyRequest) returns (StoreIntegrationReplyResponse) {}

    // Get replies of integration event notifications
    rpc GetIntegrationReplies(GetIntegrationRepliesRequest) returns (GetIntegrationRepliesResponse) {}
}

message GetIntegrationRepliesRequest {
    // you can specify offset (for pagination)
    uint32 offset = 1;
    // you can specify rows limit
    uint32 limit = 2;
    // id of organization where integration linked to
    int64 organisation_id = 3;
    // id of routing profile
    int64 routing_profile_id = 4;
    // You can specify start DateTime point.
    google.protobuf.Timestamp start = 5;
    // You can specify end DateTime point.
    google.protobuf.Timestamp end = 6;

}

message GetIntegrationRepliesResponse {
    // total numner of selected rows
    uint32 items_total = 1;
    // the array of selected replies
    repeated IntegrationReply data = 2;
}

message IntegrationReply {
    // url from integration parameters where event informations sending
    string integration_url = 1;
    // http status code of sent event (protobuf/as/integration/integration.proto) 
    int32 status_code = 2;
    // description of http status code
    string status_code_description = 3;
    // id of application where integration linked to
    int64 application_id = 4;
    // Device EUI.
    bytes dev_eui = 5 [json_name = "devEUI"];
    // time of receining reply
    google.protobuf.Timestamp time = 6;
}

message StoreIntegrationReplyRequest {
    // Organization ID
    int64 organisation_id = 1;
    // AS Routing Profile ID
    int64 routing_profile_id = 2;
    // reply for saving
    IntegrationReply repliy = 3;
}

message StoreIntegrationReplyResponse {
    uint32 stored_count = 1;
}

message GetCurrentStateResponse {
    // DateTime of last packet saved in wireless-loger
    string wl_last_packet = 1;

    // the same as previuos in unixTime format
    int64 wl_last_packet_unix = 2;
}

message StreamDeviceFramesLogCSVResponse {
    oneof size {
        uint32 current = 1;
        uint32 total = 2;
    }

    oneof data {
        uint32 rows = 3;
        bytes chunk = 4;
    }
}

message GetDeviceFramesLogRequest {
    // you can specify offset (for pagination)
    uint32 offset = 1;

    // you can specify rows limit
    uint32 limit = 2;

    // You can specify start DateTime point. format RFC3339: 2006-01-02T15:04:05.000Z
    string start = 3;

    // You can specify end DateTime point. format RFC3339: 2006-01-02T15:04:05.000Z
    string end = 4;

    // Additional sql filters (key,value): allowed: direction,devEUI,mType,gw,devAddr
    map<string, string> filters = 5;

    // You can set the id to 0 if admin
    int64 organization_id = 6;

    // here user sends his local timezone. 
    int64 timezone = 7; 

    // for internal use. Will be ignored from external api.
    bool gw_only = 8;        
}

message GetDeviceFramesLogResponse {
    // total numner of selected rows
    uint32 items_total = 1;
     // the array of selected device-frames logs
    repeated DeviceFrameLog data = 2;
}



message ExecCommandRequest {
    // Gateway ID (HEX encoded).
    string gateway_id = 1;

    // command that will be executed on gateway (according to the gw config)
    string command = 2;

    // You can set timeout for the command execution. Default 30 seconds. Range 1-1000
    uint32 timeout = 3;

    //  Background task execution. If set true, the result will be saved in app-db.
    //  Allows to get large amount of data from devices asynchronously.
    bool background_task = 4;    
}

message GetFrameCountersRequest {
    // format RFC3339: 2006-01-02T15:04:05.000Z
    string start = 1;

    // format RFC3339: 2006-01-02T15:04:05.000Z
    string end = 2;
}

message GetFrameCountersResponse {
     // list counters with frame counters by type
    repeated FrameCounters counters = 1;
}

message GetFrameSpeedRequest {
    // format RFC3339: 2006-01-02T15:04:05.000Z
    string start = 1;

    // format RFC3339: 2006-01-02T15:04:05.000Z
    string end = 2;
}

message GetFrameSpeedResponse {
    // list counters with frames speed
    repeated FrameSpeed counters = 1;
}

message GetDeviceCountersRequest {
    // Id (number). If Zero - all organisations (allowed for admin)
    uint32 organization_id = 1;

    // format RFC3339: 2006-01-02T15:04:05.000Z
    string start = 2;

    // format RFC3339: 2006-01-02T15:04:05.000Z
    string end = 3;

    // aggregation of the data: HOUR,DAY,WEEK,MONTH
    string aggregation = 4;
}

message GetDeviceCountersResponse {
    // id of the organisation that handles the devices
    uint32 organization_id = 1;
    repeated DeviceCounters counters = 2;
}

//

message GetGatewayCountersRequest {
    // Id (number). If Zero - all organisations (allowed for admin)
    uint32 organization_id = 1;

    // format RFC3339: 2006-01-02T15:04:05.000Z
    string start = 2;

    // format RFC3339: 2006-01-02T15:04:05.000Z
    string end = 3;

    // aggregation of the data: HOUR,DAY,WEEK,MONTH
    string aggregation = 4;
}

message GetGatewayCountersResponse {
    // id of the organisation that handles the devices
    uint32 organization_id = 1;
    // log of counters
    repeated DeviceCounters counters = 2;    
}


message GetVersionResponse {
    // ChirpStack Network Server version.
    string version = 1;
}

// temp message just to check some thing
message GetBullshitResponse {
    // ChirpStack Network Server version.
    string xyu = 1;
}

// counters
message DeviceCounters {
    // id of the organisation that handles the devices
    uint32 organization_id = 1;

    // google.protobuf.Timestamp created_at = 2;

    // Created at unix timestamp.
    uint32 created_at = 2;

    // Active count.
    uint32 active_count = 3;

    // Inactive count.
    uint32 inactive_count = 4;

    // Never seen count.
    uint32 never_seen_count = 5;
}

message FrameCounters {
    // Date: the metrics counted for.
    int64 date = 1;

    // RxCnt: total recieved frames counted
    uint32 rx_cnt = 2;

    // TxCnt: total transmitted frames counted
    uint32 tx_cnt = 3;

    // TotalCnt: both TxCnt and RxCnt counted
    uint32  total_cnt = 4;

    // UnknownType:
    uint32 unknown_type = 5;    

    // JoinRequest
    uint32 join_request = 6;

    // RejoinRequest
    uint32  rejoin_request = 7;

    // JoinAccept
    uint32  join_accept = 8;

    // UnconfirmedDataUp
    uint32  unconfirmed_data_up = 9;

    // UnconfirmedDataDown
    uint32  unconfirmed_data_down = 10;

    // ConfirmedDataUp
    uint32  confirmed_data_up = 11;

    // ConfirmedDataDown
    uint32  confirmed_data_down = 12;
    // Proprietary
    uint32  proprietary = 13;
}    

message FrameSpeed {
    // T: Created at timestamp (unix)
    int64 t = 1;

    // Y: TotalCnt: both TxCnt and RxCnt frames counted for the amount of time 
    uint32  y = 2; 
}

// for storage
message DeviceFrameLog {
    // RX (uplink -recieved from devices) or TX (downlink - transmitted from NS)
    string direction = 1;
    string date_time = 2;
    string date = 3;
    string mType = 4;
    string dev_addr = 5;
    string devEUI = 6;

    // params from base station with best SNR
    int32  rxRssi = 7;
    double  rx_snr = 8;
    uint32 rx_channel = 9;
    uint32 rx_rf_chain = 10;

    // id of base station with best SNR
    string gw = 11;

    // json-string
    string tx_info = 12;

    // RXInfo an array with info from BS recieved the frame
    repeated RXInfo rx_info = 13;

    // json-string with LORA payload
    string phy_payloadJSON = 14 [json_name = "PhyPayloadJson"];
    double  airtime = 15;
    double  esp = 16;
    uint32  late = 17;
    string frm_payload = 18;

    // data from device-session 
    uint32 FCntUp = 19;
    uint32 NFCntDown = 20;
    uint32 AFCntDown = 21;
    uint32 ConfFCnt = 22;

    // spreading factor (TxInfo)
    uint32 sp_fact = 23;
}

// for RXInfo item in uplink frames
message RXInfo {
    // GatewayID
    string  GatewayID = 1       [json_name = "gateway_id"];
    int32   Rssi = 2            [json_name = "rssi"];
    double  LoraSnr = 3         [json_name = "lora_snr"];
    uint32  Channel = 4         [json_name = "channel"];
    uint32  RfChain = 5         [json_name = "rf_chain"];
    uint32  Board = 6           [json_name = "board"];
    uint32  Antenna = 7         [json_name = "antenna"];
    common.Location Location = 8 [json_name = "location"];
    gw.FineTimestampType FineTimestampType = 9;
    string  GpsTimestamp = 10   [json_name = "gps_timestamp"];
    string  FineTimestamp = 11  [json_name = "fine_timestamp"];
    string  Context = 12        [json_name = "context"];

    // Unique and random ID which can be used to correlate the uplink across multiple logs.
    string  UplinkID = 13       [json_name = "uplink_id"];
}

