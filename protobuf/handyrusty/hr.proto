syntax = "proto3";

package hr;

option go_package = "github.com/brocaar/chirpstack-api/go/v3/handyrusty";

import "google/protobuf/timestamp.proto";
// import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
// import "common/common.proto";
import "gw/gw.proto";
// import "ns/profiles.proto";


// HandyRustyService provides the "handy-rusty additional enforta tools" API methods.
service HandyRustyService {
    // GetVersion returns the ChirpStack Network Server version.
    rpc GetVersion(google.protobuf.Empty) returns (GetVersionResponse) {}

    // GetDeviceCounters returns the summary-counters log-items for given organisation_id
    rpc GetDeviceCounters(GetDeviceCountersRequest) returns (GetDeviceCountersResponse) {}

    // GetDeviceCounters returns the summary-counters log-items for given organisation_id
    rpc GetGatewayCounters(GetGatewayCountersRequest) returns (GetGatewayCountersResponse) {}

    // GetFrameCounters returns the summary-counters of frames by type
    rpc GetFrameCounters(GetFrameCountersRequest) returns (GetFrameCountersResponse) {}

    // GetFramesSpeed returns the frames per minute array for given timedate gap
    rpc GetFrameSpeed(GetFrameSpeedRequest) returns (GetFrameSpeedResponse) {}  

    // ExecCommand sends command to the gateway and returns the answer
    rpc ExecCommand(gw.GatewayCommandExecRequest) returns (gw.GatewayCommandExecResponse) {}       
}

// message ExecCommandRequest {
//     // Gateway ID.
//     bytes gateway_id = 1 [json_name = "gatewayID"];

//     // command that will be executed on gateway (according to the gw config)
//     string command = 2;
// }

// message ExecCommandResponse {
//     // Gateway ID.
//     bytes gateway_id = 1 [json_name = "gatewayID"];

//     // the response from the command executed
//     strings response = 2;
// }

message GetFrameCountersRequest {
    // format RFC3339: 2006-01-02T15:04:05.000Z
    string start = 1;

    // format RFC3339: 2006-01-02T15:04:05.000Z
    string end = 2;
}

message GetFrameCountersResponse {
     // list counters with frame counters by type
    repeated FrameCounters counters = 1;
}

message GetFrameSpeedRequest {
    // format RFC3339: 2006-01-02T15:04:05.000Z
    string start = 1;

    // format RFC3339: 2006-01-02T15:04:05.000Z
    string end = 2;
}

message GetFrameSpeedResponse {
    // list counters with frames speed
    repeated FrameSpeed counters = 1;
}

message GetDeviceCountersRequest {
    // Id (number). If Zero - all organisations (allowed for admin)
    uint32 organization_id = 1;

    // format RFC3339: 2006-01-02T15:04:05.000Z
    string start = 2;

    // format RFC3339: 2006-01-02T15:04:05.000Z
    string end = 3;

    // aggregation of the data: HOUR,DAY,WEEK,MONTH
    string aggregation = 4;
}

message GetDeviceCountersResponse {
    // id of the organisation that handles the devices
    uint32 organization_id = 1;
    repeated DeviceCounters counters = 2;
}

//

message GetGatewayCountersRequest {
    // Id (number). If Zero - all organisations (allowed for admin)
    uint32 organization_id = 1;

    // format RFC3339: 2006-01-02T15:04:05.000Z
    string start = 2;

    // format RFC3339: 2006-01-02T15:04:05.000Z
    string end = 3;

    // aggregation of the data: HOUR,DAY,WEEK,MONTH
    string aggregation = 4;
}

message GetGatewayCountersResponse {
    // id of the organisation that handles the devices
    uint32 organization_id = 1;
    // log of counters
    repeated DeviceCounters counters = 2;    
}


message GetVersionResponse {
    // ChirpStack Network Server version.
    string version = 1;
}



// counters

message DeviceCounters {
    // id of the organisation that handles the devices
    uint32 organization_id = 1;

    // google.protobuf.Timestamp created_at = 2;

    // Created at unix timestamp.
    uint32 created_at = 2;

    // Active count.
    uint32 active_count = 3;

    // Inactive count.
    uint32 inactive_count = 4;

    // Never seen count.
    uint32 never_seen_count = 5;
}

message FrameCounters {
    // Date: the metrics counted for.
    int64 date = 1;

    // RxCnt: total recieved frames counted
    uint32 rx_cnt = 2;

    // TxCnt: total transmitted frames counted
    uint32 tx_cnt = 3;

    // TotalCnt: both TxCnt and RxCnt counted
    uint32  total_cnt = 4;

    // UnknownType:
    uint32 unknown_type = 5;    

    // JoinRequest
    uint32 join_request = 6;

    // RejoinRequest
    uint32  rejoin_request = 7;

    // JoinAccept
    uint32  join_accept = 8;

    // UnconfirmedDataUp
    uint32  unconfirmed_data_up = 9;

    // UnconfirmedDataDown
    uint32  unconfirmed_data_down = 10;

    // ConfirmedDataUp
    uint32  confirmed_data_up = 11;

    // ConfirmedDataDown
    uint32  confirmed_data_down = 12;
    // Proprietary
    uint32  proprietary = 13;
}    

message FrameSpeed {
    // T: Created at timestamp string (format "2006-01-02 15:04:05").
    string t = 1;
    // google.protobuf.Timestamp date_time = 1;

    // Y: TotalCnt: both TxCnt and RxCnt frames counted for the amount of time 
    uint32  y = 2; 
}