syntax = "proto3";

package as;

option go_package = "github.com/brocaar/chirpstack-api/go/v3/as";
option java_package = "io.chirpstack.api.as";
option java_multiple_files = true;
option java_outer_classname = "ApplicationServerProto";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "common/common.proto";
import "gw/gw.proto";


// ApplicationServerService is the service providing the application-server interface.
service ApplicationServerService {
    // HandleUplinkData handles uplink data received from an end-device.
    rpc HandleUplinkData(HandleUplinkDataRequest) returns (google.protobuf.Empty) {}

    // HandleProprietaryUplink handles proprietary uplink payloads.
    rpc HandleProprietaryUplink(HandleProprietaryUplinkRequest) returns (google.protobuf.Empty) {}

    // HandleError handles an error message.
    rpc HandleError(HandleErrorRequest) returns (google.protobuf.Empty) {}

    // HandleDownlinkACK handles a downlink ACK or nACK response.
    rpc HandleDownlinkACK(HandleDownlinkACKRequest) returns (google.protobuf.Empty) {}

    // HandleGatewayStats handles the given gateway stats.
    rpc HandleGatewayStats(HandleGatewayStatsRequest) returns (google.protobuf.Empty) {}

    // HandleTXACK handles the TX acknowledgement.
    rpc HandleTxAck(HandleTxAckRequest) returns (google.protobuf.Empty) {}

    // SetDeviceStatus updates the device-status for a device.
    rpc SetDeviceStatus(SetDeviceStatusRequest) returns (google.protobuf.Empty) {}

    // SetDeviceLocation updates the device-location for a device.
    rpc SetDeviceLocation(SetDeviceLocationRequest) returns (google.protobuf.Empty) {}

    // SetDeviceLocation updates the device-location for a device.
    rpc GetDevicesSummary(GetDevicesSummaryRequest) returns (GetDevicesSummaryResponse) {}

    // SetDeviceLocation updates the device-location for a device.
    rpc GetGatewaysSummary(GetGatewaysSummaryRequest) returns (GetGatewaysSummaryResponse) {}

    // SetDeviceLocation updates the device-location for a device.
    rpc ListOrganisation(ListOrganizationRequest) returns (ListOrganizationResponse) {}

    // GetOrgByDevEUI returns organization id by devEUI. Modification.
    rpc GetOrgByDevEUI(GetOrgByDevEUIRequest) returns (GetOrgByDevEUIResponse) {}

    // GetOrgIDByGwID returns organization id by gwID. Modification.
    rpc GetOrgIDByGwID(GetOrgIDByGwIDRequest) returns (GetOrgByDevEUIResponse) {}

    // GetDeviceAppSKey returns AES128Key by devEUI. Modification.
    rpc GetDeviceAppSKey(GetOrgByDevEUIRequest) returns (GetDeviceAppSKeyResponse) {}

    // ReEncryptDeviceQueueItems requests the application-server to re-encrypt
    // the given payload items using the new parameters. This request is
    // for example triggered when the associated frame-counter of a downlink
    // payload will be used by a mac-layer only payload, e.g. when the NS has
    // mac-commands (or ACKs) to send to the device and combining this with
    // an application-layer payload would exceed the max. payload size.
    // Note there is no requirement that the number of returned items must be
    // equal to the number of requested items.
    rpc ReEncryptDeviceQueueItems(ReEncryptDeviceQueueItemsRequest) returns (ReEncryptDeviceQueueItemsResponse) {}   

    // StreamGatewayTaskResult stream ExecCmd results from gateway to save into as-db
    rpc StreamGatewayTaskResult(stream GatewayTaskResult) returns (google.protobuf.Empty) {}

    // GetDictionary returns list of dictionary by the type. Modification.
    rpc GetDictionary(GetDictionaryRequest) returns (GetDictionaryResponse) {}

    // GetGWMetaData returns a map with last metadata for the gw
    rpc GetGWMetaData(google.protobuf.Empty) returns (GetGWMetaDataResponse) {}     
}

message GatewayMetaData {
    // gateway id
    string gw_id = 1;

    // metadata last recieved
    map<string,string> metadata = 2; 
}

message GetGWMetaDataResponse {
    // Gateway metadata by gateway
    repeated GatewayMetaData metadata_list = 1; 
}

message GetDictionaryRequest {
    // choose dictionary type.
    string dic_type = 1;
}

message GetDictionaryResponse {
    // choose dictionary type.
    string dic_type = 1;

    repeated Dictionary list = 2;
}

message Dictionary {
    // id of the label
    int64 code = 1;

    // type of the dictionary
    string dic_type = 2;

    // label name
    string label = 3;

    // boolean flag if it is relevant
    bool is_actual = 4;
}

message GetOrgByDevEUIRequest {
    // Device EUI (HEX encoded).
    string dev_eui = 1 [json_name = "devEUI"];   
}

message GetOrgIDByGwIDRequest {
    // Gateway ID (HEX encoded).
    string id = 1;  
}

message GetDeviceAppSKeyResponse {
    // AppSKey is a AES128Key for the device
    bytes value = 1;
}

message GetOrgByDevEUIResponse {
    // Organization ID.
    int64 id = 1;
}

message ListOrganizationRequest {
    // Max number of organizations to return in the result-set.
    int64 limit = 1;

    // Offset in the result-set (for pagination).
    int64 offset = 2;

    // When provided, the given string will be used to search on
    // displayName.
    string search = 3;
}

message ListOrganizationResponse {
    // Total number of organizations.
    int64 total_count = 1;

    repeated OrganizationListItem result = 2;
}

message OrganizationListItem {
    // Organization ID.
    int64 id = 1;
    
    // Organization name.
    string name = 2;

    // Organization display name.
    string display_name = 3;

    // Can the organization create and "own" Gateways?
    bool can_have_gateways = 4;

    // Created at timestamp.
    google.protobuf.Timestamp created_at = 5;

    // Last update timestamp.
    google.protobuf.Timestamp updated_at = 6;
}

message GetDevicesSummaryRequest {
    // Organization ID.
    int64 organization_id = 1 [json_name = "organizationID"];
}

message GetDevicesSummaryResponse {
    // Active count.
    uint32 active_count = 1;

    // Inactive count.
    uint32 inactive_count = 2;

    // per data-rate count.
    // Devices that have never been seen are excluded.
    map<uint32, uint32> dr_count = 3;

    // Never seen count.
    uint32 never_seen_count = 4;
}

message GetGatewaysSummaryRequest {
    // Organization ID.
    int64 organization_id = 1 [json_name = "organizationID"];
}

message GetGatewaysSummaryResponse {
    // Active count.
    uint32 active_count = 1;

    // Inactive count.
    uint32 inactive_count = 2;

    // Never seen count.
    uint32 never_seen_count = 3;
}


enum RXWindow {
    RX1 = 0;
    RX2 = 1;
}

enum ErrorType {
    // Generic error type.
    GENERIC = 0;

    // OTAA error.
    OTAA = 1;

    // Uplink frame-counter was reset.
    DATA_UP_FCNT_RESET = 2;

    // Uplink MIC error.
    DATA_UP_MIC = 3;

    // Downlink payload size error.
    DEVICE_QUEUE_ITEM_SIZE = 4;

    // Downlink frame-counter error.
    DEVICE_QUEUE_ITEM_FCNT = 5;

    // Uplink frame-counter retransmission.
    DATA_UP_FCNT_RETRANSMISSION = 6;

    // Downlink gateway error.
    DATA_DOWN_GATEWAY = 7;
}


message DeviceActivationContext {
    // Assigned Device Address.
    bytes dev_addr = 1;

    // Application session key (envelope).
    common.KeyEnvelope app_s_key = 2;
}


message HandleUplinkDataRequest {
    // DevEUI EUI (8 bytes).
    bytes dev_eui = 1;

    // Join EUI used for OTAA activation (8 bytes).
    bytes join_eui = 2;

    // Frame-counter.
    uint32 f_cnt = 3;

    // Frame port.
    uint32 f_port = 4;

    // ADR enabled.
    bool adr = 5;

    // Data-rate.
    uint32 dr = 6;

    // TX meta-data.
    gw.UplinkTXInfo tx_info = 7;

    // RX meta-data.
    repeated gw.UplinkRXInfo rx_info = 8;

    // Received data (encrypted).
    bytes data = 9;

    // Device activation context.
    //
    // This field is only set on the first uplink frame when the security
    // context has changed (e.g. a new OTAA (re)activation).
    DeviceActivationContext device_activation_context = 10;

    // Uplink was of type confirmed.
    bool confirmed_uplink = 11;

    // true if recieved more than 2 minutes after. Modification
    bool late = 12;

    // Mic. Modification
    bytes mic = 13;    

    // time frame(s) recieved. Can be gps\fts\by server for packet with best SNR. Modification
    google.protobuf.Timestamp time = 14;        
}

message HandleProprietaryUplinkRequest {
    // MACPayload of the proprietary LoRaWAN frame.
    bytes mac_payload = 1;

    // MIC of the proprietary LoRaWAN frame.
    bytes mic = 2;

    // TXInfo contains the TX related meta-data.
    gw.UplinkTXInfo tx_info = 3;

    // RXInfo contains the RX related meta-data.
    repeated gw.UplinkRXInfo rx_info = 4;
}

message HandleErrorRequest {
    // Device EUI (8 bytes).
    bytes dev_eui = 1;

    // Type of the error.
    ErrorType type = 3;

    // Error string describing the error.
    string error = 4;

    // Frame-counter (if applicable) related to the error.
    uint32 f_cnt = 5;
}

message HandleDownlinkACKRequest {
    // Device EUI (8 bytes).
    bytes dev_eui = 1;

    // Downlink frame-counter.
    uint32 f_cnt = 2;

    // Frame was acknowledged?
    bool acknowledged = 3;
}

message SetDeviceStatusRequest {
    // Device EUI (8 bytes).
    bytes dev_eui = 1;

    // Battery level (deprecated, use battery_level).
    // 0:      The end-device is connected to an external power source
    // 1..254: The battery level, 1 being at minimum and 254 being at maximum
    // 255:    The end-device was not able to measure the battery level
    uint32 battery = 2;

    // The device margin status
    // -32..32: The demodulation SNR ration in dB
    int32  margin = 3;

    // Device is connected to an external power source.
    bool external_power_source = 4;

    // Device battery status is not available.
    bool battery_level_unavailable = 5;

    // Battery level as a percentage.
    float battery_level = 6;
}

message SetDeviceLocationRequest {
    // Device EUI (8 bytes).
    bytes dev_eui = 1;

    // The location of the device.
    common.Location location = 2;

    // Uplink IDs used for geolocation.
    repeated bytes uplink_ids = 3;
}

message HandleGatewayStatsRequest {
    // Gateway ID (8 bytes).
    bytes gateway_id = 1;

    // Stats ID (UUID).
    bytes stats_id = 2;

    // Timestamp.
    google.protobuf.Timestamp time = 3;

    // Gateway location.
    common.Location location = 4;

    // Uplink frames received.
    uint32 rx_packets_received = 5;

    // Uplink frames received OK.
    uint32 rx_packets_received_ok = 6;

    // Downlink transmissions requested.
    uint32 tx_packets_received = 7;

    // Downlink emitted.
    uint32 tx_packets_emitted = 8;

    // Gateway metadata.
    map<string, string> metadata = 9;
}

message HandleTxAckRequest {
    // Device EUI (8 bytes).
    bytes dev_eui = 1;

    // Downlink frame-counter.
    uint32 f_cnt = 2;

    // Gateway ID.
    bytes gateway_id = 3;

    // TXInfo contains the TX related meta-data.
    gw.DownlinkTXInfo tx_info = 4;
}

message ReEncryptDeviceQueueItemsRequest {
    // DevEUI of the device.
    bytes dev_eui = 1;

    // Device addres.
    // This is the device address which was used to encrypt the given
    // payloads.
    bytes dev_addr = 2;

    // Downlink frame-counter to start with.
    // The application-server must use this value when encrypting the first
    // item, and increment it for each successive item.
    uint32 f_cnt_start = 3;

    // Items to re-encrypt.
    repeated ReEncryptDeviceQueueItem items = 4;
}

message ReEncryptDeviceQueueItemsResponse {
    repeated ReEncryptedDeviceQueueItem items = 1;
}

message ReEncryptDeviceQueueItem {
    // The encrypted FRMPayload bytes.
    bytes frm_payload = 1;

    // The original FCnt of the payload.
    uint32 f_cnt = 2;

    // The FPort of the payload.
    uint32 f_port = 3;

    // Payload is of type confirmed.
    bool confirmed = 4;
}

message ReEncryptedDeviceQueueItem {
    // The re-encrypted FRMPayload bytes.
    bytes frm_payload = 1;

    // The new FCnt of the payload.
    uint32 f_cnt = 2;

    // The FPort of the payload.
    uint32 f_port = 3;

    // Payload is of type confirmed.
    bool confirmed = 4;
}


message GatewayTaskResponseData {
    // Gateway ID.
    bytes gateway_id = 1 [json_name = "gatewayID"];

    // Execution request ID (UUID).
    bytes exec_id = 2 [json_name = "execID"];

    // command had been executed on gateway.
    string cmd = 3;

    // Standard error.
    bytes stderr = 4;

    // Error message from gateway-bridge.
    string error = 5;

    // Description
    string description = 6;

    // file (or other item) name. Optional
    string name = 7;    
}

message GatewayTaskResult {
    oneof result {
        GatewayTaskResponseData metadata = 1;

        // stdin chunk
        bytes chunk = 2;
    }
}