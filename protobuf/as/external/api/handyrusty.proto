syntax = "proto3";

package api;

option go_package = "github.com/brocaar/chirpstack-api/go/v3/as/external/api";

import "google/api/annotations.proto";
// import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "handyrusty/hr.proto";
import "gw/gw.proto";


// HandyRustyService is the service managing additional erth  tools, such as clickhouse storage and logger.
service HandyRustyService {
    // GetFrameCounters returns frame counters by type for the given range. Aggregation: day
    rpc GetFrameCounters(hr.GetFrameCountersRequest) returns (hr.GetFrameCountersResponse) {
        option(google.api.http) = {
            post: "/api/handy-rusty/frames/counters"
            body: "*"
        };
    }

    // GetFrameSpeed returns an array with rx+tx frames per minute measurments
    rpc GetFrameSpeed(hr.GetFrameSpeedRequest) returns (hr.GetFrameSpeedResponse) {
        option(google.api.http) = {
            post: "/api/handy-rusty/frames/speed"
            body: "*"
        };
    }

    // ExecCommand sends the command to execute on gw. It waits 30 sec for an answer from gw
    rpc ExecCommand(hr.ExecCommandRequest) returns (gw.GatewayCommandExecResponse) {
        option(google.api.http) = {
            post: "/api/handy-rusty/rc/exec-command"
            body: "*"
        };
    }

    // GetDeviceFrames returns an array with recieved and transmitted device's frames
    rpc GetDeviceFrames(hr.GetDeviceFramesRequest) returns (hr.GetDeviceFramesResponse) {
        option(google.api.http) = {
            post: "/api/handy-rusty/frames/logs/device-frames"
            body: "*"
        };
    }

    // StreamDeviceFramesCSV streams the frame-logs from handyrusty CH-storage.
    //   * The data is transferred by chunks (stream);
    //   * This endpoint does not work from a web-browser!
    rpc StreamDeviceFramesCSV(hr.GetDeviceFramesRequest) returns (stream hr.StreamDeviceFramesCSVResponse) {
        option (google.api.http) = {
            get: "/api/handy-rusty/frames/logs/device-frames/csv"
            // body: "*"
        };
    }
    rpc GetCurrentState(google.protobuf.Empty) returns (hr.GetCurrentStateResponse) {
        option (google.api.http) = {
            get: "/api/handy-rusty/current-state"
        };        
    } 
    // 
    rpc GetIntegrationReplies(hr.GetIntegrationRepliesRequest) returns (hr.GetIntegrationRepliesResponse) {
        option (google.api.http) = {
            get: "/api/handy-rusty/integration/replies"
        };        
    }

    rpc GetGwStats(hr.GetGwStatsRequest) returns (hr.GetGwStatsResponse) {
        option (google.api.http) = {
            get: "/api/handy-rusty/gateway/stats"
        };
    }

    // Get stats for device from clickhouse current and for last 24 hours
    rpc GetDeviceStats(hr.GetDeviceStatsRequest) returns (hr.GetDeviceStatsResponse) {
        option (google.api.http) = {
            get: "/api/handy-rusty/device/stats/last-24-hours"
        };        
    }

    // Get stats for device from clickhouse for last 14 days
    rpc GetDeviceStatsLastTwoweeks(hr.GetDeviceStatsRequest) returns (hr.GetDeviceStatsLastTwoweeksResponse) {
        option (google.api.http) = {
            get: "/api/handy-rusty/device/stats/last-14-days"
        };        
    }
    
    // Get stats for device from clickhouse for last 14 days aggregated by day
    rpc GetDeviceStatsLastTwoweeksAggregated(hr.GetDeviceStatsRequest) returns (hr.GetDeviceStatsLastTwoweeksResponse) {
        option (google.api.http) = {
            get: "/api/handy-rusty/device/stats/last-14-days-aggregated"
        };        
    }

    // Get stats for device from clickhouse current and for last 24 hours to show in list
    rpc GetAveragesForDeviceList(hr.GetAveragesForDeviceListRequest) returns (hr.GetAveragesForDeviceListResponse) {
        option (google.api.http) = {
            post: "/api/handy-rusty/device/stats/last-24-hours/for-list"
            body: "*"
        };        
    }    
}