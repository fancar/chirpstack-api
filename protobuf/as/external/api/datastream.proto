syntax = "proto3";

package api;

option go_package = "github.com/brocaar/chirpstack-api/go/v3/as/external/api";

import "google/api/annotations.proto";
// import "google/protobuf/empty.proto";

// DataStreamService the service manages all data streams
service DataStreamService {

    // GetGatewayTaskResult get results for gateway that previously recieved during
    //   ExecCommand in background mode
    //   (!) websocket required! The endpoint does not work from a web-swagger.
    rpc GetGatewayTaskResult(DataStreamRequest) returns (stream DataStreamResponse) {
        option (google.api.http) = {
            get: "/api/datastream/gateways/task-result"
        };
    }    
}

message DataStreamRequest {
    // ID of an item requested
    int64 id = 1;    
}

message DataStreamResponse {
    oneof size {
        uint32 current = 1;
        uint32 total = 2;
    }

    oneof data {
        uint32 rows = 3;
        bytes chunk = 4;
    }
}