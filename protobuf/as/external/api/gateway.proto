syntax = "proto3";

package api;

option go_package = "github.com/brocaar/chirpstack-api/go/v3/as/external/api";
option java_package = "io.chirpstack.api.as.external.api";
option java_multiple_files = true;
option java_outer_classname = "GatewayProto";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "common/common.proto";
import "as/external/api/frameLog.proto";
import "handyrusty/hr.proto";

// GatewayService is the service managing the gateways.
service GatewayService {
	// Create creates the given gateway.
	rpc Create(CreateGatewayRequest) returns (google.protobuf.Empty) {
		option(google.api.http) = {
			post: "/api/gateways"
			body: "*"
		};
	}

	// Get returns the gateway for the requested mac address.
	rpc Get(GetGatewayRequest) returns (GetGatewayResponse) {
		option (google.api.http) = {
			get: "/api/gateways/{id}"
		};
	}

	// GetStatus returns the gateway status for the requested mac address.
	rpc GetStatus(GetGatewayRequest) returns (GetGatewayStatusResponse) {
		option (google.api.http) = {
			get: "/api/gateway-status/{id}"
		};
	}	

	// Update updates the gateway matching the given mac address.
	rpc Update(UpdateGatewayRequest) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			put: "/api/gateways/{gateway.id}"
			body: "*"
		};
	}

	// Delete deletes the gateway matching the given mac address.
	rpc Delete(DeleteGatewayRequest) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			delete: "/api/gateways/{id}"
		};
	}

	// List lists the gateways.
	rpc List(ListGatewayRequest) returns (ListGatewayResponse) {
		option (google.api.http) = {
			get: "/api/gateways"
		};
	}

	// GetGatewayLogs returns logs of statistics state changed.
	rpc GetGatewayLogs(hr.LogsGatewayRequest) returns (hr.LogsGatewayResponse) {
		option (google.api.http) = {
			post: "/api/gateways/logs",
			body: "*"
		};
	}

	// ListActilityStyled lists the gateways with legacy [Actility] json-format.
	rpc ListActilityStyled(ListGatewayRequest) returns (ListGwActilityStyledResponse) {
		option (google.api.http) = {
			get: "/api/monitoring/gateways/actility_styled"
		};
	}

	// ListMon lists all gateways with the metrics for monitoring purposes
	rpc ListMon(google.protobuf.Empty) returns (ListMonResponse) {
		option (google.api.http) = {
			get: "/api/monitoring/gateways"
		};
	}

	// GetStats lists the gateway stats given the query parameters.
	rpc GetStats(GetGatewayStatsRequest) returns (GetGatewayStatsResponse) {
		option (google.api.http) = {
			get: "/api/gateways/{gateway_id}/stats"
		};
	}

	// GetLastPing returns the last emitted ping and gateways receiving this ping.
	rpc GetLastPing(GetLastPingRequest) returns (GetLastPingResponse) {
		option (google.api.http) = {
			get: "/api/gateways/{gateway_id}/pings/last"
		};
	}

    // GenerateGatewayClientCertificate returns TLS certificate gateway authentication / authorization.
    // This endpoint can ony be used when Network Server is configured with a gateway
    // CA certificate and key, which is used for signing the TLS certificate. The returned TLS
    // certificate will have the Gateway ID as Common Name.
    rpc GenerateGatewayClientCertificate(GenerateGatewayClientCertificateRequest) returns (GenerateGatewayClientCertificateResponse) {
        option(google.api.http) = {
            post: "/api/gateways/{gateway_id}/generate-certificate"
        };
    }

    // StreamFrameLogs streams the uplink and downlink frame-logs for the given gateway ID.
	// Notes:
	//   * These are the raw LoRaWAN frames and this endpoint is intended for debugging only.
	//   (!) websocket required! The endpoint does not work from a web-swagger.
    rpc StreamFrameLogs(StreamGatewayFrameLogsRequest) returns (stream StreamGatewayFrameLogsResponse) {
        option (google.api.http) = {
            get: "/api/gateways/{gateway_id}/frames"
        };
	}

	// GetTaskResults lists the gateway tasks had been done by ExecCommand in background mode
	rpc GetTaskResults(GetGatewayRequest) returns (GetTaskResultsResponse) {
		option (google.api.http) = {
			get: "/api/gateways/{id}/task-results"
		};
	}    
}

message Gateway {
	// Gateway ID (HEX encoded).
	string id = 1;

	// Gateway name.
	string name = 2;

	// Gateway description.
	string description = 3;

	// Gateway location.
	common.Location location = 4;

	// Organization ID to which the gateway belongs.
	// This can't be changed after creating the gateway.
	int64 organization_id = 5 [json_name = "organizationID"];

	// Set to true to enable gateway discovery.
	bool discovery_enabled = 6;

	// Network-server ID on which the gateway is provisioned.
	int64 network_server_id = 7 [json_name = "networkServerID"];
	
	// Gateway-profile ID (UUID string, optional).
	string gateway_profile_id = 8 [json_name = "gatewayProfileID"];

	// Gateway boards configuration (optional).
    // This is (currently) only needed when the gateway supports the fine-timestamp
    // and you you would like to add the FPGA ID to the gateway meta-data or would
	// like Network Server to decrypt the fine-timestamp.
	repeated GatewayBoard boards = 9;

    // Tags (user defined).
    map<string, string> tags = 10;

    // Metadata (provided by the gateway).
    map<string, string> metadata = 11;

    // Address where the device is 
    string address = 12;

    // Serno - serial number of the device
    string serno = 13;

    // the status calculated by last_seen_at parameter (now - stats_interval*1.5 <= last_seen)
    bool active = 14;

    // Mobile phone number of SIM-card for the device
    string phone = 15;

    // Service-profile ID (UUID string, optional).
    string service_profile_id = 16 [json_name = "serviceProfileID"];

    // operational_status code (according to dictionary table)
    int64 op_status_code = 17;

    // operational_status label (according to dictionary table). Do not modify here
    string op_status_label = 18;

	// Network-server Name on which the gateway is provisioned.
	string network_server_name = 19 [json_name = "networkServerName"];
}

message GatewayBoard {
    // FPGA ID of the gateway (HEX encoded) (optional).
    string fpga_id = 1 [json_name = "fpgaID"];

    // Fine-timestamp AES decryption key (HEX encoded) (optional).
    string fine_timestamp_key = 2;
}

message CreateGatewayRequest {
	// Gateway object to create.
	Gateway gateway = 1;
}

message GetGatewayRequest {
	// Gateway ID (HEX encoded).
	string id = 1;
}

message GetGatewayResponse {
	// Gateway object.
	Gateway gateway = 1;

	// Created at timestamp.
	google.protobuf.Timestamp created_at = 2;

	// Last update timestamp.
	google.protobuf.Timestamp updated_at = 3;

	// First seen at timestamp.
	google.protobuf.Timestamp first_seen_at = 4;

	// Last seen at timestamp.
	google.protobuf.Timestamp last_seen_at = 5;

	// GPS Last seen at timestamp.
	google.protobuf.Timestamp GPS_seen_at = 6;	
};

message GetGatewayStatusResponse {
	// Gateway ID (HEX encoded).
	string id = 1;

	// Gateway status.
	bool active = 2;
	
	// Last seen at timestamp.
	google.protobuf.Timestamp last_seen_at = 3;
};

message DeleteGatewayRequest {
	// Gateway ID (HEX encoded).
	string id = 1;
}

message GenerateGatewayClientCertificateRequest {
    // Gateway ID (HEX encoded).
    string gateway_id = 1;
}

message GenerateGatewayClientCertificateResponse {
    // TLS certificate.
    string tls_cert = 1;

    // TLS key.
    string tls_key = 2;

    // CA certificate.
    string ca_cert = 3;

    // Expires at defines the expiration date of the certificate.
    google.protobuf.Timestamp expires_at = 4;
}


message ListGatewayRequest {
	// Required! Max number of nodes to return in the result-set.
	int32 limit = 1;

	// Offset of the result-set (for pagination).
	int32 offset = 2;

	// ID of the organization for which to filter on, when left blank the
	// response will return all gateways to which the user has access to.
	int64 organization_id = 3 [json_name = "organizationID"];

	// Search on name or gateway MAC (optional).
	string search = 4;

	// sort list by name
	string orderBy = 5;		

	// sort direction
	string order = 6;		
}

message GatewayListItem {
	// Gateway ID (HEX encoded).
	string id = 1;

	// A name for the gateway
	string name = 2;

	// A description for the gateway
	string description = 3;

	// Create timestamp.
	google.protobuf.Timestamp created_at = 4;

	// Last update timestamp.
	google.protobuf.Timestamp updated_at = 5;

    // First seen timestamp.
    google.protobuf.Timestamp first_seen_at = 8;

    // Last seen timestamp.
    google.protobuf.Timestamp last_seen_at = 9;

	// Organization ID.
	int64 organization_id = 6 [json_name = "organizationID"];

	// Network-server ID.
	int64 network_server_id = 7 [json_name = "networkServerID"];

    // Location.
    common.Location location = 10;

    // Network-server name.
    string network_server_name = 11;

    // the status of radio (if the packet forwarder is running)
    string radio = 12;

    // the status calculated from last_seen_at parameter
    bool active = 13;     
	
	//operational status name 
	string op_status_label = 14;

	//operational status code
	int64 op_status_code = 15;

	//gateway profile id (UUID)
	string gateway_profile_id = 16; 
	
	//gateway profile name 
	string gateway_profile_name = 17; 
	
}

// for monitoring list
message GatewayMonItem {
	// Gateway ID (HEX encoded).
	string id = 1;

	// A name for the gateway
	string name = 2;

    // Last seen timestamp.
    google.protobuf.Timestamp last_seen_at = 3;

    // metadata: packet forwarder status (if it is running)
    string radio = 4;

    // metadata: cpu load (%)
    string cpu = 5;

    // metadata: RAM usage (%)
    string ram = 6;

    // metadata: disk space used (%)
    string disk = 7; 

    // metadata: system uptime (unix)
    string uptime = 8;

    // metadata: ntp status ("OK" when it is fine)
    string ntp_status = 9; 

    // the status calculated from last_seen_at parameter
    bool active = 10;    

	//Operational status label
	string op_status_label = 11;

	// packets has been recieved for last minute
	int32 rx_count = 12;

	// packets has been transmitted for last minute
	int32 tx_count = 13;

    // metadata: disk1 space used (%)
    string disk1 = 14;

    // metadata: disk1 partirion name
    string disk1_name = 15;

    // metadata: disk1 space used (%)
    string disk2 = 16;

    // metadata: disk1 partirion name
    string disk2_name = 17;
}

message StatsItemActilityStyled {
	// Create timestamp.
	google.protobuf.Timestamp creation_time = 1 [json_name = "creationTime"];

	// CNX: it works, DISC: unreachable, NEVERCNX: never seen
	string connection_state = 2 [json_name = "connectionState"];

	// present errors on GW: ACTIVE, BACKHAUL_CNX_ERROR
	string health_state = 3 [json_name = "healthState"];
}

message GwItemActilityStyled {
	// ID. (max hex as integer)
	string ref = 1;
	
	// GW ID (last 4 bytes MSB)
	string id = 2;
	
	// name of the gateway
	string name = 3;

	// state of the gw: ACTIVE or SUSPENDED
	string administration_state = 4 [json_name = "administrationState"];

	// name of the gateway
	string owner = 5;

	StatsItemActilityStyled statistics = 6;     
}


message ListGatewayResponse {
	// Total number of nodes available within the result-set.
	int64 total_count = 1;

	// Nodes within this result-set.
	repeated GatewayListItem result = 2;
}

message ListMonResponse {
	// Nodes within this result-set.
	repeated GatewayMonItem result = 1;
}

message ListGwActilityStyledResponse {
	// Total number of nodes available within the result-set.
	int64 total_count = 1;

	// result array
	repeated GwItemActilityStyled result = 2;
}

message UpdateGatewayRequest {
	// Gateway object to update.
	Gateway gateway = 1;
}

message GatewayStats {
	// Timestamp of the (aggregated) measurement.
	google.protobuf.Timestamp timestamp = 1;

	// Packets received by the gateway.
	int32 rx_packets_received = 2;

	// Packets received by the gateway that passed the CRC check.
	int32 rx_packets_received_ok = 3 [json_name = "rxPacketsReceivedOK"];

	// Packets received by the gateway for transmission.
	int32 tx_packets_received = 4;

	// Packets transmitted by the gateway.
	int32 tx_packets_emitted = 5;

    // Tx packets per frequency.
    map<uint32, uint32> tx_packets_per_frequency = 6;

    // Rx packets per frequency.
    map<uint32, uint32> rx_packets_per_frequency = 7;

    // Tx packets per DR.
    map<uint32, uint32> tx_packets_per_dr = 8;

    // Rx packets per DR.
    map<uint32, uint32> rx_packets_per_dr = 9;

    // Tx packets per status.
    map<string, uint32> tx_packets_per_status = 10;
}

message GetGatewayStatsRequest {
	// Gateway ID (HEX encoded).
	string gateway_id = 1 [json_name = "gatewayID"];

	// Aggregation interval.  One of "second", "minute", "hour", "day", "week",
	// "month", "quarter", "year".  Case insensitive.
	string interval = 2;

	// Timestamp to start from.
	google.protobuf.Timestamp start_timestamp = 3;

	// Timestamp until to get from.
	google.protobuf.Timestamp end_timestamp = 4;
}

message GetGatewayStatsResponse {
	repeated GatewayStats result = 1;
}

message PingRX {
	// Gateway ID (HEX encoded).
	string gateway_id = 1 [json_name = "gatewayID"];

	// RSSI.
	int32 rssi = 2;

	// LoRa SNR.
	double lora_snr = 3 [json_name = "loRaSNR"];

	// Latitude of the gateway -90.0 to 90.0.
	double latitude = 4;

	// Longitude of the gateway -180.0 to 180.0.
	double longitude = 5;

	// Altitude of the gateway in meters.
	double altitude = 6;
}

message GetLastPingRequest {
	// Gateway ID (HEX encoded).
	string gateway_id = 1 [json_name = "gatewayID"];
}

message GetLastPingResponse {
	// Created at timestamp.
	google.protobuf.Timestamp created_at = 1;

	// Frequency (Hz).
	uint32 frequency = 2;

	// Data-rate.
	uint32 dr = 3;

	// Gateways and meta-data of reception.
	repeated PingRX ping_rx = 4 [json_name = "pingRX"];
}

message StreamGatewayFrameLogsRequest {
	// Gateway ID (HEX encoded).
	string gateway_id = 1 [json_name = "gatewayID"];
}

message StreamGatewayFrameLogsResponse {
    oneof frame {
        // Contains an uplink frame.
        UplinkFrameLog uplink_frame = 1;

        // Contains a downlink frame.
        DownlinkFrameLog downlink_frame = 2;
    }
}

message GwTaskResults {
    // Task ID.
    int64 id = 1;	

    // Execution ID.
    string exec_id = 2 [json_name = "execID"];	

	// timestamp.
	google.protobuf.Timestamp updated_at = 3;

    // command that had been executed on gateway
    string cmd = 4;

    // stderr by the command executed if exists
    bytes stderr = 5;

    // error recieved from gateway bridge or cmd script
    string error = 6;

    // description
    string description = 7;

    // size of stdout in bytes
    int32 stdout_len = 8;

    // the name of a file or other item for data in stdin
    string name = 9;        
}

message GetTaskResultsResponse {
	repeated GwTaskResults results = 1;
}