syntax = "proto3";

package integration;

option go_package = "github.com/brocaar/chirpstack-api/go/v3/as/integration";
option java_package = "io.chirpstack.api.as.integration";
option java_multiple_files = true;
option java_outer_classname = "IntegrationProto";

import "common/common.proto";
import "google/protobuf/timestamp.proto";
import "gw/gw.proto";
import "google/protobuf/wrappers.proto";

enum ErrorType {
    // Unknown type.
    UNKNOWN = 0;

    // Error related to the downlink payload size.
    // Usually seen when the payload exceeded the maximum allowed payload size.
    DOWNLINK_PAYLOAD_SIZE = 1;

    // Error related to the downlink frame-counter.
    // Usually seen when the frame-counter has already been used.
    DOWNLINK_FCNT = 2;

    // Uplink codec error.
    UPLINK_CODEC = 3;

    // Downlink codec error.
    DOWNLINK_CODEC = 4;

    // OTAA error.
    OTAA = 5;

    // Uplink frame-counter was reset.
    UPLINK_FCNT_RESET = 6;

    // Uplink MIC error.
    UPLINK_MIC = 7;

    // Uplink frame-counter retransmission.
    UPLINK_FCNT_RETRANSMISSION = 8;

    // Downlink gateway error.
    DOWNLINK_GATEWAY = 9;
}

// legacy format. Temp TODO: remove
// UplinkEvent is the message sent when an uplink payload has been received.
// message UplinkEvent {
//     // Application ID.
//     uint64 application_id = 1 [json_name = "applicationID"];

//     // Application name.
//     string application_name = 2;

//     // Device name.
//     string device_name = 3;

//     // Device EUI.
//     bytes dev_eui = 4 [json_name = "devEUI"];

//     // Receiving gateway RX info.
//     repeated gw.UplinkRXInfo rx_info = 5;

//     // TX info.
//     gw.UplinkTXInfo tx_info = 6;

//     // Device has ADR bit set.
//     bool adr = 7;

//     // Data-rate.
//     uint32 dr = 8;

//     // Frame counter.
//     uint32 f_cnt = 9;

//     // Frame port.
//     uint32 f_port = 10;

//     // FRMPayload data.
//     bytes data = 11;

//     // JSON string containing the decoded object.
//     // Note that this is only set when a codec is configured in the Device Profile.
//     string object_json = 12 [json_name = "objectJSON"];

//     // User-defined device tags.
//     map<string, string> tags = 13;

//     // Uplink was of type confirmed.
//     bool confirmed_uplink = 14;

//     // Device address.
//     bytes dev_addr = 15;

//     // mic for legacy. actility users. Modification
//     bytes mic = 16;

//     // true if packer late for more than 2min. Modification
//     bool late = 17;

//     // time frame(s) recieved. Can be gps\fts\by server for packet with best SNR. Modification
//     google.protobuf.Timestamp time = 18;    

//     // Published at timestamp.
//     google.protobuf.Timestamp published_at = 19;

//     // Device Profile UUID as string
//     string device_profile_id = 20 [json_name = "deviceProfileID"];

//     // Device Profile name
//     string device_profile_name = 21;

//     // Application ID list. The param is using by global integrations only
//     repeated uint64 applications = 22;

//     // current class of the device: string: "A", "B", "C"
//     string class = 23;

//     // organization ID.
//     uint64 organization_id = 24 [json_name = "organizationID"];    
// }


// new format ! 
// UplinkEvent is the message sent when an uplink payload has been received.
message UplinkEvent {
    // Network-Server (frequency plan) ID.
    uint32 ns_id = 1 [json_name = "nsID"];

    // organization ID.
    uint32 organization_id = 2 [json_name = "orgID"];

    // application ID.
    uint64 application_id = 3 [json_name = "appID"];

    // time when the message been published by the as. Service field. Used in logs!
    google.protobuf.Timestamp published_at = 4;

    // Device name.
    string device_name = 5;

    // Device EUI.
    bytes dev_eui = 6 [json_name = "devEUI"];

    // TX info.
    gw.UplinkTXInfo tx_info = 7;

    // Device has ADR bit set.
    bool adr = 8;

    // Data-rate.
    uint32 dr = 9;

    // Frame counter.
    uint32 f_cnt = 10;

    // Frame port.
    uint32 f_port = 11;

    // FRMPayload data.
    bytes data = 12;

    // JSON string containing the decoded object.
    // Note that this is only set when a codec is configured in the Device Profile.
    string object_json = 13 [json_name = "objectJSON"];

    // User-defined device tags.
    map<string, string> tags = 14;

    // True if the uplink type is confirmed 
    bool confirmed = 15;

    // Device address.
    bytes dev_addr = 16;

    // mic for legacy. actility users. Modification
    bytes mic = 17;

    // true if packer late for more than 2min. Modification
    bool late = 18;

    // time frame(s) recieved. Can be gps\fts\by server for packet with best SNR. Modification
    google.protobuf.Timestamp time = 19;

    // Device Profile UUID as string
    string device_profile_id = 20 [json_name = "dpID"];

    // Service Profile UUID as string
    string service_profile_id = 21 [json_name = "spID"];

    // Routing Profile UUID as string
    int32 routing_profile_id = 22 [json_name = "rpID"];

    // Application ID list. The param is using by global integrations only
    repeated uint64 applications = 23;

    // current class of the device: string: "A", "B", "C"
    string class = 24;

    // battery level last time recieved
    google.protobuf.Timestamp bat_time = 25;

    // battery level
    float bat_level = 26;    

    // Receiving gateway RX info.
    repeated gw.UplinkRXInfo rx_info = 50;
}

// JoinEvent is the message sent when a device joined the network.
// Note that this is only sent after the first received uplink after the
// device (re)activation.
message JoinEvent {
    // Application ID.
    uint64 application_id = 1 [json_name = "applicationID"];

    // Application name.
    string application_name = 2;

    // Device name.
    string device_name = 3;

    // Device EUI.
    bytes dev_eui = 4 [json_name = "devEUI"];

    // Device address.
    bytes dev_addr = 5;

    // Receiving gateway RX info.
    repeated gw.UplinkRXInfo rx_info = 6;

    // TX info.
    gw.UplinkTXInfo tx_info = 7;

    // Data-rate.
    uint32 dr = 8;

    // User-defined device tags.
    map<string, string> tags = 9;

    // Published at timestamp.
    google.protobuf.Timestamp published_at = 10;

    // Application ID list. The param is using by global integrations only
    repeated uint64 applications = 11;    
}

// AckEvent is the message sent when a confirmation on a confirmed downlink
// has been received -or- when the downlink timed out.
message AckEvent {
    // Application ID.
    uint64 application_id = 1 [json_name = "applicationID"];

    // Application name.
    string application_name = 2;

    // Device name.
    string device_name = 3;

    // Device EUI.
    bytes dev_eui = 4 [json_name = "devEUI"];

    // Frame was acknowledged.
    bool acknowledged = 5;

    // Downlink frame counter to which the acknowledgement relates.
    uint32 f_cnt = 6;

    // User-defined device tags.
    map<string, string> tags = 7;

    // Published at timestamp.
    google.protobuf.Timestamp published_at = 8;

    // optional. the id was generated on client's side to control tx
    string message_id = 9;

    // Application ID list. The param is using by global integrations only
    repeated uint64 applications = 10;    
}

// TxAckEvent is the message sent when a downlink was acknowledged by the gateway
// for transmission. As a downlink can be scheduled in the future, this event
// does not confirm that the message has already been transmitted.
message TxAckEvent {
    // Application ID.
    uint64 application_id = 1 [json_name = "applicationID"];

    // Application name.
    string application_name = 2;

    // Device name.
    string device_name = 3;

    // Device EUI.
    bytes dev_eui = 4 [json_name = "devEUI"];

    // Downlink frame-counter.
    uint32 f_cnt = 5;

    // User-defined device tags.
    map<string, string> tags = 6;

    // Gateway ID.
    bytes gateway_id = 7 [json_name = "gatewayID"];

    // TX info.
    gw.DownlinkTXInfo tx_info = 8;

    // Published at timestamp.
    google.protobuf.Timestamp published_at = 9;

    // optional. the id was generated on client's side to control tx
    string message_id = 10;

    // Application ID list. The param is using by global integrations only
    repeated uint64 applications = 11;    
}

// ErrorEvent is the message sent when an error occurred.
message ErrorEvent {
    // Application ID.
    uint64 application_id = 1 [json_name = "applicationID"];

    // Application name.
    string application_name = 2;

    // Device name.
    string device_name = 3;

    // Device EUI.
    bytes dev_eui = 4 [json_name = "devEUI"];

    // Error type.
    ErrorType type = 5;

    // Error message.
    string error = 6;

    // Downlink frame-counter (in case the downlink is related to a scheduled downlink).
    uint32 f_cnt = 7;

    // User-defined device tags.
    map<string, string> tags = 8;

    // Published at timestamp.
    google.protobuf.Timestamp published_at = 9;

    // Application ID list. The param is using by global integrations only
    repeated uint64 applications = 10;

    // id of DL message. In case the error is about downlink message
    string message_id = 11;     
}

// StatusEvent is the message sent when a device-status mac-command was sent
// by the device.
message StatusEvent {
    // Application ID.
    uint64 application_id = 1 [json_name = "applicationID"];

    // Application name.
    string application_name = 2;

    // Device name.
    string device_name = 3;

    // Device EUI.
    bytes dev_eui = 4 [json_name = "devEUI"];

    // The demodulation signal-to-noise ratio in dB for the last successfully
    // received device-status request by the Network Server.
    int32 margin = 5;

    // Device is connected to an external power source.
    bool external_power_source = 6;

    // Battery level is not available.
    bool battery_level_unavailable = 7;

    // Battery level.
    float battery_level = 8;

    // User-defined device tags.
    map<string, string> tags = 9;

    // Published at timestamp.
    google.protobuf.Timestamp published_at = 10;

    // Application ID list. The param is using by global integrations only
    repeated uint64 applications = 11;    
}

// LocationEvent is the message sent when a geolocation resolve was returned.
message LocationEvent {
    // Application ID.
    uint64 application_id = 1 [json_name = "applicationID"];

    // Application name.
    string application_name = 2;

    // Device name.
    string device_name = 3;

    // Device EUI.
    bytes dev_eui = 4 [json_name = "devEUI"];

    // Location.
    common.Location location = 5;

    // User-defined device tags.
    map<string, string> tags = 6;

    // Uplink IDs used for geolocation.
    // This is set in case the geolocation is based on the uplink meta-data.
    repeated bytes uplink_ids = 7 [json_name = "uplinkIDs"];

    // Frame counter (in case the geolocation is based on the payload).
    // This is set in case the geolocation is based on the uplink payload content.
    uint32 f_cnt = 8;

    // Published at timestamp.
    google.protobuf.Timestamp published_at = 9;

    // Application ID list. The param is using by global integrations only
    repeated uint64 applications = 10;    
}

// IntegrationEvent is the message that can be sent by an integration.
// It allows for sending events which are provided by an external integration
// which are "not native" to ChirpStack.
message IntegrationEvent {
    // Application ID.
    uint64 application_id = 1 [json_name = "applicationID"];

    // Application name.
    string application_name = 2;

    // Device name.
    string device_name = 3;

    // Device EUI.
    bytes dev_eui = 4 [json_name = "devEUI"];

    // User-defined device tags.
    map<string, string> tags = 5;

    // Integration name.
    string integration_name = 6;

    // Event type.
    string event_type = 7;

    // JSON string containing the event object.
    string object_json = 8 [json_name = "objectJSON"];

    // Published at timestamp.
    google.protobuf.Timestamp published_at = 9;

    // Application ID list. The param is using by global integrations only
    repeated uint64 applications = 10;    
}


// Lartech Co LTD Custom format for passing data to Ernet.uplink topic
// UplinkEvent is the message sent when an uplink payload has been received.
message LartechUplinkEvent {
    string messageId = 1;   // id сообщения присвоенное сервером сети
    string devEui = 2;      // МАС-адрес устройства
    string gatewayEui = 3;  // 1я БС принявшая сообщение
    string appId = 4;       // Значение «MeteringServer»
    int64 rxTime = 5;       // UTC-время приема uplink в БС
    int32 frameCounter = 6; // FcntUp
    bool confirmed = 7;     // ConfirmedUplink=True/UnconfirmedUplink=False
    int32 frequency = 8;
    oneof modulation {      // Необязательное поле
        LoRaModulation loraModulation = 9;
        FSKModulation fskModulation = 10;
    }
    float snr = 11;                              // SNR от 1й БС
    float rssi = 12;                             // RSSI от 1й БС
    google.protobuf.Int32Value fport = 13;       // Порт данных
    bytes frmPayload = 14;                       // Принятые данные
    google.protobuf.StringValue owner = 15;      // Владелец устройства
    google.protobuf.Int32Value stat = 16;        // Необязательное поле
    google.protobuf.Int32Value rfChain = 17;     // Необязательное поле
    google.protobuf.Int32Value size = 18;        // Необязательное поле
    google.protobuf.StringValue firmware = 19;      // Необязательное поле
    google.protobuf.BoolValue firstMessage = 20;    // Необязательное поле
}

// the soother is for  LartechUplinkEvent
message LoRaModulation {
    int32 id = 1;
}

// the soother is for LartechUplinkEvent
message FSKModulation {
    int32 id = 1;
}

// the soother is for LartechDownlink
message StatusRepliesMode {
    int32 id = 1;
}

// the soother is for LartechDownlink
message DownlinkType {
    int32 id = 1;
}

// the soother is for LartechDownlink. Orig backbone.types.RxWindow
message RxWindow {
    int32 id = 1;
}

// messages from Lartech Kafka
message LartechDownlink {
    string messageId = 1;   // Присвоить уникальный ID. Пример «7C7ECEVo»
    string devEui = 2;                  // МАС-адрес устройства
    string appId = 3;                   // Приложение отправитель
    google.protobuf.Int32Value retries = 4; // 0 = Unconfirmed downlink, 1…N = Confirmed downlink с количеством попыток доставки 1…N
    google.protobuf.Int32Value fport = 5;       // Порт данных
    repeated bytes frmPayloads = 6;         // Отправляемые данные
    bool enableStatusReplies = 7;               // Отправлять ли статусы
    RxWindow rxWindowHint = 8;       // Необязательное поле
    google.protobuf.StringValue owner = 9;  // Владелец устройства
    repeated StatusRepliesMode statusRepliesModes = 10; // Необязательное поле
    google.protobuf.Int32Value alreadySentChunks = 11; // Необязательное поле
    DownlinkType downlinkType = 12;             // Необязательное поле
    google.protobuf.Int32Value timeZoneHours = 13;  // Необязательное поле
}

message LartechDownlinkMessageStatus {
    string messageId = 1;   // ID downlink-сообщения, к которому относится статус (см. п.2.2)
    string devEui = 2;                  // МАС-адрес устройства
    LartechDeliveryStatus status = 3; // Статус downlink см.ниже
    google.protobuf.StringValue statusDescription = 4; // Необязательное поле
    string appId = 5;                   // Значение «MeteringServer»
    google.protobuf.StringValue owner = 6;  // Владелец устройства
    int32 sentChunks = 7;               // Необязательное поле
}

enum LartechDeliveryStatus {
    ACCEPTED = 0;       // DL успешно принят в сервере сети от App
    REJECTED = 1;       // DL не может быть отправлен (ошибка сервера)
    ON_AIR = 2;     // DL отправлен из БС в устройство
    LOST = 3;       // DL не доставлен от БС до устройства
    DELIVERED = 4;  // DL доставлен в устройство (получено подтверждение)
    ACCESS_DENIED = 5;  // DL не может быть отправлен (нет прав)
    INTERNAL_ERROR = 6; // DL не отправлен из-за отсутствия ответа от БС
    CANCELLED = 7;  // Не используется
}


// DEFAULT MESSAGES

// UplinkDefault is the message sent when an uplink payload has been received.
message UplinkDefault {
    // Network-Server (frequency plan) ID.
    uint32 ns_id = 1 [json_name = "nsID"];

    // organization ID.
    uint32 organization_id = 2 [json_name = "orgID"];

    // Device name.
    string device_name = 3;

    // Device EUI. HEX-string
    string dev_eui = 4 [json_name = "devEUI"];

    // Device has ADR bit set.
    bool adr = 5;

    // Data-rate.
    uint32 dr = 6;

    // Frame counter.
    uint32 f_cnt = 7;

    // Frame port.
    uint32 f_port = 8;

    // FRMPayload data. HEX-string
    string data = 9;

    // User-defined device tags.
    map<string, string> tags = 10;

    // True if the uplink type is confirmed 
    bool confirmed = 11;

    // Device address.
    string dev_addr = 12;

    // mic for legacy. actility users. Modification
    string mic = 13;

    // true if packer late for more than 2min. Modification
    bool late = 14;

    // time when the frame(s) had been recieved. Can be gps\fts\by server for packet with best SNR.
    google.protobuf.Timestamp time = 15;

    // Device Profile UUID as string
    string device_profile_id = 16 [json_name = "dpID"];

    // Service Profile UUID as string
    string service_profile_id = 17 [json_name = "spID"];

    // current class of the device: string: "A", "B", "C"
    string class = 18;

    // battery level last time recieved
    google.protobuf.Timestamp bat_time = 19;

    // battery level
    float bat_level = 20;

    // true if the device works not from the battery but from external power
    // (when bat_level value is 255)
    bool ext_power = 21;

    // true - means battery level is unavailible. When bat_level value is 0)
    bool no_bat_lvl = 22;

    // Receiving gateway RX info.
    repeated UplinkRXInfoDefault rx_info = 50;      
}


message UplinkRXInfoDefault {
    // Gateway ID.
    string gateway_id = 1 [json_name = "gatewayID"];

    // RSSI.
    int32 rssi = 2;

    // LoRa SNR.
    double lora_snr = 3 [json_name = "loRaSNR"];

    // Channel.
    uint32 channel = 4;

    // Location.
    common.Location location = 5;

    // Fine-timestamp type.
    gw.FineTimestampType fine_timestamp_type = 6;

    // Fine-timestamp data.
    oneof fine_timestamp {
        // Encrypted fine-timestamp data.
        gw.EncryptedFineTimestamp encrypted_fine_timestamp = 7;

        // Plain fine-timestamp data.
        gw.PlainFineTimestamp plain_fine_timestamp = 8;
    }

    // Gateway specific context.
    string context = 9;

    // Uplink ID (UUID bytes).
    // Unique and random ID which can be used to correlate the uplink across multiple logs.
    string uplink_id = 10 [json_name = "uplinkID"];
}