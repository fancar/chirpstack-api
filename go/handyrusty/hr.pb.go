// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        (unknown)
// source: handyrusty/hr.proto

package handyrusty

import (
	common "github.com/brocaar/chirpstack-api/go/v3/common"
	gw "github.com/brocaar/chirpstack-api/go/v3/gw"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetAveragesForDeviceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI array
	DevList []string `protobuf:"bytes,1,rep,name=dev_list,json=devList,proto3" json:"dev_list,omitempty"`
}

func (x *GetAveragesForDeviceListRequest) Reset() {
	*x = GetAveragesForDeviceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAveragesForDeviceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAveragesForDeviceListRequest) ProtoMessage() {}

func (x *GetAveragesForDeviceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAveragesForDeviceListRequest.ProtoReflect.Descriptor instead.
func (*GetAveragesForDeviceListRequest) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{0}
}

func (x *GetAveragesForDeviceListRequest) GetDevList() []string {
	if x != nil {
		return x.DevList
	}
	return nil
}

type AveragesForDeviceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI
	DevEui string `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// average per for last 24 hours
	PerAvg float32 `protobuf:"fixed32,2,opt,name=per_avg,json=perAvg,proto3" json:"per_avg,omitempty"`
	// rx+tx packets for last 24 hours
	PacketCnt uint32 `protobuf:"varint,3,opt,name=packet_cnt,json=packetCnt,proto3" json:"packet_cnt,omitempty"`
	// last signal to noise ratio
	SnrLast float64 `protobuf:"fixed64,4,opt,name=snr_last,json=snrLast,proto3" json:"snr_last,omitempty"`
	// last received signal strength indication
	RssiLast int32 `protobuf:"varint,5,opt,name=rssi_last,json=rssiLast,proto3" json:"rssi_last,omitempty"`
}

func (x *AveragesForDeviceList) Reset() {
	*x = AveragesForDeviceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AveragesForDeviceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AveragesForDeviceList) ProtoMessage() {}

func (x *AveragesForDeviceList) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AveragesForDeviceList.ProtoReflect.Descriptor instead.
func (*AveragesForDeviceList) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{1}
}

func (x *AveragesForDeviceList) GetDevEui() string {
	if x != nil {
		return x.DevEui
	}
	return ""
}

func (x *AveragesForDeviceList) GetPerAvg() float32 {
	if x != nil {
		return x.PerAvg
	}
	return 0
}

func (x *AveragesForDeviceList) GetPacketCnt() uint32 {
	if x != nil {
		return x.PacketCnt
	}
	return 0
}

func (x *AveragesForDeviceList) GetSnrLast() float64 {
	if x != nil {
		return x.SnrLast
	}
	return 0
}

func (x *AveragesForDeviceList) GetRssiLast() int32 {
	if x != nil {
		return x.RssiLast
	}
	return 0
}

type GetAveragesForDeviceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*AveragesForDeviceList `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *GetAveragesForDeviceListResponse) Reset() {
	*x = GetAveragesForDeviceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAveragesForDeviceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAveragesForDeviceListResponse) ProtoMessage() {}

func (x *GetAveragesForDeviceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAveragesForDeviceListResponse.ProtoReflect.Descriptor instead.
func (*GetAveragesForDeviceListResponse) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{2}
}

func (x *GetAveragesForDeviceListResponse) GetResult() []*AveragesForDeviceList {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetDeviceStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI
	DevEui string `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
}

func (x *GetDeviceStatsRequest) Reset() {
	*x = GetDeviceStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceStatsRequest) ProtoMessage() {}

func (x *GetDeviceStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceStatsRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceStatsRequest) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{3}
}

func (x *GetDeviceStatsRequest) GetDevEui() string {
	if x != nil {
		return x.DevEui
	}
	return ""
}

type GetDeviceStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// number of rx+tx packets for last 24 hours
	PacketCnt uint32 `protobuf:"varint,1,opt,name=packet_cnt,json=packetCnt,proto3" json:"packet_cnt,omitempty"`
	// average estimated signal power for last 24 hours
	EspAvg float32 `protobuf:"fixed32,2,opt,name=esp_avg,json=espAvg,proto3" json:"esp_avg,omitempty"`
	// average signal to noise ratio for last 24 hours
	SnrAvg float32 `protobuf:"fixed32,3,opt,name=snr_avg,json=snrAvg,proto3" json:"snr_avg,omitempty"`
	// average received signal strength indication for last 24 hours
	RssiAvg float32 `protobuf:"fixed32,4,opt,name=rssi_avg,json=rssiAvg,proto3" json:"rssi_avg,omitempty"`
	// average packet error rate for last 24 hours
	PerAvg float32 `protobuf:"fixed32,5,opt,name=per_avg,json=perAvg,proto3" json:"per_avg,omitempty"`
	// last estimated signal power
	EspLast float64 `protobuf:"fixed64,6,opt,name=esp_last,json=espLast,proto3" json:"esp_last,omitempty"`
	// last signal to noise ratio
	SnrLast float64 `protobuf:"fixed64,7,opt,name=snr_last,json=snrLast,proto3" json:"snr_last,omitempty"`
	// last received signal strength indication
	RssiLast int32 `protobuf:"varint,8,opt,name=rssi_last,json=rssiLast,proto3" json:"rssi_last,omitempty"`
	// last time spreading factor
	SfLast uint32 `protobuf:"varint,9,opt,name=sf_last,json=sfLast,proto3" json:"sf_last,omitempty"`
	// last received uplink DateTime
	RxLast *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=rx_last,json=rxLast,proto3" json:"rx_last,omitempty"`
	// last received downlink DateTime
	TxLast *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=tx_last,json=txLast,proto3" json:"tx_last,omitempty"`
	// last successful join DateTime
	JoinLast *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=join_last,json=joinLast,proto3" json:"join_last,omitempty"`
	// instantaneous packet error rate for last 20 packets history in device-session
	PerLast float32 `protobuf:"fixed32,13,opt,name=per_last,json=perLast,proto3" json:"per_last,omitempty"`
}

func (x *GetDeviceStatsResponse) Reset() {
	*x = GetDeviceStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceStatsResponse) ProtoMessage() {}

func (x *GetDeviceStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceStatsResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceStatsResponse) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{4}
}

func (x *GetDeviceStatsResponse) GetPacketCnt() uint32 {
	if x != nil {
		return x.PacketCnt
	}
	return 0
}

func (x *GetDeviceStatsResponse) GetEspAvg() float32 {
	if x != nil {
		return x.EspAvg
	}
	return 0
}

func (x *GetDeviceStatsResponse) GetSnrAvg() float32 {
	if x != nil {
		return x.SnrAvg
	}
	return 0
}

func (x *GetDeviceStatsResponse) GetRssiAvg() float32 {
	if x != nil {
		return x.RssiAvg
	}
	return 0
}

func (x *GetDeviceStatsResponse) GetPerAvg() float32 {
	if x != nil {
		return x.PerAvg
	}
	return 0
}

func (x *GetDeviceStatsResponse) GetEspLast() float64 {
	if x != nil {
		return x.EspLast
	}
	return 0
}

func (x *GetDeviceStatsResponse) GetSnrLast() float64 {
	if x != nil {
		return x.SnrLast
	}
	return 0
}

func (x *GetDeviceStatsResponse) GetRssiLast() int32 {
	if x != nil {
		return x.RssiLast
	}
	return 0
}

func (x *GetDeviceStatsResponse) GetSfLast() uint32 {
	if x != nil {
		return x.SfLast
	}
	return 0
}

func (x *GetDeviceStatsResponse) GetRxLast() *timestamppb.Timestamp {
	if x != nil {
		return x.RxLast
	}
	return nil
}

func (x *GetDeviceStatsResponse) GetTxLast() *timestamppb.Timestamp {
	if x != nil {
		return x.TxLast
	}
	return nil
}

func (x *GetDeviceStatsResponse) GetJoinLast() *timestamppb.Timestamp {
	if x != nil {
		return x.JoinLast
	}
	return nil
}

func (x *GetDeviceStatsResponse) GetPerLast() float32 {
	if x != nil {
		return x.PerLast
	}
	return 0
}

type DeviceStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// last received uplink DateTime
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// number of uplink packets
	RxCnt uint32 `protobuf:"varint,2,opt,name=rx_cnt,json=rxCnt,proto3" json:"rx_cnt,omitempty"`
	// number of downlink packets
	TxCnt uint32 `protobuf:"varint,3,opt,name=tx_cnt,json=txCnt,proto3" json:"tx_cnt,omitempty"`
	// packet error rate
	Per float32 `protobuf:"fixed32,4,opt,name=per,proto3" json:"per,omitempty"`
	// estimated signal power
	Esp float32 `protobuf:"fixed32,5,opt,name=esp,proto3" json:"esp,omitempty"`
	// average received signal strength
	Rssi float32 `protobuf:"fixed32,6,opt,name=rssi,proto3" json:"rssi,omitempty"`
	// signal to noise ratio
	Snr float32 `protobuf:"fixed32,7,opt,name=snr,proto3" json:"snr,omitempty"`
	// spreading factor
	Sf uint32 `protobuf:"varint,8,opt,name=sf,proto3" json:"sf,omitempty"`
}

func (x *DeviceStats) Reset() {
	*x = DeviceStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceStats) ProtoMessage() {}

func (x *DeviceStats) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceStats.ProtoReflect.Descriptor instead.
func (*DeviceStats) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{5}
}

func (x *DeviceStats) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DeviceStats) GetRxCnt() uint32 {
	if x != nil {
		return x.RxCnt
	}
	return 0
}

func (x *DeviceStats) GetTxCnt() uint32 {
	if x != nil {
		return x.TxCnt
	}
	return 0
}

func (x *DeviceStats) GetPer() float32 {
	if x != nil {
		return x.Per
	}
	return 0
}

func (x *DeviceStats) GetEsp() float32 {
	if x != nil {
		return x.Esp
	}
	return 0
}

func (x *DeviceStats) GetRssi() float32 {
	if x != nil {
		return x.Rssi
	}
	return 0
}

func (x *DeviceStats) GetSnr() float32 {
	if x != nil {
		return x.Snr
	}
	return 0
}

func (x *DeviceStats) GetSf() uint32 {
	if x != nil {
		return x.Sf
	}
	return 0
}

type GetDeviceStatsLastTwoweeksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats []*DeviceStats `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"`
}

func (x *GetDeviceStatsLastTwoweeksResponse) Reset() {
	*x = GetDeviceStatsLastTwoweeksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceStatsLastTwoweeksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceStatsLastTwoweeksResponse) ProtoMessage() {}

func (x *GetDeviceStatsLastTwoweeksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceStatsLastTwoweeksResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceStatsLastTwoweeksResponse) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{6}
}

func (x *GetDeviceStatsLastTwoweeksResponse) GetStats() []*DeviceStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type LogsGwItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Created at timestamp.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// code of event
	Code int64 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	// Gateway ID (HEX encoded).
	GatewayId string `protobuf:"bytes,3,opt,name=gateway_id,json=gatewayID,proto3" json:"gateway_id,omitempty"`
}

func (x *LogsGwItem) Reset() {
	*x = LogsGwItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogsGwItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogsGwItem) ProtoMessage() {}

func (x *LogsGwItem) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogsGwItem.ProtoReflect.Descriptor instead.
func (*LogsGwItem) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{7}
}

func (x *LogsGwItem) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *LogsGwItem) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *LogsGwItem) GetGatewayId() string {
	if x != nil {
		return x.GatewayId
	}
	return ""
}

type LogsGatewayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Max number of nodes to return in the result-set.
	Limit int32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// Offset of the result-set (for pagination).
	Offset int32 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// you must specify the filed
	OrganizationId int64 `protobuf:"varint,3,opt,name=organization_id,json=organizationID,proto3" json:"organization_id,omitempty"`
	// list of gateways (hex-strings). All the gws must be under the same organization
	GwList []string `protobuf:"bytes,4,rep,name=gw_list,json=gwList,proto3" json:"gw_list,omitempty"`
	// code of event according to dictionary gwlogs_state
	Code int64 `protobuf:"varint,5,opt,name=code,proto3" json:"code,omitempty"`
	// Timestamp for filter from the date.
	StartTimestamp *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	// Timestamp for filtering up to the date.
	EndTimestamp *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
}

func (x *LogsGatewayRequest) Reset() {
	*x = LogsGatewayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogsGatewayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogsGatewayRequest) ProtoMessage() {}

func (x *LogsGatewayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogsGatewayRequest.ProtoReflect.Descriptor instead.
func (*LogsGatewayRequest) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{8}
}

func (x *LogsGatewayRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *LogsGatewayRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *LogsGatewayRequest) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *LogsGatewayRequest) GetGwList() []string {
	if x != nil {
		return x.GwList
	}
	return nil
}

func (x *LogsGatewayRequest) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *LogsGatewayRequest) GetStartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimestamp
	}
	return nil
}

func (x *LogsGatewayRequest) GetEndTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTimestamp
	}
	return nil
}

type LogsGatewayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total number of nodes available within the result-set.
	TotalCount int64 `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	// result array
	Result []*LogsGwItem `protobuf:"bytes,2,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *LogsGatewayResponse) Reset() {
	*x = LogsGatewayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogsGatewayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogsGatewayResponse) ProtoMessage() {}

func (x *LogsGatewayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogsGatewayResponse.ProtoReflect.Descriptor instead.
func (*LogsGatewayResponse) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{9}
}

func (x *LogsGatewayResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *LogsGatewayResponse) GetResult() []*LogsGwItem {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetIntegrationRepliesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// you can specify offset (for pagination)
	Offset uint32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// you can specify rows limit
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// id of organization where integration linked to
	OrganisationId int64 `protobuf:"varint,3,opt,name=organisation_id,json=organisationId,proto3" json:"organisation_id,omitempty"`
	// id of routing profile
	RoutingProfileId int64 `protobuf:"varint,4,opt,name=routing_profile_id,json=routingProfileId,proto3" json:"routing_profile_id,omitempty"`
	// Device EUI
	DevEui string `protobuf:"bytes,5,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// http status != 200
	IsError bool `protobuf:"varint,6,opt,name=is_error,json=isError,proto3" json:"is_error,omitempty"`
	// http status == 200
	IsOk bool `protobuf:"varint,7,opt,name=is_ok,json=isOk,proto3" json:"is_ok,omitempty"`
	// You can specify start DateTime point.
	Start *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=start,proto3" json:"start,omitempty"`
	// You can specify end DateTime point.
	End *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *GetIntegrationRepliesRequest) Reset() {
	*x = GetIntegrationRepliesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIntegrationRepliesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIntegrationRepliesRequest) ProtoMessage() {}

func (x *GetIntegrationRepliesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIntegrationRepliesRequest.ProtoReflect.Descriptor instead.
func (*GetIntegrationRepliesRequest) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{10}
}

func (x *GetIntegrationRepliesRequest) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetIntegrationRepliesRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetIntegrationRepliesRequest) GetOrganisationId() int64 {
	if x != nil {
		return x.OrganisationId
	}
	return 0
}

func (x *GetIntegrationRepliesRequest) GetRoutingProfileId() int64 {
	if x != nil {
		return x.RoutingProfileId
	}
	return 0
}

func (x *GetIntegrationRepliesRequest) GetDevEui() string {
	if x != nil {
		return x.DevEui
	}
	return ""
}

func (x *GetIntegrationRepliesRequest) GetIsError() bool {
	if x != nil {
		return x.IsError
	}
	return false
}

func (x *GetIntegrationRepliesRequest) GetIsOk() bool {
	if x != nil {
		return x.IsOk
	}
	return false
}

func (x *GetIntegrationRepliesRequest) GetStart() *timestamppb.Timestamp {
	if x != nil {
		return x.Start
	}
	return nil
}

func (x *GetIntegrationRepliesRequest) GetEnd() *timestamppb.Timestamp {
	if x != nil {
		return x.End
	}
	return nil
}

type GetIntegrationRepliesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// total numner of selected rows
	ItemsTotal uint32 `protobuf:"varint,1,opt,name=items_total,json=itemsTotal,proto3" json:"items_total,omitempty"`
	// the array of selected replies
	Result []*IntegrationReply `protobuf:"bytes,2,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *GetIntegrationRepliesResponse) Reset() {
	*x = GetIntegrationRepliesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetIntegrationRepliesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIntegrationRepliesResponse) ProtoMessage() {}

func (x *GetIntegrationRepliesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIntegrationRepliesResponse.ProtoReflect.Descriptor instead.
func (*GetIntegrationRepliesResponse) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{11}
}

func (x *GetIntegrationRepliesResponse) GetItemsTotal() uint32 {
	if x != nil {
		return x.ItemsTotal
	}
	return 0
}

func (x *GetIntegrationRepliesResponse) GetResult() []*IntegrationReply {
	if x != nil {
		return x.Result
	}
	return nil
}

type IntegrationReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// url from integration parameters where event informations sending
	IntegrationUrl string `protobuf:"bytes,1,opt,name=integration_url,json=integrationUrl,proto3" json:"integration_url,omitempty"`
	// http status code of sent event (protobuf/as/integration/integration.proto)
	StatusCode int32 `protobuf:"varint,2,opt,name=status_code,json=statusCode,proto3" json:"status_code,omitempty"`
	// description of http status code
	StatusCodeDescription string `protobuf:"bytes,3,opt,name=status_code_description,json=statusCodeDescription,proto3" json:"status_code_description,omitempty"`
	// id of application where integration linked to
	ApplicationId int64 `protobuf:"varint,4,opt,name=application_id,json=applicationId,proto3" json:"application_id,omitempty"`
	// Device EUI
	DevEui string `protobuf:"bytes,5,opt,name=dev_eui,json=devEUI,proto3" json:"dev_eui,omitempty"`
	// time of receining reply
	Time *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *IntegrationReply) Reset() {
	*x = IntegrationReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntegrationReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntegrationReply) ProtoMessage() {}

func (x *IntegrationReply) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntegrationReply.ProtoReflect.Descriptor instead.
func (*IntegrationReply) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{12}
}

func (x *IntegrationReply) GetIntegrationUrl() string {
	if x != nil {
		return x.IntegrationUrl
	}
	return ""
}

func (x *IntegrationReply) GetStatusCode() int32 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *IntegrationReply) GetStatusCodeDescription() string {
	if x != nil {
		return x.StatusCodeDescription
	}
	return ""
}

func (x *IntegrationReply) GetApplicationId() int64 {
	if x != nil {
		return x.ApplicationId
	}
	return 0
}

func (x *IntegrationReply) GetDevEui() string {
	if x != nil {
		return x.DevEui
	}
	return ""
}

func (x *IntegrationReply) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type StoreIntegrationReplyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Organization ID
	OrganisationId int64 `protobuf:"varint,1,opt,name=organisation_id,json=organisationId,proto3" json:"organisation_id,omitempty"`
	// AS Routing Profile ID
	RoutingProfileId int64 `protobuf:"varint,2,opt,name=routing_profile_id,json=routingProfileId,proto3" json:"routing_profile_id,omitempty"`
	// reply for saving
	Reply *IntegrationReply `protobuf:"bytes,3,opt,name=reply,proto3" json:"reply,omitempty"`
}

func (x *StoreIntegrationReplyRequest) Reset() {
	*x = StoreIntegrationReplyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreIntegrationReplyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreIntegrationReplyRequest) ProtoMessage() {}

func (x *StoreIntegrationReplyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreIntegrationReplyRequest.ProtoReflect.Descriptor instead.
func (*StoreIntegrationReplyRequest) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{13}
}

func (x *StoreIntegrationReplyRequest) GetOrganisationId() int64 {
	if x != nil {
		return x.OrganisationId
	}
	return 0
}

func (x *StoreIntegrationReplyRequest) GetRoutingProfileId() int64 {
	if x != nil {
		return x.RoutingProfileId
	}
	return 0
}

func (x *StoreIntegrationReplyRequest) GetReply() *IntegrationReply {
	if x != nil {
		return x.Reply
	}
	return nil
}

type StoreIntegrationReplyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StoredCount int64 `protobuf:"varint,1,opt,name=stored_count,json=storedCount,proto3" json:"stored_count,omitempty"`
}

func (x *StoreIntegrationReplyResponse) Reset() {
	*x = StoreIntegrationReplyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StoreIntegrationReplyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreIntegrationReplyResponse) ProtoMessage() {}

func (x *StoreIntegrationReplyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreIntegrationReplyResponse.ProtoReflect.Descriptor instead.
func (*StoreIntegrationReplyResponse) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{14}
}

func (x *StoreIntegrationReplyResponse) GetStoredCount() int64 {
	if x != nil {
		return x.StoredCount
	}
	return 0
}

type GetCurrentStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DateTime of last packet saved in wireless-loger
	WlLastPacket string `protobuf:"bytes,1,opt,name=wl_last_packet,json=wlLastPacket,proto3" json:"wl_last_packet,omitempty"`
	// the same as previuos in unixTime format
	WlLastPacketUnix int64 `protobuf:"varint,2,opt,name=wl_last_packet_unix,json=wlLastPacketUnix,proto3" json:"wl_last_packet_unix,omitempty"`
}

func (x *GetCurrentStateResponse) Reset() {
	*x = GetCurrentStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCurrentStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCurrentStateResponse) ProtoMessage() {}

func (x *GetCurrentStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCurrentStateResponse.ProtoReflect.Descriptor instead.
func (*GetCurrentStateResponse) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{15}
}

func (x *GetCurrentStateResponse) GetWlLastPacket() string {
	if x != nil {
		return x.WlLastPacket
	}
	return ""
}

func (x *GetCurrentStateResponse) GetWlLastPacketUnix() int64 {
	if x != nil {
		return x.WlLastPacketUnix
	}
	return 0
}

type StreamDeviceFramesCSVResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Size:
	//
	//	*StreamDeviceFramesCSVResponse_Current
	//	*StreamDeviceFramesCSVResponse_Total
	Size isStreamDeviceFramesCSVResponse_Size `protobuf_oneof:"size"`
	// Types that are assignable to Data:
	//
	//	*StreamDeviceFramesCSVResponse_Rows
	//	*StreamDeviceFramesCSVResponse_Chunk
	Data isStreamDeviceFramesCSVResponse_Data `protobuf_oneof:"data"`
}

func (x *StreamDeviceFramesCSVResponse) Reset() {
	*x = StreamDeviceFramesCSVResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamDeviceFramesCSVResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamDeviceFramesCSVResponse) ProtoMessage() {}

func (x *StreamDeviceFramesCSVResponse) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamDeviceFramesCSVResponse.ProtoReflect.Descriptor instead.
func (*StreamDeviceFramesCSVResponse) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{16}
}

func (m *StreamDeviceFramesCSVResponse) GetSize() isStreamDeviceFramesCSVResponse_Size {
	if m != nil {
		return m.Size
	}
	return nil
}

func (x *StreamDeviceFramesCSVResponse) GetCurrent() uint32 {
	if x, ok := x.GetSize().(*StreamDeviceFramesCSVResponse_Current); ok {
		return x.Current
	}
	return 0
}

func (x *StreamDeviceFramesCSVResponse) GetTotal() uint32 {
	if x, ok := x.GetSize().(*StreamDeviceFramesCSVResponse_Total); ok {
		return x.Total
	}
	return 0
}

func (m *StreamDeviceFramesCSVResponse) GetData() isStreamDeviceFramesCSVResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *StreamDeviceFramesCSVResponse) GetRows() uint32 {
	if x, ok := x.GetData().(*StreamDeviceFramesCSVResponse_Rows); ok {
		return x.Rows
	}
	return 0
}

func (x *StreamDeviceFramesCSVResponse) GetChunk() []byte {
	if x, ok := x.GetData().(*StreamDeviceFramesCSVResponse_Chunk); ok {
		return x.Chunk
	}
	return nil
}

type isStreamDeviceFramesCSVResponse_Size interface {
	isStreamDeviceFramesCSVResponse_Size()
}

type StreamDeviceFramesCSVResponse_Current struct {
	Current uint32 `protobuf:"varint,1,opt,name=current,proto3,oneof"`
}

type StreamDeviceFramesCSVResponse_Total struct {
	Total uint32 `protobuf:"varint,2,opt,name=total,proto3,oneof"`
}

func (*StreamDeviceFramesCSVResponse_Current) isStreamDeviceFramesCSVResponse_Size() {}

func (*StreamDeviceFramesCSVResponse_Total) isStreamDeviceFramesCSVResponse_Size() {}

type isStreamDeviceFramesCSVResponse_Data interface {
	isStreamDeviceFramesCSVResponse_Data()
}

type StreamDeviceFramesCSVResponse_Rows struct {
	Rows uint32 `protobuf:"varint,3,opt,name=rows,proto3,oneof"`
}

type StreamDeviceFramesCSVResponse_Chunk struct {
	Chunk []byte `protobuf:"bytes,4,opt,name=chunk,proto3,oneof"`
}

func (*StreamDeviceFramesCSVResponse_Rows) isStreamDeviceFramesCSVResponse_Data() {}

func (*StreamDeviceFramesCSVResponse_Chunk) isStreamDeviceFramesCSVResponse_Data() {}

type GetDeviceFramesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// you can specify offset (for pagination)
	Offset uint32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// you can specify rows limit
	Limit uint32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// You can specify start DateTime point. format RFC3339: 2006-01-02T15:04:05.000Z
	Start string `protobuf:"bytes,3,opt,name=start,proto3" json:"start,omitempty"`
	// You can specify end DateTime point. format RFC3339: 2006-01-02T15:04:05.000Z
	End string `protobuf:"bytes,4,opt,name=end,proto3" json:"end,omitempty"`
	// Additional sql filters (key,value): allowed lists of: direction,devEUI,mType,gw,devAddr
	Filters map[string]*ListOfString `protobuf:"bytes,5,rep,name=filters,proto3" json:"filters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// You can set the id to 0 if admin
	OrganizationId int64 `protobuf:"varint,6,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// here user sends his local timezone.
	Timezone string `protobuf:"bytes,7,opt,name=timezone,json=timeZone,proto3" json:"timezone,omitempty"`
	// for internal use. Will be ignored from external api.
	GwOnly bool `protobuf:"varint,8,opt,name=gw_only,json=gwOnly,proto3" json:"gw_only,omitempty"`
	// get total number of packets according to the filter except limit\offset. For pagination purposes
	GetTotal bool `protobuf:"varint,9,opt,name=get_total,json=getTotal,proto3" json:"get_total,omitempty"`
	// simple map of filters for csv GET request to pass as url parameter
	CsvFilters map[string]string `protobuf:"bytes,10,rep,name=csv_filters,json=csvFilters,proto3" json:"csv_filters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetDeviceFramesRequest) Reset() {
	*x = GetDeviceFramesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceFramesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceFramesRequest) ProtoMessage() {}

func (x *GetDeviceFramesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceFramesRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceFramesRequest) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{17}
}

func (x *GetDeviceFramesRequest) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetDeviceFramesRequest) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetDeviceFramesRequest) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *GetDeviceFramesRequest) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *GetDeviceFramesRequest) GetFilters() map[string]*ListOfString {
	if x != nil {
		return x.Filters
	}
	return nil
}

func (x *GetDeviceFramesRequest) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *GetDeviceFramesRequest) GetTimezone() string {
	if x != nil {
		return x.Timezone
	}
	return ""
}

func (x *GetDeviceFramesRequest) GetGwOnly() bool {
	if x != nil {
		return x.GwOnly
	}
	return false
}

func (x *GetDeviceFramesRequest) GetGetTotal() bool {
	if x != nil {
		return x.GetTotal
	}
	return false
}

func (x *GetDeviceFramesRequest) GetCsvFilters() map[string]string {
	if x != nil {
		return x.CsvFilters
	}
	return nil
}

type ListOfString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ListOfString) Reset() {
	*x = ListOfString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOfString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOfString) ProtoMessage() {}

func (x *ListOfString) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOfString.ProtoReflect.Descriptor instead.
func (*ListOfString) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{18}
}

func (x *ListOfString) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

type GetDeviceFramesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// total numner of selected rows
	ItemsTotal uint32 `protobuf:"varint,1,opt,name=items_total,json=itemsTotal,proto3" json:"items_total,omitempty"`
	// the array of selected device-frames logs
	Data []*DeviceFrameLog `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GetDeviceFramesResponse) Reset() {
	*x = GetDeviceFramesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceFramesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceFramesResponse) ProtoMessage() {}

func (x *GetDeviceFramesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceFramesResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceFramesResponse) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{19}
}

func (x *GetDeviceFramesResponse) GetItemsTotal() uint32 {
	if x != nil {
		return x.ItemsTotal
	}
	return 0
}

func (x *GetDeviceFramesResponse) GetData() []*DeviceFrameLog {
	if x != nil {
		return x.Data
	}
	return nil
}

type ExecCommandRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gateway ID (HEX encoded).
	GatewayId string `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	// command that will be executed on gateway (according to the gw config)
	Command string `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	// You can set timeout for the command execution. Default 30 seconds. Range 1-1000
	Timeout uint32 `protobuf:"varint,3,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Background task execution. If set true, the result will be saved in app-db.
	// Allows to get large amount of data from devices asynchronously.
	BackgroundTask bool `protobuf:"varint,4,opt,name=background_task,json=backgroundTask,proto3" json:"background_task,omitempty"`
}

func (x *ExecCommandRequest) Reset() {
	*x = ExecCommandRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecCommandRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecCommandRequest) ProtoMessage() {}

func (x *ExecCommandRequest) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecCommandRequest.ProtoReflect.Descriptor instead.
func (*ExecCommandRequest) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{20}
}

func (x *ExecCommandRequest) GetGatewayId() string {
	if x != nil {
		return x.GatewayId
	}
	return ""
}

func (x *ExecCommandRequest) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *ExecCommandRequest) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

func (x *ExecCommandRequest) GetBackgroundTask() bool {
	if x != nil {
		return x.BackgroundTask
	}
	return false
}

type GetFrameCountersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// format RFC3339: 2006-01-02T15:04:05.000Z
	Start string `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	// format RFC3339: 2006-01-02T15:04:05.000Z
	End string `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *GetFrameCountersRequest) Reset() {
	*x = GetFrameCountersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFrameCountersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFrameCountersRequest) ProtoMessage() {}

func (x *GetFrameCountersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFrameCountersRequest.ProtoReflect.Descriptor instead.
func (*GetFrameCountersRequest) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{21}
}

func (x *GetFrameCountersRequest) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *GetFrameCountersRequest) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

type GetFrameCountersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list counters with frame counters by type
	Counters []*FrameCounters `protobuf:"bytes,1,rep,name=counters,proto3" json:"counters,omitempty"`
}

func (x *GetFrameCountersResponse) Reset() {
	*x = GetFrameCountersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFrameCountersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFrameCountersResponse) ProtoMessage() {}

func (x *GetFrameCountersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFrameCountersResponse.ProtoReflect.Descriptor instead.
func (*GetFrameCountersResponse) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{22}
}

func (x *GetFrameCountersResponse) GetCounters() []*FrameCounters {
	if x != nil {
		return x.Counters
	}
	return nil
}

type GetFrameSpeedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// format RFC3339: 2006-01-02T15:04:05.000Z
	Start string `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	// format RFC3339: 2006-01-02T15:04:05.000Z
	End string `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *GetFrameSpeedRequest) Reset() {
	*x = GetFrameSpeedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFrameSpeedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFrameSpeedRequest) ProtoMessage() {}

func (x *GetFrameSpeedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFrameSpeedRequest.ProtoReflect.Descriptor instead.
func (*GetFrameSpeedRequest) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{23}
}

func (x *GetFrameSpeedRequest) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *GetFrameSpeedRequest) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

type GetFrameSpeedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list counters with frames speed
	Counters []*FrameSpeed `protobuf:"bytes,1,rep,name=counters,proto3" json:"counters,omitempty"`
}

func (x *GetFrameSpeedResponse) Reset() {
	*x = GetFrameSpeedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetFrameSpeedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFrameSpeedResponse) ProtoMessage() {}

func (x *GetFrameSpeedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFrameSpeedResponse.ProtoReflect.Descriptor instead.
func (*GetFrameSpeedResponse) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{24}
}

func (x *GetFrameSpeedResponse) GetCounters() []*FrameSpeed {
	if x != nil {
		return x.Counters
	}
	return nil
}

type GetDeviceCountersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id (number). If Zero - all organisations (allowed for admin)
	OrganizationId uint32 `protobuf:"varint,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// format RFC3339: 2006-01-02T15:04:05.000Z
	Start string `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	// format RFC3339: 2006-01-02T15:04:05.000Z
	End string `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
	// aggregation of the data: HOUR,DAY,WEEK,MONTH
	Aggregation string `protobuf:"bytes,4,opt,name=aggregation,proto3" json:"aggregation,omitempty"`
}

func (x *GetDeviceCountersRequest) Reset() {
	*x = GetDeviceCountersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceCountersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceCountersRequest) ProtoMessage() {}

func (x *GetDeviceCountersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceCountersRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceCountersRequest) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{25}
}

func (x *GetDeviceCountersRequest) GetOrganizationId() uint32 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *GetDeviceCountersRequest) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *GetDeviceCountersRequest) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *GetDeviceCountersRequest) GetAggregation() string {
	if x != nil {
		return x.Aggregation
	}
	return ""
}

type GetDeviceCountersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the organisation that handles the devices
	OrganizationId uint32            `protobuf:"varint,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Counters       []*DeviceCounters `protobuf:"bytes,2,rep,name=counters,proto3" json:"counters,omitempty"`
}

func (x *GetDeviceCountersResponse) Reset() {
	*x = GetDeviceCountersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceCountersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceCountersResponse) ProtoMessage() {}

func (x *GetDeviceCountersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceCountersResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceCountersResponse) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{26}
}

func (x *GetDeviceCountersResponse) GetOrganizationId() uint32 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *GetDeviceCountersResponse) GetCounters() []*DeviceCounters {
	if x != nil {
		return x.Counters
	}
	return nil
}

type GetGatewayCountersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id (number). If Zero - all organisations (allowed for admin)
	OrganizationId uint32 `protobuf:"varint,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// format RFC3339: 2006-01-02T15:04:05.000Z
	Start string `protobuf:"bytes,2,opt,name=start,proto3" json:"start,omitempty"`
	// format RFC3339: 2006-01-02T15:04:05.000Z
	End string `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
	// aggregation of the data: HOUR,DAY,WEEK,MONTH
	Aggregation string `protobuf:"bytes,4,opt,name=aggregation,proto3" json:"aggregation,omitempty"`
}

func (x *GetGatewayCountersRequest) Reset() {
	*x = GetGatewayCountersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGatewayCountersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGatewayCountersRequest) ProtoMessage() {}

func (x *GetGatewayCountersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGatewayCountersRequest.ProtoReflect.Descriptor instead.
func (*GetGatewayCountersRequest) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{27}
}

func (x *GetGatewayCountersRequest) GetOrganizationId() uint32 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *GetGatewayCountersRequest) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *GetGatewayCountersRequest) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

func (x *GetGatewayCountersRequest) GetAggregation() string {
	if x != nil {
		return x.Aggregation
	}
	return ""
}

type GetGatewayCountersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the organisation that handles the devices
	OrganizationId uint32 `protobuf:"varint,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// log of counters
	Counters []*DeviceCounters `protobuf:"bytes,2,rep,name=counters,proto3" json:"counters,omitempty"`
}

func (x *GetGatewayCountersResponse) Reset() {
	*x = GetGatewayCountersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGatewayCountersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGatewayCountersResponse) ProtoMessage() {}

func (x *GetGatewayCountersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGatewayCountersResponse.ProtoReflect.Descriptor instead.
func (*GetGatewayCountersResponse) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{28}
}

func (x *GetGatewayCountersResponse) GetOrganizationId() uint32 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *GetGatewayCountersResponse) GetCounters() []*DeviceCounters {
	if x != nil {
		return x.Counters
	}
	return nil
}

type GetVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ChirpStack Network Server version.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GetVersionResponse) Reset() {
	*x = GetVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionResponse) ProtoMessage() {}

func (x *GetVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionResponse.ProtoReflect.Descriptor instead.
func (*GetVersionResponse) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{29}
}

func (x *GetVersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// counters
type DeviceCounters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the organisation that handles the devices
	OrganizationId uint32 `protobuf:"varint,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// Created at unix timestamp.
	CreatedAt uint32 `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Active count.
	ActiveCount uint32 `protobuf:"varint,3,opt,name=active_count,json=activeCount,proto3" json:"active_count,omitempty"`
	// Inactive count.
	InactiveCount uint32 `protobuf:"varint,4,opt,name=inactive_count,json=inactiveCount,proto3" json:"inactive_count,omitempty"`
	// Never seen count.
	NeverSeenCount uint32 `protobuf:"varint,5,opt,name=never_seen_count,json=neverSeenCount,proto3" json:"never_seen_count,omitempty"`
}

func (x *DeviceCounters) Reset() {
	*x = DeviceCounters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceCounters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceCounters) ProtoMessage() {}

func (x *DeviceCounters) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceCounters.ProtoReflect.Descriptor instead.
func (*DeviceCounters) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{30}
}

func (x *DeviceCounters) GetOrganizationId() uint32 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *DeviceCounters) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *DeviceCounters) GetActiveCount() uint32 {
	if x != nil {
		return x.ActiveCount
	}
	return 0
}

func (x *DeviceCounters) GetInactiveCount() uint32 {
	if x != nil {
		return x.InactiveCount
	}
	return 0
}

func (x *DeviceCounters) GetNeverSeenCount() uint32 {
	if x != nil {
		return x.NeverSeenCount
	}
	return 0
}

type FrameCounters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Date: the metrics counted for.
	Date int64 `protobuf:"varint,1,opt,name=date,proto3" json:"date,omitempty"`
	// RxCnt: total recieved frames counted
	RxCnt uint32 `protobuf:"varint,2,opt,name=rx_cnt,json=rxCnt,proto3" json:"rx_cnt,omitempty"`
	// TxCnt: total transmitted frames counted
	TxCnt uint32 `protobuf:"varint,3,opt,name=tx_cnt,json=txCnt,proto3" json:"tx_cnt,omitempty"`
	// TotalCnt: both TxCnt and RxCnt counted
	TotalCnt uint32 `protobuf:"varint,4,opt,name=total_cnt,json=totalCnt,proto3" json:"total_cnt,omitempty"`
	// UnknownType:
	UnknownType uint32 `protobuf:"varint,5,opt,name=unknown_type,json=unknownType,proto3" json:"unknown_type,omitempty"`
	// JoinRequest
	JoinRequest uint32 `protobuf:"varint,6,opt,name=join_request,json=joinRequest,proto3" json:"join_request,omitempty"`
	// RejoinRequest
	RejoinRequest uint32 `protobuf:"varint,7,opt,name=rejoin_request,json=rejoinRequest,proto3" json:"rejoin_request,omitempty"`
	// JoinAccept
	JoinAccept uint32 `protobuf:"varint,8,opt,name=join_accept,json=joinAccept,proto3" json:"join_accept,omitempty"`
	// UnconfirmedDataUp
	UnconfirmedDataUp uint32 `protobuf:"varint,9,opt,name=unconfirmed_data_up,json=unconfirmedDataUp,proto3" json:"unconfirmed_data_up,omitempty"`
	// UnconfirmedDataDown
	UnconfirmedDataDown uint32 `protobuf:"varint,10,opt,name=unconfirmed_data_down,json=unconfirmedDataDown,proto3" json:"unconfirmed_data_down,omitempty"`
	// ConfirmedDataUp
	ConfirmedDataUp uint32 `protobuf:"varint,11,opt,name=confirmed_data_up,json=confirmedDataUp,proto3" json:"confirmed_data_up,omitempty"`
	// ConfirmedDataDown
	ConfirmedDataDown uint32 `protobuf:"varint,12,opt,name=confirmed_data_down,json=confirmedDataDown,proto3" json:"confirmed_data_down,omitempty"`
	// Proprietary
	Proprietary uint32 `protobuf:"varint,13,opt,name=proprietary,proto3" json:"proprietary,omitempty"`
}

func (x *FrameCounters) Reset() {
	*x = FrameCounters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameCounters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameCounters) ProtoMessage() {}

func (x *FrameCounters) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameCounters.ProtoReflect.Descriptor instead.
func (*FrameCounters) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{31}
}

func (x *FrameCounters) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *FrameCounters) GetRxCnt() uint32 {
	if x != nil {
		return x.RxCnt
	}
	return 0
}

func (x *FrameCounters) GetTxCnt() uint32 {
	if x != nil {
		return x.TxCnt
	}
	return 0
}

func (x *FrameCounters) GetTotalCnt() uint32 {
	if x != nil {
		return x.TotalCnt
	}
	return 0
}

func (x *FrameCounters) GetUnknownType() uint32 {
	if x != nil {
		return x.UnknownType
	}
	return 0
}

func (x *FrameCounters) GetJoinRequest() uint32 {
	if x != nil {
		return x.JoinRequest
	}
	return 0
}

func (x *FrameCounters) GetRejoinRequest() uint32 {
	if x != nil {
		return x.RejoinRequest
	}
	return 0
}

func (x *FrameCounters) GetJoinAccept() uint32 {
	if x != nil {
		return x.JoinAccept
	}
	return 0
}

func (x *FrameCounters) GetUnconfirmedDataUp() uint32 {
	if x != nil {
		return x.UnconfirmedDataUp
	}
	return 0
}

func (x *FrameCounters) GetUnconfirmedDataDown() uint32 {
	if x != nil {
		return x.UnconfirmedDataDown
	}
	return 0
}

func (x *FrameCounters) GetConfirmedDataUp() uint32 {
	if x != nil {
		return x.ConfirmedDataUp
	}
	return 0
}

func (x *FrameCounters) GetConfirmedDataDown() uint32 {
	if x != nil {
		return x.ConfirmedDataDown
	}
	return 0
}

func (x *FrameCounters) GetProprietary() uint32 {
	if x != nil {
		return x.Proprietary
	}
	return 0
}

type FrameSpeed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// T: Created at timestamp (unix)
	T int64 `protobuf:"varint,1,opt,name=t,proto3" json:"t,omitempty"`
	// Y: TotalCnt: both TxCnt and RxCnt frames counted for the amount of time
	Y uint32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *FrameSpeed) Reset() {
	*x = FrameSpeed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrameSpeed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrameSpeed) ProtoMessage() {}

func (x *FrameSpeed) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrameSpeed.ProtoReflect.Descriptor instead.
func (*FrameSpeed) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{32}
}

func (x *FrameSpeed) GetT() int64 {
	if x != nil {
		return x.T
	}
	return 0
}

func (x *FrameSpeed) GetY() uint32 {
	if x != nil {
		return x.Y
	}
	return 0
}

// for storage
type DeviceFrameLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RX (uplink -recieved from devices) or TX (downlink - transmitted from NS)
	Direction string `protobuf:"bytes,1,opt,name=direction,proto3" json:"direction,omitempty"`
	DateTime  string `protobuf:"bytes,2,opt,name=date_time,json=dateTime,proto3" json:"date_time,omitempty"`
	Date      string `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	MType     string `protobuf:"bytes,4,opt,name=mType,proto3" json:"mType,omitempty"`
	DevAddr   string `protobuf:"bytes,5,opt,name=dev_addr,json=devAddr,proto3" json:"dev_addr,omitempty"`
	DevEUI    string `protobuf:"bytes,6,opt,name=devEUI,proto3" json:"devEUI,omitempty"`
	// params from base station with best SNR
	RxRssi    int32   `protobuf:"varint,7,opt,name=rxRssi,proto3" json:"rxRssi,omitempty"`
	RxSnr     float64 `protobuf:"fixed64,8,opt,name=rx_snr,json=rxSnr,proto3" json:"rx_snr,omitempty"`
	RxChannel uint32  `protobuf:"varint,9,opt,name=rx_channel,json=rxChannel,proto3" json:"rx_channel,omitempty"`
	RxRfChain uint32  `protobuf:"varint,10,opt,name=rx_rf_chain,json=rxRfChain,proto3" json:"rx_rf_chain,omitempty"`
	// id of base station with best SNR
	Gw string `protobuf:"bytes,11,opt,name=gw,proto3" json:"gw,omitempty"`
	// json-string
	TxInfo string `protobuf:"bytes,12,opt,name=tx_info,json=txInfo,proto3" json:"tx_info,omitempty"`
	// RXInfo an array with info from BS recieved the frame
	RxInfo []*RXInfo `protobuf:"bytes,13,rep,name=rx_info,json=rxInfo,proto3" json:"rx_info,omitempty"`
	// json-string with LORA payload
	PhyPayloadJSON string  `protobuf:"bytes,14,opt,name=phy_payloadJSON,json=PhyPayloadJson,proto3" json:"phy_payloadJSON,omitempty"`
	Airtime        float64 `protobuf:"fixed64,15,opt,name=airtime,proto3" json:"airtime,omitempty"`
	Esp            float64 `protobuf:"fixed64,16,opt,name=esp,proto3" json:"esp,omitempty"`
	Late           uint32  `protobuf:"varint,17,opt,name=late,proto3" json:"late,omitempty"`
	FrmPayload     string  `protobuf:"bytes,18,opt,name=frm_payload,json=frmPayload,proto3" json:"frm_payload,omitempty"`
	// data from device-session
	FCntUp    uint32 `protobuf:"varint,19,opt,name=FCntUp,proto3" json:"FCntUp,omitempty"`
	NFCntDown uint32 `protobuf:"varint,20,opt,name=NFCntDown,proto3" json:"NFCntDown,omitempty"`
	AFCntDown uint32 `protobuf:"varint,21,opt,name=AFCntDown,proto3" json:"AFCntDown,omitempty"`
	ConfFCnt  uint32 `protobuf:"varint,22,opt,name=ConfFCnt,proto3" json:"ConfFCnt,omitempty"`
	// spreading factor (TxInfo)
	SpFact uint32 `protobuf:"varint,23,opt,name=sp_fact,json=spFact,proto3" json:"sp_fact,omitempty"`
	// billing limit: "" - within range limit, "M" - marked as overlimit, "D" - droped because of overlimit
	Limit string `protobuf:"bytes,24,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *DeviceFrameLog) Reset() {
	*x = DeviceFrameLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceFrameLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceFrameLog) ProtoMessage() {}

func (x *DeviceFrameLog) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceFrameLog.ProtoReflect.Descriptor instead.
func (*DeviceFrameLog) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{33}
}

func (x *DeviceFrameLog) GetDirection() string {
	if x != nil {
		return x.Direction
	}
	return ""
}

func (x *DeviceFrameLog) GetDateTime() string {
	if x != nil {
		return x.DateTime
	}
	return ""
}

func (x *DeviceFrameLog) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *DeviceFrameLog) GetMType() string {
	if x != nil {
		return x.MType
	}
	return ""
}

func (x *DeviceFrameLog) GetDevAddr() string {
	if x != nil {
		return x.DevAddr
	}
	return ""
}

func (x *DeviceFrameLog) GetDevEUI() string {
	if x != nil {
		return x.DevEUI
	}
	return ""
}

func (x *DeviceFrameLog) GetRxRssi() int32 {
	if x != nil {
		return x.RxRssi
	}
	return 0
}

func (x *DeviceFrameLog) GetRxSnr() float64 {
	if x != nil {
		return x.RxSnr
	}
	return 0
}

func (x *DeviceFrameLog) GetRxChannel() uint32 {
	if x != nil {
		return x.RxChannel
	}
	return 0
}

func (x *DeviceFrameLog) GetRxRfChain() uint32 {
	if x != nil {
		return x.RxRfChain
	}
	return 0
}

func (x *DeviceFrameLog) GetGw() string {
	if x != nil {
		return x.Gw
	}
	return ""
}

func (x *DeviceFrameLog) GetTxInfo() string {
	if x != nil {
		return x.TxInfo
	}
	return ""
}

func (x *DeviceFrameLog) GetRxInfo() []*RXInfo {
	if x != nil {
		return x.RxInfo
	}
	return nil
}

func (x *DeviceFrameLog) GetPhyPayloadJSON() string {
	if x != nil {
		return x.PhyPayloadJSON
	}
	return ""
}

func (x *DeviceFrameLog) GetAirtime() float64 {
	if x != nil {
		return x.Airtime
	}
	return 0
}

func (x *DeviceFrameLog) GetEsp() float64 {
	if x != nil {
		return x.Esp
	}
	return 0
}

func (x *DeviceFrameLog) GetLate() uint32 {
	if x != nil {
		return x.Late
	}
	return 0
}

func (x *DeviceFrameLog) GetFrmPayload() string {
	if x != nil {
		return x.FrmPayload
	}
	return ""
}

func (x *DeviceFrameLog) GetFCntUp() uint32 {
	if x != nil {
		return x.FCntUp
	}
	return 0
}

func (x *DeviceFrameLog) GetNFCntDown() uint32 {
	if x != nil {
		return x.NFCntDown
	}
	return 0
}

func (x *DeviceFrameLog) GetAFCntDown() uint32 {
	if x != nil {
		return x.AFCntDown
	}
	return 0
}

func (x *DeviceFrameLog) GetConfFCnt() uint32 {
	if x != nil {
		return x.ConfFCnt
	}
	return 0
}

func (x *DeviceFrameLog) GetSpFact() uint32 {
	if x != nil {
		return x.SpFact
	}
	return 0
}

func (x *DeviceFrameLog) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

// for RXInfo item in uplink frames
type RXInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// GatewayID
	GatewayID         string               `protobuf:"bytes,1,opt,name=GatewayID,json=gateway_id,proto3" json:"GatewayID,omitempty"`
	Rssi              int32                `protobuf:"varint,2,opt,name=Rssi,json=rssi,proto3" json:"Rssi,omitempty"`
	LoraSnr           float64              `protobuf:"fixed64,3,opt,name=LoraSnr,json=lora_snr,proto3" json:"LoraSnr,omitempty"`
	Channel           uint32               `protobuf:"varint,4,opt,name=Channel,json=channel,proto3" json:"Channel,omitempty"`
	RfChain           uint32               `protobuf:"varint,5,opt,name=RfChain,json=rf_chain,proto3" json:"RfChain,omitempty"`
	Board             uint32               `protobuf:"varint,6,opt,name=Board,json=board,proto3" json:"Board,omitempty"`
	Antenna           uint32               `protobuf:"varint,7,opt,name=Antenna,json=antenna,proto3" json:"Antenna,omitempty"`
	Location          *common.Location     `protobuf:"bytes,8,opt,name=Location,json=location,proto3" json:"Location,omitempty"`
	FineTimestampType gw.FineTimestampType `protobuf:"varint,9,opt,name=FineTimestampType,proto3,enum=gw.FineTimestampType" json:"FineTimestampType,omitempty"`
	GpsTimestamp      string               `protobuf:"bytes,10,opt,name=GpsTimestamp,json=gps_timestamp,proto3" json:"GpsTimestamp,omitempty"`
	FineTimestamp     string               `protobuf:"bytes,11,opt,name=FineTimestamp,json=fine_timestamp,proto3" json:"FineTimestamp,omitempty"`
	Context           string               `protobuf:"bytes,12,opt,name=Context,json=context,proto3" json:"Context,omitempty"`
	// Unique and random ID which can be used to correlate the uplink across multiple logs.
	UplinkID string `protobuf:"bytes,13,opt,name=UplinkID,json=uplink_id,proto3" json:"UplinkID,omitempty"`
}

func (x *RXInfo) Reset() {
	*x = RXInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RXInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RXInfo) ProtoMessage() {}

func (x *RXInfo) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RXInfo.ProtoReflect.Descriptor instead.
func (*RXInfo) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{34}
}

func (x *RXInfo) GetGatewayID() string {
	if x != nil {
		return x.GatewayID
	}
	return ""
}

func (x *RXInfo) GetRssi() int32 {
	if x != nil {
		return x.Rssi
	}
	return 0
}

func (x *RXInfo) GetLoraSnr() float64 {
	if x != nil {
		return x.LoraSnr
	}
	return 0
}

func (x *RXInfo) GetChannel() uint32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *RXInfo) GetRfChain() uint32 {
	if x != nil {
		return x.RfChain
	}
	return 0
}

func (x *RXInfo) GetBoard() uint32 {
	if x != nil {
		return x.Board
	}
	return 0
}

func (x *RXInfo) GetAntenna() uint32 {
	if x != nil {
		return x.Antenna
	}
	return 0
}

func (x *RXInfo) GetLocation() *common.Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *RXInfo) GetFineTimestampType() gw.FineTimestampType {
	if x != nil {
		return x.FineTimestampType
	}
	return gw.FineTimestampType(0)
}

func (x *RXInfo) GetGpsTimestamp() string {
	if x != nil {
		return x.GpsTimestamp
	}
	return ""
}

func (x *RXInfo) GetFineTimestamp() string {
	if x != nil {
		return x.FineTimestamp
	}
	return ""
}

func (x *RXInfo) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *RXInfo) GetUplinkID() string {
	if x != nil {
		return x.UplinkID
	}
	return ""
}

type GetGwStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gateway ID (HEX encoded).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetGwStatsRequest) Reset() {
	*x = GetGwStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGwStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGwStatsRequest) ProtoMessage() {}

func (x *GetGwStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGwStatsRequest.ProtoReflect.Descriptor instead.
func (*GetGwStatsRequest) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{35}
}

func (x *GetGwStatsRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetGwStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// last hour radio availability %
	RadioHour float32 `protobuf:"fixed32,1,opt,name=radio_hour,json=radioHour,proto3" json:"radio_hour,omitempty"`
	// last day radio availability %
	RadioDay float32 `protobuf:"fixed32,2,opt,name=radio_day,json=radioDay,proto3" json:"radio_day,omitempty"`
	// last month radio availability %
	RadioMonth float32 `protobuf:"fixed32,3,opt,name=radio_month,json=radioMonth,proto3" json:"radio_month,omitempty"`
}

func (x *GetGwStatsResponse) Reset() {
	*x = GetGwStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGwStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGwStatsResponse) ProtoMessage() {}

func (x *GetGwStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGwStatsResponse.ProtoReflect.Descriptor instead.
func (*GetGwStatsResponse) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{36}
}

func (x *GetGwStatsResponse) GetRadioHour() float32 {
	if x != nil {
		return x.RadioHour
	}
	return 0
}

func (x *GetGwStatsResponse) GetRadioDay() float32 {
	if x != nil {
		return x.RadioDay
	}
	return 0
}

func (x *GetGwStatsResponse) GetRadioMonth() float32 {
	if x != nil {
		return x.RadioMonth
	}
	return 0
}

type CountDeviceFramesPerDevEuiRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of rhe organnization
	OrganizationId uint32 `protobuf:"varint,1,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	// list of dev_eui (hex strings)
	Devices []string `protobuf:"bytes,2,rep,name=devices,proto3" json:"devices,omitempty"`
	// format RFC3339: 2006-01-02T15:04:05.000Z
	Start string `protobuf:"bytes,3,opt,name=start,proto3" json:"start,omitempty"`
	// format RFC3339: 2006-01-02T15:04:05.000Z
	End string `protobuf:"bytes,4,opt,name=end,proto3" json:"end,omitempty"`
}

func (x *CountDeviceFramesPerDevEuiRequest) Reset() {
	*x = CountDeviceFramesPerDevEuiRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountDeviceFramesPerDevEuiRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountDeviceFramesPerDevEuiRequest) ProtoMessage() {}

func (x *CountDeviceFramesPerDevEuiRequest) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountDeviceFramesPerDevEuiRequest.ProtoReflect.Descriptor instead.
func (*CountDeviceFramesPerDevEuiRequest) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{37}
}

func (x *CountDeviceFramesPerDevEuiRequest) GetOrganizationId() uint32 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *CountDeviceFramesPerDevEuiRequest) GetDevices() []string {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *CountDeviceFramesPerDevEuiRequest) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *CountDeviceFramesPerDevEuiRequest) GetEnd() string {
	if x != nil {
		return x.End
	}
	return ""
}

type CountDeviceFramesPerDevEuiResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*PerDeviceFramesCounters `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *CountDeviceFramesPerDevEuiResponse) Reset() {
	*x = CountDeviceFramesPerDevEuiResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountDeviceFramesPerDevEuiResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountDeviceFramesPerDevEuiResponse) ProtoMessage() {}

func (x *CountDeviceFramesPerDevEuiResponse) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountDeviceFramesPerDevEuiResponse.ProtoReflect.Descriptor instead.
func (*CountDeviceFramesPerDevEuiResponse) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{38}
}

func (x *CountDeviceFramesPerDevEuiResponse) GetResult() []*PerDeviceFramesCounters {
	if x != nil {
		return x.Result
	}
	return nil
}

type PerDeviceFramesCounters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DevEui     string `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	JoinReqCnt uint32 `protobuf:"varint,2,opt,name=join_req_cnt,json=joinReqCnt,proto3" json:"join_req_cnt,omitempty"`
	UlCnt      uint32 `protobuf:"varint,3,opt,name=ul_cnt,json=ulCnt,proto3" json:"ul_cnt,omitempty"`
	DlCnt      uint32 `protobuf:"varint,4,opt,name=dl_cnt,json=dlCnt,proto3" json:"dl_cnt,omitempty"`
}

func (x *PerDeviceFramesCounters) Reset() {
	*x = PerDeviceFramesCounters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_handyrusty_hr_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerDeviceFramesCounters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerDeviceFramesCounters) ProtoMessage() {}

func (x *PerDeviceFramesCounters) ProtoReflect() protoreflect.Message {
	mi := &file_handyrusty_hr_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerDeviceFramesCounters.ProtoReflect.Descriptor instead.
func (*PerDeviceFramesCounters) Descriptor() ([]byte, []int) {
	return file_handyrusty_hr_proto_rawDescGZIP(), []int{39}
}

func (x *PerDeviceFramesCounters) GetDevEui() string {
	if x != nil {
		return x.DevEui
	}
	return ""
}

func (x *PerDeviceFramesCounters) GetJoinReqCnt() uint32 {
	if x != nil {
		return x.JoinReqCnt
	}
	return 0
}

func (x *PerDeviceFramesCounters) GetUlCnt() uint32 {
	if x != nil {
		return x.UlCnt
	}
	return 0
}

func (x *PerDeviceFramesCounters) GetDlCnt() uint32 {
	if x != nil {
		return x.DlCnt
	}
	return 0
}

var File_handyrusty_hr_proto protoreflect.FileDescriptor

var file_handyrusty_hr_proto_rawDesc = []byte{
	0x0a, 0x13, 0x68, 0x61, 0x6e, 0x64, 0x79, 0x72, 0x75, 0x73, 0x74, 0x79, 0x2f, 0x68, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x68, 0x72, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x67, 0x77,
	0x2f, 0x67, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3c, 0x0a, 0x1f, 0x47, 0x65, 0x74,
	0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x64, 0x65, 0x76, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x65, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xa0, 0x01, 0x0a, 0x15, 0x41, 0x76, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x75, 0x69, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65,
	0x72, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x70, 0x65, 0x72,
	0x41, 0x76, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43,
	0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x6e, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x6e, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x73, 0x73, 0x69, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x72, 0x73, 0x73, 0x69, 0x4c, 0x61, 0x73, 0x74, 0x22, 0x55, 0x0a, 0x20, 0x47, 0x65,
	0x74, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x68, 0x72, 0x2e, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x22, 0x30, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65,
	0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76,
	0x45, 0x75, 0x69, 0x22, 0xc7, 0x03, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x65, 0x73, 0x70, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x65, 0x73, 0x70, 0x41, 0x76, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x6e, 0x72, 0x5f, 0x61, 0x76,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x73, 0x6e, 0x72, 0x41, 0x76, 0x67, 0x12,
	0x19, 0x0a, 0x08, 0x72, 0x73, 0x73, 0x69, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x07, 0x72, 0x73, 0x73, 0x69, 0x41, 0x76, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x65,
	0x72, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x70, 0x65, 0x72,
	0x41, 0x76, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x73, 0x70, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x65, 0x73, 0x70, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x6e, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x73, 0x6e, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x73, 0x73,
	0x69, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x73,
	0x73, 0x69, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x66, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x66, 0x4c, 0x61, 0x73, 0x74, 0x12,
	0x33, 0x0a, 0x07, 0x72, 0x78, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x72, 0x78,
	0x4c, 0x61, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x06, 0x74, 0x78, 0x4c, 0x61, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x6a, 0x6f, 0x69,
	0x6e, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x4c, 0x61,
	0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x70, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x22, 0xd0, 0x01,
	0x0a, 0x0b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x78, 0x5f, 0x63,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x78, 0x43, 0x6e, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x74, 0x78, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x74, 0x78, 0x43, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x03, 0x70, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x73, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73,
	0x73, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x72, 0x73, 0x73, 0x69, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x6e, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x73, 0x6e, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x73, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x73, 0x66,
	0x22, 0x4b, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x77, 0x6f, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x68, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0x7a, 0x0a,
	0x0a, 0x4c, 0x6f, 0x67, 0x73, 0x47, 0x77, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x44, 0x22, 0x9e, 0x02, 0x0a, 0x12, 0x4c, 0x6f,
	0x67, 0x73, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x27,
	0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x77, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x77, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x5e, 0x0a, 0x13, 0x4c, 0x6f,
	0x67, 0x73, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x68, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x47, 0x77, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xcc, 0x02, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x75, 0x69, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x13, 0x0a, 0x05, 0x69, 0x73, 0x5f, 0x6f, 0x6b, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x69, 0x73, 0x4f, 0x6b, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x03, 0x65,
	0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x6e, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0a, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x72,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x84, 0x02, 0x0a, 0x10, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x27,
	0x0a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65,
	0x75, 0x69, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x55, 0x49,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0xa1, 0x01, 0x0a, 0x1c, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x72, 0x2e, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x42, 0x0a, 0x1d, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x6e, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x77, 0x6c, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x6c, 0x4c,
	0x61, 0x73, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x77, 0x6c, 0x5f,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x78,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x77, 0x6c, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x78, 0x22, 0x91, 0x01, 0x0a, 0x1d, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x43,
	0x53, 0x56, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x07, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x07, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x14,
	0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x04,
	0x72, 0x6f, 0x77, 0x73, 0x12, 0x16, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x01, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x42, 0x06, 0x0a, 0x04,
	0x73, 0x69, 0x7a, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x86, 0x04, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x41, 0x0a,
	0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x68, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x69, 0x6d,
	0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x77, 0x5f, 0x6f, 0x6e, 0x6c, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x67, 0x77, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1b,
	0x0a, 0x09, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x67, 0x65, 0x74, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x4b, 0x0a, 0x0b, 0x63,
	0x73, 0x76, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x68, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x73, 0x76,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x73,
	0x76, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x4c, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x68, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x43, 0x73, 0x76, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x26, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x66, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x62, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x72, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0x90, 0x01, 0x0a, 0x12, 0x45, 0x78, 0x65, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x67, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x62,
	0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x62, 0x61, 0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x54, 0x61, 0x73, 0x6b, 0x22, 0x41, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x49, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x68, 0x72, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x73, 0x22, 0x3e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65,
	0x6e, 0x64, 0x22, 0x43, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x68, 0x72, 0x2e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x08, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x74, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x68, 0x72, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x22, 0x8e, 0x01,
	0x0a, 0x19, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x75,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x68, 0x72, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x73, 0x22, 0x2e, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xcc, 0x01, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x6e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65,
	0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x53, 0x65, 0x65, 0x6e, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0xde, 0x03, 0x0a, 0x0d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x78,
	0x5f, 0x63, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x78, 0x43, 0x6e,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x78, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x74, 0x78, 0x43, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x43, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6a, 0x6f, 0x69, 0x6e,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b,
	0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72,
	0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x72, 0x65, 0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x55, 0x70, 0x12, 0x32, 0x0a, 0x15, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x13, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x75, 0x70, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x44, 0x61, 0x74,
	0x61, 0x55, 0x70, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x44, 0x61, 0x74, 0x61, 0x44,
	0x6f, 0x77, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x65, 0x74, 0x61,
	0x72, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x72, 0x69,
	0x65, 0x74, 0x61, 0x72, 0x79, 0x22, 0x28, 0x0a, 0x0a, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01,
	0x74, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x01, 0x79, 0x22,
	0x8d, 0x05, 0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4c,
	0x6f, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x76, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x45, 0x55, 0x49, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x55, 0x49, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x78,
	0x52, 0x73, 0x73, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x78, 0x52, 0x73,
	0x73, 0x69, 0x12, 0x15, 0x0a, 0x06, 0x72, 0x78, 0x5f, 0x73, 0x6e, 0x72, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x05, 0x72, 0x78, 0x53, 0x6e, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x78, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72,
	0x78, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x78, 0x5f, 0x72,
	0x66, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x72,
	0x78, 0x52, 0x66, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x77, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x67, 0x77, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x78, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x23, 0x0a, 0x07, 0x72, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x68, 0x72, 0x2e, 0x52, 0x58, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06,
	0x72, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x68, 0x79, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4a, 0x53, 0x4f, 0x4e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x50, 0x68, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4a, 0x73, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x69, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x61, 0x69, 0x72, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x73, 0x70,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6c, 0x61, 0x74, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6d, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6d, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x46, 0x43, 0x6e, 0x74, 0x55, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x46, 0x43, 0x6e, 0x74, 0x55, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x46, 0x43, 0x6e,
	0x74, 0x44, 0x6f, 0x77, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x4e, 0x46, 0x43,
	0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x46, 0x43, 0x6e, 0x74, 0x44,
	0x6f, 0x77, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x41, 0x46, 0x43, 0x6e, 0x74,
	0x44, 0x6f, 0x77, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x66, 0x46, 0x43, 0x6e, 0x74,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x66, 0x46, 0x43, 0x6e, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x73, 0x70, 0x46, 0x61, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0xb1, 0x03, 0x0a, 0x06, 0x52, 0x58, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x0a, 0x09, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x73, 0x73,
	0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x73, 0x73, 0x69, 0x12, 0x19, 0x0a,
	0x07, 0x4c, 0x6f, 0x72, 0x61, 0x53, 0x6e, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x6c, 0x6f, 0x72, 0x61, 0x5f, 0x73, 0x6e, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x19, 0x0a, 0x07, 0x52, 0x66, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x66, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x62, 0x6f,
	0x61, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x6e, 0x74, 0x65, 0x6e, 0x6e, 0x61, 0x12, 0x2c, 0x0a,
	0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x11, 0x46,
	0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x67, 0x77, 0x2e, 0x46, 0x69, 0x6e, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x11, 0x46,
	0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0c, 0x47, 0x70, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x70, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x25, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x69,
	0x6e, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1b, 0x0a, 0x08, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b,
	0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x69, 0x64, 0x22, 0x23, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x47, 0x77, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x71, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x47,
	0x77, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x09, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x48, 0x6f, 0x75, 0x72, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x5f, 0x64, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x44, 0x61, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61,
	0x64, 0x69, 0x6f, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0a, 0x72, 0x61, 0x64, 0x69, 0x6f, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x22, 0x8e, 0x01, 0x0a, 0x21,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x50, 0x65, 0x72, 0x44, 0x65, 0x76, 0x45, 0x75, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61,
	0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0x59, 0x0a, 0x22,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x50, 0x65, 0x72, 0x44, 0x65, 0x76, 0x45, 0x75, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x72, 0x2e, 0x50, 0x65, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x17, 0x50, 0x65, 0x72, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x75, 0x69, 0x12, 0x20, 0x0a, 0x0c,
	0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x6a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x43, 0x6e, 0x74, 0x12, 0x15,
	0x0a, 0x06, 0x75, 0x6c, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x75, 0x6c, 0x43, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x6c, 0x5f, 0x63, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x6c, 0x43, 0x6e, 0x74, 0x32, 0x8d, 0x0c, 0x0a,
	0x11, 0x48, 0x61, 0x6e, 0x64, 0x79, 0x52, 0x75, 0x73, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x68, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x52, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x2e, 0x68, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x68, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1d, 0x2e, 0x68,
	0x72, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x68, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a,
	0x10, 0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x1b, 0x2e, 0x68, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x68, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12,
	0x18, 0x2e, 0x68, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x68, 0x72, 0x2e, 0x47,
	0x65, 0x74, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0b, 0x45, 0x78, 0x65, 0x63, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x16, 0x2e, 0x68, 0x72, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x67, 0x77, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x45, 0x78, 0x65, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x4c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x1a, 0x2e, 0x68, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b,
	0x2e, 0x68, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a,
	0x15, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x73, 0x43, 0x53, 0x56, 0x12, 0x1a, 0x2e, 0x68, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x68, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x43, 0x53, 0x56, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x0f, 0x47, 0x65, 0x74,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x68, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x17, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x20,
	0x2e, 0x68, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x68, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x20,
	0x2e, 0x68, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x68, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x16, 0x2e, 0x68, 0x72, 0x2e, 0x4c, 0x6f, 0x67,
	0x73, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x68, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x73, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x47, 0x77, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x15, 0x2e, 0x68, 0x72, 0x2e, 0x47, 0x65,
	0x74, 0x47, 0x77, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x68, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x77, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x19, 0x2e, 0x68, 0x72,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x68, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x61, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x77, 0x6f, 0x77, 0x65, 0x65,
	0x6b, 0x73, 0x12, 0x19, 0x2e, 0x68, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x68, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x77, 0x6f, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4c, 0x61, 0x73, 0x74, 0x54, 0x77, 0x6f,
	0x77, 0x65, 0x65, 0x6b, 0x73, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x19, 0x2e, 0x68, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x68, 0x72, 0x2e,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x4c, 0x61,
	0x73, 0x74, 0x54, 0x77, 0x6f, 0x77, 0x65, 0x65, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x67, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x76, 0x65, 0x72, 0x61,
	0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x23, 0x2e, 0x68, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x65, 0x72, 0x61, 0x67, 0x65,
	0x73, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x68, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76,
	0x65, 0x72, 0x61, 0x67, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6d, 0x0a,
	0x1a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x50, 0x65, 0x72, 0x44, 0x65, 0x76, 0x45, 0x75, 0x69, 0x12, 0x25, 0x2e, 0x68, 0x72,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x50, 0x65, 0x72, 0x44, 0x65, 0x76, 0x45, 0x75, 0x69, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x26, 0x2e, 0x68, 0x72, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x50, 0x65, 0x72, 0x44, 0x65, 0x76, 0x45,
	0x75, 0x69, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x6d, 0x0a, 0x06,
	0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x72, 0x42, 0x07, 0x48, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x32, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x72,
	0x6f, 0x63, 0x61, 0x61, 0x72, 0x2f, 0x63, 0x68, 0x69, 0x72, 0x70, 0x73, 0x74, 0x61, 0x63, 0x6b,
	0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x76, 0x33, 0x2f, 0x68, 0x61, 0x6e, 0x64, 0x79,
	0x72, 0x75, 0x73, 0x74, 0x79, 0xa2, 0x02, 0x03, 0x48, 0x58, 0x58, 0xaa, 0x02, 0x02, 0x48, 0x72,
	0xca, 0x02, 0x02, 0x48, 0x72, 0xe2, 0x02, 0x0e, 0x48, 0x72, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x02, 0x48, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_handyrusty_hr_proto_rawDescOnce sync.Once
	file_handyrusty_hr_proto_rawDescData = file_handyrusty_hr_proto_rawDesc
)

func file_handyrusty_hr_proto_rawDescGZIP() []byte {
	file_handyrusty_hr_proto_rawDescOnce.Do(func() {
		file_handyrusty_hr_proto_rawDescData = protoimpl.X.CompressGZIP(file_handyrusty_hr_proto_rawDescData)
	})
	return file_handyrusty_hr_proto_rawDescData
}

var file_handyrusty_hr_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_handyrusty_hr_proto_goTypes = []interface{}{
	(*GetAveragesForDeviceListRequest)(nil),    // 0: hr.GetAveragesForDeviceListRequest
	(*AveragesForDeviceList)(nil),              // 1: hr.AveragesForDeviceList
	(*GetAveragesForDeviceListResponse)(nil),   // 2: hr.GetAveragesForDeviceListResponse
	(*GetDeviceStatsRequest)(nil),              // 3: hr.GetDeviceStatsRequest
	(*GetDeviceStatsResponse)(nil),             // 4: hr.GetDeviceStatsResponse
	(*DeviceStats)(nil),                        // 5: hr.DeviceStats
	(*GetDeviceStatsLastTwoweeksResponse)(nil), // 6: hr.GetDeviceStatsLastTwoweeksResponse
	(*LogsGwItem)(nil),                         // 7: hr.LogsGwItem
	(*LogsGatewayRequest)(nil),                 // 8: hr.LogsGatewayRequest
	(*LogsGatewayResponse)(nil),                // 9: hr.LogsGatewayResponse
	(*GetIntegrationRepliesRequest)(nil),       // 10: hr.GetIntegrationRepliesRequest
	(*GetIntegrationRepliesResponse)(nil),      // 11: hr.GetIntegrationRepliesResponse
	(*IntegrationReply)(nil),                   // 12: hr.IntegrationReply
	(*StoreIntegrationReplyRequest)(nil),       // 13: hr.StoreIntegrationReplyRequest
	(*StoreIntegrationReplyResponse)(nil),      // 14: hr.StoreIntegrationReplyResponse
	(*GetCurrentStateResponse)(nil),            // 15: hr.GetCurrentStateResponse
	(*StreamDeviceFramesCSVResponse)(nil),      // 16: hr.StreamDeviceFramesCSVResponse
	(*GetDeviceFramesRequest)(nil),             // 17: hr.GetDeviceFramesRequest
	(*ListOfString)(nil),                       // 18: hr.ListOfString
	(*GetDeviceFramesResponse)(nil),            // 19: hr.GetDeviceFramesResponse
	(*ExecCommandRequest)(nil),                 // 20: hr.ExecCommandRequest
	(*GetFrameCountersRequest)(nil),            // 21: hr.GetFrameCountersRequest
	(*GetFrameCountersResponse)(nil),           // 22: hr.GetFrameCountersResponse
	(*GetFrameSpeedRequest)(nil),               // 23: hr.GetFrameSpeedRequest
	(*GetFrameSpeedResponse)(nil),              // 24: hr.GetFrameSpeedResponse
	(*GetDeviceCountersRequest)(nil),           // 25: hr.GetDeviceCountersRequest
	(*GetDeviceCountersResponse)(nil),          // 26: hr.GetDeviceCountersResponse
	(*GetGatewayCountersRequest)(nil),          // 27: hr.GetGatewayCountersRequest
	(*GetGatewayCountersResponse)(nil),         // 28: hr.GetGatewayCountersResponse
	(*GetVersionResponse)(nil),                 // 29: hr.GetVersionResponse
	(*DeviceCounters)(nil),                     // 30: hr.DeviceCounters
	(*FrameCounters)(nil),                      // 31: hr.FrameCounters
	(*FrameSpeed)(nil),                         // 32: hr.FrameSpeed
	(*DeviceFrameLog)(nil),                     // 33: hr.DeviceFrameLog
	(*RXInfo)(nil),                             // 34: hr.RXInfo
	(*GetGwStatsRequest)(nil),                  // 35: hr.GetGwStatsRequest
	(*GetGwStatsResponse)(nil),                 // 36: hr.GetGwStatsResponse
	(*CountDeviceFramesPerDevEuiRequest)(nil),  // 37: hr.CountDeviceFramesPerDevEuiRequest
	(*CountDeviceFramesPerDevEuiResponse)(nil), // 38: hr.CountDeviceFramesPerDevEuiResponse
	(*PerDeviceFramesCounters)(nil),            // 39: hr.PerDeviceFramesCounters
	nil,                                        // 40: hr.GetDeviceFramesRequest.FiltersEntry
	nil,                                        // 41: hr.GetDeviceFramesRequest.CsvFiltersEntry
	(*timestamppb.Timestamp)(nil),              // 42: google.protobuf.Timestamp
	(*common.Location)(nil),                    // 43: common.Location
	(gw.FineTimestampType)(0),                  // 44: gw.FineTimestampType
	(*emptypb.Empty)(nil),                      // 45: google.protobuf.Empty
	(*gw.GatewayCommandExecResponse)(nil),      // 46: gw.GatewayCommandExecResponse
}
var file_handyrusty_hr_proto_depIdxs = []int32{
	1,  // 0: hr.GetAveragesForDeviceListResponse.result:type_name -> hr.AveragesForDeviceList
	42, // 1: hr.GetDeviceStatsResponse.rx_last:type_name -> google.protobuf.Timestamp
	42, // 2: hr.GetDeviceStatsResponse.tx_last:type_name -> google.protobuf.Timestamp
	42, // 3: hr.GetDeviceStatsResponse.join_last:type_name -> google.protobuf.Timestamp
	42, // 4: hr.DeviceStats.created_at:type_name -> google.protobuf.Timestamp
	5,  // 5: hr.GetDeviceStatsLastTwoweeksResponse.stats:type_name -> hr.DeviceStats
	42, // 6: hr.LogsGwItem.created_at:type_name -> google.protobuf.Timestamp
	42, // 7: hr.LogsGatewayRequest.start_timestamp:type_name -> google.protobuf.Timestamp
	42, // 8: hr.LogsGatewayRequest.end_timestamp:type_name -> google.protobuf.Timestamp
	7,  // 9: hr.LogsGatewayResponse.result:type_name -> hr.LogsGwItem
	42, // 10: hr.GetIntegrationRepliesRequest.start:type_name -> google.protobuf.Timestamp
	42, // 11: hr.GetIntegrationRepliesRequest.end:type_name -> google.protobuf.Timestamp
	12, // 12: hr.GetIntegrationRepliesResponse.result:type_name -> hr.IntegrationReply
	42, // 13: hr.IntegrationReply.time:type_name -> google.protobuf.Timestamp
	12, // 14: hr.StoreIntegrationReplyRequest.reply:type_name -> hr.IntegrationReply
	40, // 15: hr.GetDeviceFramesRequest.filters:type_name -> hr.GetDeviceFramesRequest.FiltersEntry
	41, // 16: hr.GetDeviceFramesRequest.csv_filters:type_name -> hr.GetDeviceFramesRequest.CsvFiltersEntry
	33, // 17: hr.GetDeviceFramesResponse.data:type_name -> hr.DeviceFrameLog
	31, // 18: hr.GetFrameCountersResponse.counters:type_name -> hr.FrameCounters
	32, // 19: hr.GetFrameSpeedResponse.counters:type_name -> hr.FrameSpeed
	30, // 20: hr.GetDeviceCountersResponse.counters:type_name -> hr.DeviceCounters
	30, // 21: hr.GetGatewayCountersResponse.counters:type_name -> hr.DeviceCounters
	34, // 22: hr.DeviceFrameLog.rx_info:type_name -> hr.RXInfo
	43, // 23: hr.RXInfo.Location:type_name -> common.Location
	44, // 24: hr.RXInfo.FineTimestampType:type_name -> gw.FineTimestampType
	39, // 25: hr.CountDeviceFramesPerDevEuiResponse.result:type_name -> hr.PerDeviceFramesCounters
	18, // 26: hr.GetDeviceFramesRequest.FiltersEntry.value:type_name -> hr.ListOfString
	45, // 27: hr.HandyRustyService.GetVersion:input_type -> google.protobuf.Empty
	25, // 28: hr.HandyRustyService.GetDeviceCounters:input_type -> hr.GetDeviceCountersRequest
	27, // 29: hr.HandyRustyService.GetGatewayCounters:input_type -> hr.GetGatewayCountersRequest
	21, // 30: hr.HandyRustyService.GetFrameCounters:input_type -> hr.GetFrameCountersRequest
	23, // 31: hr.HandyRustyService.GetFrameSpeed:input_type -> hr.GetFrameSpeedRequest
	20, // 32: hr.HandyRustyService.ExecCommand:input_type -> hr.ExecCommandRequest
	17, // 33: hr.HandyRustyService.GetDeviceFrames:input_type -> hr.GetDeviceFramesRequest
	17, // 34: hr.HandyRustyService.StreamDeviceFramesCSV:input_type -> hr.GetDeviceFramesRequest
	45, // 35: hr.HandyRustyService.GetCurrentState:input_type -> google.protobuf.Empty
	13, // 36: hr.HandyRustyService.StoreIntegrationReplies:input_type -> hr.StoreIntegrationReplyRequest
	10, // 37: hr.HandyRustyService.GetIntegrationReplies:input_type -> hr.GetIntegrationRepliesRequest
	8,  // 38: hr.HandyRustyService.GetGatewayLogs:input_type -> hr.LogsGatewayRequest
	35, // 39: hr.HandyRustyService.GetGwStats:input_type -> hr.GetGwStatsRequest
	3,  // 40: hr.HandyRustyService.GetDeviceStats:input_type -> hr.GetDeviceStatsRequest
	3,  // 41: hr.HandyRustyService.GetDeviceStatsLastTwoweeks:input_type -> hr.GetDeviceStatsRequest
	3,  // 42: hr.HandyRustyService.GetDeviceStatsLastTwoweeksAggregated:input_type -> hr.GetDeviceStatsRequest
	0,  // 43: hr.HandyRustyService.GetAveragesForDeviceList:input_type -> hr.GetAveragesForDeviceListRequest
	37, // 44: hr.HandyRustyService.CountDeviceFramesPerDevEui:input_type -> hr.CountDeviceFramesPerDevEuiRequest
	29, // 45: hr.HandyRustyService.GetVersion:output_type -> hr.GetVersionResponse
	26, // 46: hr.HandyRustyService.GetDeviceCounters:output_type -> hr.GetDeviceCountersResponse
	28, // 47: hr.HandyRustyService.GetGatewayCounters:output_type -> hr.GetGatewayCountersResponse
	22, // 48: hr.HandyRustyService.GetFrameCounters:output_type -> hr.GetFrameCountersResponse
	24, // 49: hr.HandyRustyService.GetFrameSpeed:output_type -> hr.GetFrameSpeedResponse
	46, // 50: hr.HandyRustyService.ExecCommand:output_type -> gw.GatewayCommandExecResponse
	19, // 51: hr.HandyRustyService.GetDeviceFrames:output_type -> hr.GetDeviceFramesResponse
	16, // 52: hr.HandyRustyService.StreamDeviceFramesCSV:output_type -> hr.StreamDeviceFramesCSVResponse
	15, // 53: hr.HandyRustyService.GetCurrentState:output_type -> hr.GetCurrentStateResponse
	14, // 54: hr.HandyRustyService.StoreIntegrationReplies:output_type -> hr.StoreIntegrationReplyResponse
	11, // 55: hr.HandyRustyService.GetIntegrationReplies:output_type -> hr.GetIntegrationRepliesResponse
	9,  // 56: hr.HandyRustyService.GetGatewayLogs:output_type -> hr.LogsGatewayResponse
	36, // 57: hr.HandyRustyService.GetGwStats:output_type -> hr.GetGwStatsResponse
	4,  // 58: hr.HandyRustyService.GetDeviceStats:output_type -> hr.GetDeviceStatsResponse
	6,  // 59: hr.HandyRustyService.GetDeviceStatsLastTwoweeks:output_type -> hr.GetDeviceStatsLastTwoweeksResponse
	6,  // 60: hr.HandyRustyService.GetDeviceStatsLastTwoweeksAggregated:output_type -> hr.GetDeviceStatsLastTwoweeksResponse
	2,  // 61: hr.HandyRustyService.GetAveragesForDeviceList:output_type -> hr.GetAveragesForDeviceListResponse
	38, // 62: hr.HandyRustyService.CountDeviceFramesPerDevEui:output_type -> hr.CountDeviceFramesPerDevEuiResponse
	45, // [45:63] is the sub-list for method output_type
	27, // [27:45] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_handyrusty_hr_proto_init() }
func file_handyrusty_hr_proto_init() {
	if File_handyrusty_hr_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_handyrusty_hr_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAveragesForDeviceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AveragesForDeviceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAveragesForDeviceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceStatsLastTwoweeksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogsGwItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogsGatewayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogsGatewayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIntegrationRepliesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetIntegrationRepliesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntegrationReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreIntegrationReplyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StoreIntegrationReplyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCurrentStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamDeviceFramesCSVResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceFramesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOfString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceFramesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecCommandRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFrameCountersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFrameCountersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFrameSpeedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetFrameSpeedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceCountersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceCountersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGatewayCountersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGatewayCountersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceCounters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameCounters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrameSpeed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceFrameLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RXInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGwStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGwStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountDeviceFramesPerDevEuiRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountDeviceFramesPerDevEuiResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_handyrusty_hr_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerDeviceFramesCounters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_handyrusty_hr_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*StreamDeviceFramesCSVResponse_Current)(nil),
		(*StreamDeviceFramesCSVResponse_Total)(nil),
		(*StreamDeviceFramesCSVResponse_Rows)(nil),
		(*StreamDeviceFramesCSVResponse_Chunk)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_handyrusty_hr_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_handyrusty_hr_proto_goTypes,
		DependencyIndexes: file_handyrusty_hr_proto_depIdxs,
		MessageInfos:      file_handyrusty_hr_proto_msgTypes,
	}.Build()
	File_handyrusty_hr_proto = out.File
	file_handyrusty_hr_proto_rawDesc = nil
	file_handyrusty_hr_proto_goTypes = nil
	file_handyrusty_hr_proto_depIdxs = nil
}
