// Code generated by protoc-gen-go. DO NOT EDIT.
// source: as/external/api/handyrusty.proto

package api

import (
	context "context"
	fmt "fmt"
	gw "github.com/brocaar/chirpstack-api/go/v3/gw"
	handyrusty "github.com/brocaar/chirpstack-api/go/v3/handyrusty"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/empty"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("as/external/api/handyrusty.proto", fileDescriptor_89a3848cc56d53bf)
}

var fileDescriptor_89a3848cc56d53bf = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xcb, 0x4e, 0xc2, 0x40,
	0x14, 0x86, 0x03, 0x26, 0x2e, 0x4a, 0x4c, 0xb4, 0x6e, 0xb4, 0x80, 0x92, 0x26, 0x26, 0x06, 0x43,
	0x27, 0x91, 0x85, 0x91, 0xa5, 0x44, 0x71, 0x0d, 0x3b, 0x77, 0xa7, 0xc3, 0xa1, 0x6d, 0x64, 0x2e,
	0xce, 0x4c, 0x29, 0x75, 0xe9, 0x2b, 0xf8, 0x68, 0xbe, 0x82, 0x4f, 0xe1, 0xca, 0x4c, 0x2f, 0xc1,
	0x10, 0x88, 0xcb, 0xf9, 0xff, 0xef, 0x9c, 0xaf, 0x97, 0x71, 0x7a, 0xa0, 0x09, 0xae, 0x0d, 0x2a,
	0x0e, 0x4b, 0x02, 0x32, 0x21, 0x31, 0xf0, 0x79, 0xae, 0x52, 0x6d, 0xf2, 0x40, 0x2a, 0x61, 0x84,
	0x7b, 0x00, 0x32, 0xf1, 0x3a, 0x91, 0x10, 0xd1, 0x12, 0x0b, 0x02, 0x38, 0x17, 0x06, 0x4c, 0x22,
	0xb8, 0x2e, 0x11, 0xef, 0xb2, 0x6a, 0x8b, 0x53, 0x98, 0x2e, 0x88, 0x49, 0x18, 0x6a, 0x03, 0x4c,
	0x56, 0x40, 0x7b, 0x1b, 0x40, 0x26, 0x6b, 0x81, 0x77, 0xba, 0x51, 0x92, 0x58, 0x55, 0x61, 0x2b,
	0xca, 0x48, 0x94, 0x95, 0x87, 0xdb, 0x9f, 0xa6, 0x73, 0xf2, 0x6c, 0xa1, 0xa9, 0x85, 0x66, 0xa8,
	0x56, 0x09, 0x45, 0xf7, 0xdd, 0x39, 0x9e, 0xa0, 0x79, 0x52, 0xc0, 0x70, 0x2c, 0x52, 0x6e, 0x50,
	0x69, 0xb7, 0x1d, 0xc4, 0x2a, 0xd8, 0x4e, 0xa7, 0xf8, 0x96, 0xa2, 0x36, 0x5e, 0x67, 0x77, 0xa9,
	0xa5, 0xe0, 0x1a, 0xfd, 0x9b, 0x8f, 0xaf, 0xef, 0xcf, 0xe6, 0x95, 0xdf, 0xdb, 0x7c, 0x86, 0x41,
	0xf9, 0x50, 0x0b, 0xcb, 0x6b, 0x42, 0xab, 0x89, 0x51, 0xa3, 0xef, 0x72, 0xe7, 0xa8, 0x5e, 0x34,
	0x93, 0x88, 0x73, 0xf7, 0xec, 0xef, 0xee, 0x22, 0xaa, 0xad, 0xe7, 0x3b, 0x9a, 0x4a, 0x79, 0x5d,
	0x28, 0x7d, 0xbf, 0xbb, 0x4f, 0xa9, 0x2d, 0x6e, 0x7d, 0xb9, 0xd3, 0x7a, 0x5c, 0x23, 0x1d, 0x0b,
	0xc6, 0x80, 0xcf, 0xdd, 0x6e, 0x10, 0x65, 0xc1, 0x04, 0x0c, 0x66, 0x90, 0x57, 0x99, 0xad, 0x6b,
	0xe5, 0xc5, 0xbe, 0xfa, 0xdf, 0x57, 0x55, 0x94, 0xe0, 0x1a, 0xe9, 0x80, 0x96, 0x53, 0xa3, 0x46,
	0xff, 0xe1, 0xfe, 0xe5, 0x2e, 0x4a, 0x4c, 0x9c, 0x86, 0x01, 0x15, 0x8c, 0x84, 0x4a, 0x50, 0x00,
	0x45, 0x68, 0x9c, 0x28, 0xa9, 0x0d, 0xd0, 0xd7, 0x81, 0xdd, 0x11, 0x09, 0xb2, 0x1a, 0x92, 0xad,
	0xbb, 0x14, 0x1e, 0x16, 0xbf, 0x6f, 0xf8, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x96, 0x1a, 0x0f, 0x90,
	0x65, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HandyRustyServiceClient is the client API for HandyRustyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HandyRustyServiceClient interface {
	// GetFrameCounters returns frame counters by type for the given range. Aggregation: day
	GetFrameCounters(ctx context.Context, in *handyrusty.GetFrameCountersRequest, opts ...grpc.CallOption) (*handyrusty.GetFrameCountersResponse, error)
	// GetFrameSpeed returns rx+tx frames per minute
	GetFrameSpeed(ctx context.Context, in *handyrusty.GetFrameSpeedRequest, opts ...grpc.CallOption) (*handyrusty.GetFrameSpeedResponse, error)
	// ExecCommand sends the command to execute on gw and returns string it responses
	ExecCommand(ctx context.Context, in *gw.GatewayCommandExecRequest, opts ...grpc.CallOption) (*gw.GatewayCommandExecResponse, error)
}

type handyRustyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHandyRustyServiceClient(cc grpc.ClientConnInterface) HandyRustyServiceClient {
	return &handyRustyServiceClient{cc}
}

func (c *handyRustyServiceClient) GetFrameCounters(ctx context.Context, in *handyrusty.GetFrameCountersRequest, opts ...grpc.CallOption) (*handyrusty.GetFrameCountersResponse, error) {
	out := new(handyrusty.GetFrameCountersResponse)
	err := c.cc.Invoke(ctx, "/api.HandyRustyService/GetFrameCounters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handyRustyServiceClient) GetFrameSpeed(ctx context.Context, in *handyrusty.GetFrameSpeedRequest, opts ...grpc.CallOption) (*handyrusty.GetFrameSpeedResponse, error) {
	out := new(handyrusty.GetFrameSpeedResponse)
	err := c.cc.Invoke(ctx, "/api.HandyRustyService/GetFrameSpeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *handyRustyServiceClient) ExecCommand(ctx context.Context, in *gw.GatewayCommandExecRequest, opts ...grpc.CallOption) (*gw.GatewayCommandExecResponse, error) {
	out := new(gw.GatewayCommandExecResponse)
	err := c.cc.Invoke(ctx, "/api.HandyRustyService/ExecCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HandyRustyServiceServer is the server API for HandyRustyService service.
type HandyRustyServiceServer interface {
	// GetFrameCounters returns frame counters by type for the given range. Aggregation: day
	GetFrameCounters(context.Context, *handyrusty.GetFrameCountersRequest) (*handyrusty.GetFrameCountersResponse, error)
	// GetFrameSpeed returns rx+tx frames per minute
	GetFrameSpeed(context.Context, *handyrusty.GetFrameSpeedRequest) (*handyrusty.GetFrameSpeedResponse, error)
	// ExecCommand sends the command to execute on gw and returns string it responses
	ExecCommand(context.Context, *gw.GatewayCommandExecRequest) (*gw.GatewayCommandExecResponse, error)
}

// UnimplementedHandyRustyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedHandyRustyServiceServer struct {
}

func (*UnimplementedHandyRustyServiceServer) GetFrameCounters(ctx context.Context, req *handyrusty.GetFrameCountersRequest) (*handyrusty.GetFrameCountersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFrameCounters not implemented")
}
func (*UnimplementedHandyRustyServiceServer) GetFrameSpeed(ctx context.Context, req *handyrusty.GetFrameSpeedRequest) (*handyrusty.GetFrameSpeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFrameSpeed not implemented")
}
func (*UnimplementedHandyRustyServiceServer) ExecCommand(ctx context.Context, req *gw.GatewayCommandExecRequest) (*gw.GatewayCommandExecResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecCommand not implemented")
}

func RegisterHandyRustyServiceServer(s *grpc.Server, srv HandyRustyServiceServer) {
	s.RegisterService(&_HandyRustyService_serviceDesc, srv)
}

func _HandyRustyService_GetFrameCounters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(handyrusty.GetFrameCountersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandyRustyServiceServer).GetFrameCounters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.HandyRustyService/GetFrameCounters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandyRustyServiceServer).GetFrameCounters(ctx, req.(*handyrusty.GetFrameCountersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HandyRustyService_GetFrameSpeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(handyrusty.GetFrameSpeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandyRustyServiceServer).GetFrameSpeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.HandyRustyService/GetFrameSpeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandyRustyServiceServer).GetFrameSpeed(ctx, req.(*handyrusty.GetFrameSpeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HandyRustyService_ExecCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gw.GatewayCommandExecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HandyRustyServiceServer).ExecCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.HandyRustyService/ExecCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HandyRustyServiceServer).ExecCommand(ctx, req.(*gw.GatewayCommandExecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HandyRustyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.HandyRustyService",
	HandlerType: (*HandyRustyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFrameCounters",
			Handler:    _HandyRustyService_GetFrameCounters_Handler,
		},
		{
			MethodName: "GetFrameSpeed",
			Handler:    _HandyRustyService_GetFrameSpeed_Handler,
		},
		{
			MethodName: "ExecCommand",
			Handler:    _HandyRustyService_ExecCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "as/external/api/handyrusty.proto",
}
