// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: as/external/api/routingProfile.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RoutingProfileService_Create_FullMethodName = "/api.RoutingProfileService/Create"
	RoutingProfileService_Get_FullMethodName    = "/api.RoutingProfileService/Get"
	RoutingProfileService_Update_FullMethodName = "/api.RoutingProfileService/Update"
	RoutingProfileService_Delete_FullMethodName = "/api.RoutingProfileService/Delete"
	RoutingProfileService_List_FullMethodName   = "/api.RoutingProfileService/List"
)

// RoutingProfileServiceClient is the client API for RoutingProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoutingProfileServiceClient interface {
	// Create creates the given routing-profile.
	Create(ctx context.Context, in *CreateRoutingProfileRequest, opts ...grpc.CallOption) (*CreateRoutingProfileResponse, error)
	// Get returns the routing-profile matching the given id.
	Get(ctx context.Context, in *GetRoutingProfileRequest, opts ...grpc.CallOption) (*GetRoutingProfileResponse, error)
	// Update updates the given routing-profile.
	Update(ctx context.Context, in *UpdateRoutingProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete deletes the routing-profile matching the given id.
	Delete(ctx context.Context, in *DeleteRoutingProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List lists the available routing-profiles.
	List(ctx context.Context, in *ListRoutingProfileRequest, opts ...grpc.CallOption) (*ListRoutingProfileResponse, error)
}

type routingProfileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRoutingProfileServiceClient(cc grpc.ClientConnInterface) RoutingProfileServiceClient {
	return &routingProfileServiceClient{cc}
}

func (c *routingProfileServiceClient) Create(ctx context.Context, in *CreateRoutingProfileRequest, opts ...grpc.CallOption) (*CreateRoutingProfileResponse, error) {
	out := new(CreateRoutingProfileResponse)
	err := c.cc.Invoke(ctx, RoutingProfileService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingProfileServiceClient) Get(ctx context.Context, in *GetRoutingProfileRequest, opts ...grpc.CallOption) (*GetRoutingProfileResponse, error) {
	out := new(GetRoutingProfileResponse)
	err := c.cc.Invoke(ctx, RoutingProfileService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingProfileServiceClient) Update(ctx context.Context, in *UpdateRoutingProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RoutingProfileService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingProfileServiceClient) Delete(ctx context.Context, in *DeleteRoutingProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RoutingProfileService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routingProfileServiceClient) List(ctx context.Context, in *ListRoutingProfileRequest, opts ...grpc.CallOption) (*ListRoutingProfileResponse, error) {
	out := new(ListRoutingProfileResponse)
	err := c.cc.Invoke(ctx, RoutingProfileService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoutingProfileServiceServer is the server API for RoutingProfileService service.
// All implementations must embed UnimplementedRoutingProfileServiceServer
// for forward compatibility
type RoutingProfileServiceServer interface {
	// Create creates the given routing-profile.
	Create(context.Context, *CreateRoutingProfileRequest) (*CreateRoutingProfileResponse, error)
	// Get returns the routing-profile matching the given id.
	Get(context.Context, *GetRoutingProfileRequest) (*GetRoutingProfileResponse, error)
	// Update updates the given routing-profile.
	Update(context.Context, *UpdateRoutingProfileRequest) (*emptypb.Empty, error)
	// Delete deletes the routing-profile matching the given id.
	Delete(context.Context, *DeleteRoutingProfileRequest) (*emptypb.Empty, error)
	// List lists the available routing-profiles.
	List(context.Context, *ListRoutingProfileRequest) (*ListRoutingProfileResponse, error)
	mustEmbedUnimplementedRoutingProfileServiceServer()
}

// UnimplementedRoutingProfileServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRoutingProfileServiceServer struct {
}

func (UnimplementedRoutingProfileServiceServer) Create(context.Context, *CreateRoutingProfileRequest) (*CreateRoutingProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedRoutingProfileServiceServer) Get(context.Context, *GetRoutingProfileRequest) (*GetRoutingProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRoutingProfileServiceServer) Update(context.Context, *UpdateRoutingProfileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedRoutingProfileServiceServer) Delete(context.Context, *DeleteRoutingProfileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRoutingProfileServiceServer) List(context.Context, *ListRoutingProfileRequest) (*ListRoutingProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedRoutingProfileServiceServer) mustEmbedUnimplementedRoutingProfileServiceServer() {}

// UnsafeRoutingProfileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoutingProfileServiceServer will
// result in compilation errors.
type UnsafeRoutingProfileServiceServer interface {
	mustEmbedUnimplementedRoutingProfileServiceServer()
}

func RegisterRoutingProfileServiceServer(s grpc.ServiceRegistrar, srv RoutingProfileServiceServer) {
	s.RegisterService(&RoutingProfileService_ServiceDesc, srv)
}

func _RoutingProfileService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoutingProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingProfileServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingProfileService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingProfileServiceServer).Create(ctx, req.(*CreateRoutingProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingProfileService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoutingProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingProfileServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingProfileService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingProfileServiceServer).Get(ctx, req.(*GetRoutingProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingProfileService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoutingProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingProfileServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingProfileService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingProfileServiceServer).Update(ctx, req.(*UpdateRoutingProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingProfileService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoutingProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingProfileServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingProfileService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingProfileServiceServer).Delete(ctx, req.(*DeleteRoutingProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoutingProfileService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoutingProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutingProfileServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RoutingProfileService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutingProfileServiceServer).List(ctx, req.(*ListRoutingProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RoutingProfileService_ServiceDesc is the grpc.ServiceDesc for RoutingProfileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoutingProfileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.RoutingProfileService",
	HandlerType: (*RoutingProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _RoutingProfileService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _RoutingProfileService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _RoutingProfileService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _RoutingProfileService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _RoutingProfileService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "as/external/api/routingProfile.proto",
}
