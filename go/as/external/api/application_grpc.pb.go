// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: as/external/api/application.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ApplicationService_Create_FullMethodName                                   = "/api.ApplicationService/Create"
	ApplicationService_Get_FullMethodName                                      = "/api.ApplicationService/Get"
	ApplicationService_Update_FullMethodName                                   = "/api.ApplicationService/Update"
	ApplicationService_Delete_FullMethodName                                   = "/api.ApplicationService/Delete"
	ApplicationService_List_FullMethodName                                     = "/api.ApplicationService/List"
	ApplicationService_CreateHTTPIntegration_FullMethodName                    = "/api.ApplicationService/CreateHTTPIntegration"
	ApplicationService_GetHTTPIntegration_FullMethodName                       = "/api.ApplicationService/GetHTTPIntegration"
	ApplicationService_UpdateHTTPIntegration_FullMethodName                    = "/api.ApplicationService/UpdateHTTPIntegration"
	ApplicationService_DeleteHTTPIntegration_FullMethodName                    = "/api.ApplicationService/DeleteHTTPIntegration"
	ApplicationService_CreateInfluxDBIntegration_FullMethodName                = "/api.ApplicationService/CreateInfluxDBIntegration"
	ApplicationService_GetInfluxDBIntegration_FullMethodName                   = "/api.ApplicationService/GetInfluxDBIntegration"
	ApplicationService_UpdateInfluxDBIntegration_FullMethodName                = "/api.ApplicationService/UpdateInfluxDBIntegration"
	ApplicationService_DeleteInfluxDBIntegration_FullMethodName                = "/api.ApplicationService/DeleteInfluxDBIntegration"
	ApplicationService_CreateThingsBoardIntegration_FullMethodName             = "/api.ApplicationService/CreateThingsBoardIntegration"
	ApplicationService_GetThingsBoardIntegration_FullMethodName                = "/api.ApplicationService/GetThingsBoardIntegration"
	ApplicationService_UpdateThingsBoardIntegration_FullMethodName             = "/api.ApplicationService/UpdateThingsBoardIntegration"
	ApplicationService_DeleteThingsBoardIntegration_FullMethodName             = "/api.ApplicationService/DeleteThingsBoardIntegration"
	ApplicationService_CreateMyDevicesIntegration_FullMethodName               = "/api.ApplicationService/CreateMyDevicesIntegration"
	ApplicationService_GetMyDevicesIntegration_FullMethodName                  = "/api.ApplicationService/GetMyDevicesIntegration"
	ApplicationService_UpdateMyDevicesIntegration_FullMethodName               = "/api.ApplicationService/UpdateMyDevicesIntegration"
	ApplicationService_DeleteMyDevicesIntegration_FullMethodName               = "/api.ApplicationService/DeleteMyDevicesIntegration"
	ApplicationService_CreateLoRaCloudIntegration_FullMethodName               = "/api.ApplicationService/CreateLoRaCloudIntegration"
	ApplicationService_GetLoRaCloudIntegration_FullMethodName                  = "/api.ApplicationService/GetLoRaCloudIntegration"
	ApplicationService_UpdateLoRaCloudIntegration_FullMethodName               = "/api.ApplicationService/UpdateLoRaCloudIntegration"
	ApplicationService_DeleteLoRaCloudIntegration_FullMethodName               = "/api.ApplicationService/DeleteLoRaCloudIntegration"
	ApplicationService_CreateGCPPubSubIntegration_FullMethodName               = "/api.ApplicationService/CreateGCPPubSubIntegration"
	ApplicationService_GetGCPPubSubIntegration_FullMethodName                  = "/api.ApplicationService/GetGCPPubSubIntegration"
	ApplicationService_UpdateGCPPubSubIntegration_FullMethodName               = "/api.ApplicationService/UpdateGCPPubSubIntegration"
	ApplicationService_DeleteGCPPubSubIntegration_FullMethodName               = "/api.ApplicationService/DeleteGCPPubSubIntegration"
	ApplicationService_CreateAWSSNSIntegration_FullMethodName                  = "/api.ApplicationService/CreateAWSSNSIntegration"
	ApplicationService_GetAWSSNSIntegration_FullMethodName                     = "/api.ApplicationService/GetAWSSNSIntegration"
	ApplicationService_UpdateAWSSNSIntegration_FullMethodName                  = "/api.ApplicationService/UpdateAWSSNSIntegration"
	ApplicationService_DeleteAWSSNSIntegration_FullMethodName                  = "/api.ApplicationService/DeleteAWSSNSIntegration"
	ApplicationService_CreateAzureServiceBusIntegration_FullMethodName         = "/api.ApplicationService/CreateAzureServiceBusIntegration"
	ApplicationService_GetAzureServiceBusIntegration_FullMethodName            = "/api.ApplicationService/GetAzureServiceBusIntegration"
	ApplicationService_UpdateAzureServiceBusIntegration_FullMethodName         = "/api.ApplicationService/UpdateAzureServiceBusIntegration"
	ApplicationService_DeleteAzureServiceBusIntegration_FullMethodName         = "/api.ApplicationService/DeleteAzureServiceBusIntegration"
	ApplicationService_CreatePilotThingsIntegration_FullMethodName             = "/api.ApplicationService/CreatePilotThingsIntegration"
	ApplicationService_GetPilotThingsIntegration_FullMethodName                = "/api.ApplicationService/GetPilotThingsIntegration"
	ApplicationService_UpdatePilotThingsIntegration_FullMethodName             = "/api.ApplicationService/UpdatePilotThingsIntegration"
	ApplicationService_DeletePilotThingsIntegration_FullMethodName             = "/api.ApplicationService/DeletePilotThingsIntegration"
	ApplicationService_CreateKafkaIntegration_FullMethodName                   = "/api.ApplicationService/CreateKafkaIntegration"
	ApplicationService_GetKafkaIntegration_FullMethodName                      = "/api.ApplicationService/GetKafkaIntegration"
	ApplicationService_UpdateKafkaIntegration_FullMethodName                   = "/api.ApplicationService/UpdateKafkaIntegration"
	ApplicationService_DeleteKafkaIntegration_FullMethodName                   = "/api.ApplicationService/DeleteKafkaIntegration"
	ApplicationService_ListIntegrations_FullMethodName                         = "/api.ApplicationService/ListIntegrations"
	ApplicationService_GenerateMQTTIntegrationClientCertificate_FullMethodName = "/api.ApplicationService/GenerateMQTTIntegrationClientCertificate"
	ApplicationService_CreateMQTTIntegration_FullMethodName                    = "/api.ApplicationService/CreateMQTTIntegration"
	ApplicationService_GetMQTTIntegration_FullMethodName                       = "/api.ApplicationService/GetMQTTIntegration"
	ApplicationService_UpdateMQTTIntegration_FullMethodName                    = "/api.ApplicationService/UpdateMQTTIntegration"
	ApplicationService_DeleteMQTTIntegration_FullMethodName                    = "/api.ApplicationService/DeleteMQTTIntegration"
)

// ApplicationServiceClient is the client API for ApplicationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationServiceClient interface {
	// Create creates the given application.
	Create(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*CreateApplicationResponse, error)
	// Get returns the requested application.
	Get(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*GetApplicationResponse, error)
	// Update updates the given application.
	Update(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Delete deletes the given application.
	Delete(ctx context.Context, in *DeleteApplicationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// List lists the available applications.
	List(ctx context.Context, in *ListApplicationRequest, opts ...grpc.CallOption) (*ListApplicationResponse, error)
	// CreateHTTPIntegration creates a HTTP application-integration.
	CreateHTTPIntegration(ctx context.Context, in *CreateHTTPIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetHTTPIntegration returns the HTTP application-integration.
	GetHTTPIntegration(ctx context.Context, in *GetHTTPIntegrationRequest, opts ...grpc.CallOption) (*GetHTTPIntegrationResponse, error)
	// UpdateHTTPIntegration updates the HTTP application-integration.
	UpdateHTTPIntegration(ctx context.Context, in *UpdateHTTPIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteIntegration deletes the HTTP application-integration.
	DeleteHTTPIntegration(ctx context.Context, in *DeleteHTTPIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateInfluxDBIntegration create an InfluxDB application-integration.
	CreateInfluxDBIntegration(ctx context.Context, in *CreateInfluxDBIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetInfluxDBIntegration returns the InfluxDB application-integration.
	GetInfluxDBIntegration(ctx context.Context, in *GetInfluxDBIntegrationRequest, opts ...grpc.CallOption) (*GetInfluxDBIntegrationResponse, error)
	// UpdateInfluxDBIntegration updates the InfluxDB application-integration.
	UpdateInfluxDBIntegration(ctx context.Context, in *UpdateInfluxDBIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteInfluxDBIntegration deletes the InfluxDB application-integration.
	DeleteInfluxDBIntegration(ctx context.Context, in *DeleteInfluxDBIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateThingsBoardIntegration creates a ThingsBoard application-integration.
	CreateThingsBoardIntegration(ctx context.Context, in *CreateThingsBoardIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetThingsBoardIntegration returns the ThingsBoard application-integration.
	GetThingsBoardIntegration(ctx context.Context, in *GetThingsBoardIntegrationRequest, opts ...grpc.CallOption) (*GetThingsBoardIntegrationResponse, error)
	// UpdateThingsBoardIntegration updates the ThingsBoard application-integration.
	UpdateThingsBoardIntegration(ctx context.Context, in *UpdateThingsBoardIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteThingsBoardIntegration deletes the ThingsBoard application-integration.
	DeleteThingsBoardIntegration(ctx context.Context, in *DeleteThingsBoardIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateMyDevicesIntegration creates a MyDevices application-integration.
	CreateMyDevicesIntegration(ctx context.Context, in *CreateMyDevicesIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetMyDevicesIntegration returns the MyDevices application-integration.
	GetMyDevicesIntegration(ctx context.Context, in *GetMyDevicesIntegrationRequest, opts ...grpc.CallOption) (*GetMyDevicesIntegrationResponse, error)
	// UpdateMyDevicesIntegration updates the MyDevices application-integration.
	UpdateMyDevicesIntegration(ctx context.Context, in *UpdateMyDevicesIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteMyDevicesIntegration deletes the MyDevices application-integration.
	DeleteMyDevicesIntegration(ctx context.Context, in *DeleteMyDevicesIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateLoRaCloudIntegration creates A LoRaCloud application-integration.
	CreateLoRaCloudIntegration(ctx context.Context, in *CreateLoRaCloudIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetLoRaCloudIntegration returns the LoRaCloud application-integration.
	GetLoRaCloudIntegration(ctx context.Context, in *GetLoRaCloudIntegrationRequest, opts ...grpc.CallOption) (*GetLoRaCloudIntegrationResponse, error)
	// UpdateLoRaCloudIntegration updates the LoRaCloud application-integration.
	UpdateLoRaCloudIntegration(ctx context.Context, in *UpdateLoRaCloudIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteLoRaCloudIntegration deletes the LoRaCloud application-integration.
	DeleteLoRaCloudIntegration(ctx context.Context, in *DeleteLoRaCloudIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateGCPPubSubIntegration creates a GCP PubSub application-integration.
	CreateGCPPubSubIntegration(ctx context.Context, in *CreateGCPPubSubIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetGCPPubSubIntegration returns the GCP PubSub application-integration.
	GetGCPPubSubIntegration(ctx context.Context, in *GetGCPPubSubIntegrationRequest, opts ...grpc.CallOption) (*GetGCPPubSubIntegrationResponse, error)
	// UpdateGCPPubSubIntegration updates the GCP PubSub application-integration.
	UpdateGCPPubSubIntegration(ctx context.Context, in *UpdateGCPPubSubIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteGCPPubSubIntegration deletes the GCP PubSub application-integration.
	DeleteGCPPubSubIntegration(ctx context.Context, in *DeleteGCPPubSubIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateAWSSNSIntegration creates a AWS SNS application-integration.
	CreateAWSSNSIntegration(ctx context.Context, in *CreateAWSSNSIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetAWSSNSIntegration returns the AWS SNS application-integration.
	GetAWSSNSIntegration(ctx context.Context, in *GetAWSSNSIntegrationRequest, opts ...grpc.CallOption) (*GetAWSSNSIntegrationResponse, error)
	// UpdateAWSSNSIntegration updates the AWS SNS application-integration.
	UpdateAWSSNSIntegration(ctx context.Context, in *UpdateAWSSNSIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteAWSSNSIntegration deletes the AWS SNS application-integration.
	DeleteAWSSNSIntegration(ctx context.Context, in *DeleteAWSSNSIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateAzureServiceBusIntegration creates an Azure Service-Bus application-integration.
	CreateAzureServiceBusIntegration(ctx context.Context, in *CreateAzureServiceBusIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetAzureServiceBusIntegration returns the Azure Service-Bus application-integration.
	GetAzureServiceBusIntegration(ctx context.Context, in *GetAzureServiceBusIntegrationRequest, opts ...grpc.CallOption) (*GetAzureServiceBusIntegrationResponse, error)
	// UpdateAzureServiceBusIntegration updates the Azure Service-Bus application-integration.
	UpdateAzureServiceBusIntegration(ctx context.Context, in *UpdateAzureServiceBusIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteAzureServiceBusIntegration deletes the Azure Service-Bus application-integration.
	DeleteAzureServiceBusIntegration(ctx context.Context, in *DeleteAzureServiceBusIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreatePilotThingsIntegration creates an Pilot Things application-integration.
	CreatePilotThingsIntegration(ctx context.Context, in *CreatePilotThingsIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetPilotThingsIntegration returns the Pilot Things application-integration.
	GetPilotThingsIntegration(ctx context.Context, in *GetPilotThingsIntegrationRequest, opts ...grpc.CallOption) (*GetPilotThingsIntegrationResponse, error)
	// UpdatePilotThingsIntegration updates the Pilot Things application-integration.
	UpdatePilotThingsIntegration(ctx context.Context, in *UpdatePilotThingsIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeletePilotThingsIntegration deletes the Pilot Things application-integration.
	DeletePilotThingsIntegration(ctx context.Context, in *DeletePilotThingsIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateKafkaIntegration creates the application-integration.
	CreateKafkaIntegration(ctx context.Context, in *CreateKafkaIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetKafkaIntegration returns the application-integration.
	GetKafkaIntegration(ctx context.Context, in *GetKafkaIntegrationRequest, opts ...grpc.CallOption) (*GetKafkaIntegrationResponse, error)
	// UpdateKafkaIntegration updates the application-integration.
	UpdateKafkaIntegration(ctx context.Context, in *UpdateKafkaIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteKafkaIntegration deletes the application-integration.
	DeleteKafkaIntegration(ctx context.Context, in *DeleteKafkaIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ListIntegrations lists all configured integrations.
	ListIntegrations(ctx context.Context, in *ListIntegrationRequest, opts ...grpc.CallOption) (*ListIntegrationResponse, error)
	// GenerateMQTTIntegrationClientCertificate generates an application ID specific TLS certificate
	// to connect to the MQTT broker.
	GenerateMQTTIntegrationClientCertificate(ctx context.Context, in *GenerateMQTTIntegrationClientCertificateRequest, opts ...grpc.CallOption) (*GenerateMQTTIntegrationClientCertificateResponse, error)
	// CreateMQTTIntegration creates the application-integration.
	CreateMQTTIntegration(ctx context.Context, in *CreateMQTTIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetMQTTIntegration returns the application-integration.
	GetMQTTIntegration(ctx context.Context, in *GetMQTTIntegrationRequest, opts ...grpc.CallOption) (*GetMQTTIntegrationResponse, error)
	// UpdateMQTTIntegration updates the application-integration.
	UpdateMQTTIntegration(ctx context.Context, in *UpdateMQTTIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteMQTTIntegration deletes the application-integration.
	DeleteMQTTIntegration(ctx context.Context, in *DeleteMQTTIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type applicationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationServiceClient(cc grpc.ClientConnInterface) ApplicationServiceClient {
	return &applicationServiceClient{cc}
}

func (c *applicationServiceClient) Create(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*CreateApplicationResponse, error) {
	out := new(CreateApplicationResponse)
	err := c.cc.Invoke(ctx, ApplicationService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) Get(ctx context.Context, in *GetApplicationRequest, opts ...grpc.CallOption) (*GetApplicationResponse, error) {
	out := new(GetApplicationResponse)
	err := c.cc.Invoke(ctx, ApplicationService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) Update(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) Delete(ctx context.Context, in *DeleteApplicationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) List(ctx context.Context, in *ListApplicationRequest, opts ...grpc.CallOption) (*ListApplicationResponse, error) {
	out := new(ListApplicationResponse)
	err := c.cc.Invoke(ctx, ApplicationService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) CreateHTTPIntegration(ctx context.Context, in *CreateHTTPIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationService_CreateHTTPIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) GetHTTPIntegration(ctx context.Context, in *GetHTTPIntegrationRequest, opts ...grpc.CallOption) (*GetHTTPIntegrationResponse, error) {
	out := new(GetHTTPIntegrationResponse)
	err := c.cc.Invoke(ctx, ApplicationService_GetHTTPIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) UpdateHTTPIntegration(ctx context.Context, in *UpdateHTTPIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationService_UpdateHTTPIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) DeleteHTTPIntegration(ctx context.Context, in *DeleteHTTPIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationService_DeleteHTTPIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) CreateInfluxDBIntegration(ctx context.Context, in *CreateInfluxDBIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationService_CreateInfluxDBIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) GetInfluxDBIntegration(ctx context.Context, in *GetInfluxDBIntegrationRequest, opts ...grpc.CallOption) (*GetInfluxDBIntegrationResponse, error) {
	out := new(GetInfluxDBIntegrationResponse)
	err := c.cc.Invoke(ctx, ApplicationService_GetInfluxDBIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) UpdateInfluxDBIntegration(ctx context.Context, in *UpdateInfluxDBIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationService_UpdateInfluxDBIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) DeleteInfluxDBIntegration(ctx context.Context, in *DeleteInfluxDBIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationService_DeleteInfluxDBIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) CreateThingsBoardIntegration(ctx context.Context, in *CreateThingsBoardIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationService_CreateThingsBoardIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) GetThingsBoardIntegration(ctx context.Context, in *GetThingsBoardIntegrationRequest, opts ...grpc.CallOption) (*GetThingsBoardIntegrationResponse, error) {
	out := new(GetThingsBoardIntegrationResponse)
	err := c.cc.Invoke(ctx, ApplicationService_GetThingsBoardIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) UpdateThingsBoardIntegration(ctx context.Context, in *UpdateThingsBoardIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationService_UpdateThingsBoardIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) DeleteThingsBoardIntegration(ctx context.Context, in *DeleteThingsBoardIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationService_DeleteThingsBoardIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) CreateMyDevicesIntegration(ctx context.Context, in *CreateMyDevicesIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationService_CreateMyDevicesIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) GetMyDevicesIntegration(ctx context.Context, in *GetMyDevicesIntegrationRequest, opts ...grpc.CallOption) (*GetMyDevicesIntegrationResponse, error) {
	out := new(GetMyDevicesIntegrationResponse)
	err := c.cc.Invoke(ctx, ApplicationService_GetMyDevicesIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) UpdateMyDevicesIntegration(ctx context.Context, in *UpdateMyDevicesIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationService_UpdateMyDevicesIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) DeleteMyDevicesIntegration(ctx context.Context, in *DeleteMyDevicesIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationService_DeleteMyDevicesIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) CreateLoRaCloudIntegration(ctx context.Context, in *CreateLoRaCloudIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationService_CreateLoRaCloudIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) GetLoRaCloudIntegration(ctx context.Context, in *GetLoRaCloudIntegrationRequest, opts ...grpc.CallOption) (*GetLoRaCloudIntegrationResponse, error) {
	out := new(GetLoRaCloudIntegrationResponse)
	err := c.cc.Invoke(ctx, ApplicationService_GetLoRaCloudIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) UpdateLoRaCloudIntegration(ctx context.Context, in *UpdateLoRaCloudIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationService_UpdateLoRaCloudIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) DeleteLoRaCloudIntegration(ctx context.Context, in *DeleteLoRaCloudIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationService_DeleteLoRaCloudIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) CreateGCPPubSubIntegration(ctx context.Context, in *CreateGCPPubSubIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationService_CreateGCPPubSubIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) GetGCPPubSubIntegration(ctx context.Context, in *GetGCPPubSubIntegrationRequest, opts ...grpc.CallOption) (*GetGCPPubSubIntegrationResponse, error) {
	out := new(GetGCPPubSubIntegrationResponse)
	err := c.cc.Invoke(ctx, ApplicationService_GetGCPPubSubIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) UpdateGCPPubSubIntegration(ctx context.Context, in *UpdateGCPPubSubIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationService_UpdateGCPPubSubIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) DeleteGCPPubSubIntegration(ctx context.Context, in *DeleteGCPPubSubIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationService_DeleteGCPPubSubIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) CreateAWSSNSIntegration(ctx context.Context, in *CreateAWSSNSIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationService_CreateAWSSNSIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) GetAWSSNSIntegration(ctx context.Context, in *GetAWSSNSIntegrationRequest, opts ...grpc.CallOption) (*GetAWSSNSIntegrationResponse, error) {
	out := new(GetAWSSNSIntegrationResponse)
	err := c.cc.Invoke(ctx, ApplicationService_GetAWSSNSIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) UpdateAWSSNSIntegration(ctx context.Context, in *UpdateAWSSNSIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationService_UpdateAWSSNSIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) DeleteAWSSNSIntegration(ctx context.Context, in *DeleteAWSSNSIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationService_DeleteAWSSNSIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) CreateAzureServiceBusIntegration(ctx context.Context, in *CreateAzureServiceBusIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationService_CreateAzureServiceBusIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) GetAzureServiceBusIntegration(ctx context.Context, in *GetAzureServiceBusIntegrationRequest, opts ...grpc.CallOption) (*GetAzureServiceBusIntegrationResponse, error) {
	out := new(GetAzureServiceBusIntegrationResponse)
	err := c.cc.Invoke(ctx, ApplicationService_GetAzureServiceBusIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) UpdateAzureServiceBusIntegration(ctx context.Context, in *UpdateAzureServiceBusIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationService_UpdateAzureServiceBusIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) DeleteAzureServiceBusIntegration(ctx context.Context, in *DeleteAzureServiceBusIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationService_DeleteAzureServiceBusIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) CreatePilotThingsIntegration(ctx context.Context, in *CreatePilotThingsIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationService_CreatePilotThingsIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) GetPilotThingsIntegration(ctx context.Context, in *GetPilotThingsIntegrationRequest, opts ...grpc.CallOption) (*GetPilotThingsIntegrationResponse, error) {
	out := new(GetPilotThingsIntegrationResponse)
	err := c.cc.Invoke(ctx, ApplicationService_GetPilotThingsIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) UpdatePilotThingsIntegration(ctx context.Context, in *UpdatePilotThingsIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationService_UpdatePilotThingsIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) DeletePilotThingsIntegration(ctx context.Context, in *DeletePilotThingsIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationService_DeletePilotThingsIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) CreateKafkaIntegration(ctx context.Context, in *CreateKafkaIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationService_CreateKafkaIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) GetKafkaIntegration(ctx context.Context, in *GetKafkaIntegrationRequest, opts ...grpc.CallOption) (*GetKafkaIntegrationResponse, error) {
	out := new(GetKafkaIntegrationResponse)
	err := c.cc.Invoke(ctx, ApplicationService_GetKafkaIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) UpdateKafkaIntegration(ctx context.Context, in *UpdateKafkaIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationService_UpdateKafkaIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) DeleteKafkaIntegration(ctx context.Context, in *DeleteKafkaIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationService_DeleteKafkaIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) ListIntegrations(ctx context.Context, in *ListIntegrationRequest, opts ...grpc.CallOption) (*ListIntegrationResponse, error) {
	out := new(ListIntegrationResponse)
	err := c.cc.Invoke(ctx, ApplicationService_ListIntegrations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) GenerateMQTTIntegrationClientCertificate(ctx context.Context, in *GenerateMQTTIntegrationClientCertificateRequest, opts ...grpc.CallOption) (*GenerateMQTTIntegrationClientCertificateResponse, error) {
	out := new(GenerateMQTTIntegrationClientCertificateResponse)
	err := c.cc.Invoke(ctx, ApplicationService_GenerateMQTTIntegrationClientCertificate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) CreateMQTTIntegration(ctx context.Context, in *CreateMQTTIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationService_CreateMQTTIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) GetMQTTIntegration(ctx context.Context, in *GetMQTTIntegrationRequest, opts ...grpc.CallOption) (*GetMQTTIntegrationResponse, error) {
	out := new(GetMQTTIntegrationResponse)
	err := c.cc.Invoke(ctx, ApplicationService_GetMQTTIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) UpdateMQTTIntegration(ctx context.Context, in *UpdateMQTTIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationService_UpdateMQTTIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) DeleteMQTTIntegration(ctx context.Context, in *DeleteMQTTIntegrationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationService_DeleteMQTTIntegration_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationServiceServer is the server API for ApplicationService service.
// All implementations must embed UnimplementedApplicationServiceServer
// for forward compatibility
type ApplicationServiceServer interface {
	// Create creates the given application.
	Create(context.Context, *CreateApplicationRequest) (*CreateApplicationResponse, error)
	// Get returns the requested application.
	Get(context.Context, *GetApplicationRequest) (*GetApplicationResponse, error)
	// Update updates the given application.
	Update(context.Context, *UpdateApplicationRequest) (*emptypb.Empty, error)
	// Delete deletes the given application.
	Delete(context.Context, *DeleteApplicationRequest) (*emptypb.Empty, error)
	// List lists the available applications.
	List(context.Context, *ListApplicationRequest) (*ListApplicationResponse, error)
	// CreateHTTPIntegration creates a HTTP application-integration.
	CreateHTTPIntegration(context.Context, *CreateHTTPIntegrationRequest) (*emptypb.Empty, error)
	// GetHTTPIntegration returns the HTTP application-integration.
	GetHTTPIntegration(context.Context, *GetHTTPIntegrationRequest) (*GetHTTPIntegrationResponse, error)
	// UpdateHTTPIntegration updates the HTTP application-integration.
	UpdateHTTPIntegration(context.Context, *UpdateHTTPIntegrationRequest) (*emptypb.Empty, error)
	// DeleteIntegration deletes the HTTP application-integration.
	DeleteHTTPIntegration(context.Context, *DeleteHTTPIntegrationRequest) (*emptypb.Empty, error)
	// CreateInfluxDBIntegration create an InfluxDB application-integration.
	CreateInfluxDBIntegration(context.Context, *CreateInfluxDBIntegrationRequest) (*emptypb.Empty, error)
	// GetInfluxDBIntegration returns the InfluxDB application-integration.
	GetInfluxDBIntegration(context.Context, *GetInfluxDBIntegrationRequest) (*GetInfluxDBIntegrationResponse, error)
	// UpdateInfluxDBIntegration updates the InfluxDB application-integration.
	UpdateInfluxDBIntegration(context.Context, *UpdateInfluxDBIntegrationRequest) (*emptypb.Empty, error)
	// DeleteInfluxDBIntegration deletes the InfluxDB application-integration.
	DeleteInfluxDBIntegration(context.Context, *DeleteInfluxDBIntegrationRequest) (*emptypb.Empty, error)
	// CreateThingsBoardIntegration creates a ThingsBoard application-integration.
	CreateThingsBoardIntegration(context.Context, *CreateThingsBoardIntegrationRequest) (*emptypb.Empty, error)
	// GetThingsBoardIntegration returns the ThingsBoard application-integration.
	GetThingsBoardIntegration(context.Context, *GetThingsBoardIntegrationRequest) (*GetThingsBoardIntegrationResponse, error)
	// UpdateThingsBoardIntegration updates the ThingsBoard application-integration.
	UpdateThingsBoardIntegration(context.Context, *UpdateThingsBoardIntegrationRequest) (*emptypb.Empty, error)
	// DeleteThingsBoardIntegration deletes the ThingsBoard application-integration.
	DeleteThingsBoardIntegration(context.Context, *DeleteThingsBoardIntegrationRequest) (*emptypb.Empty, error)
	// CreateMyDevicesIntegration creates a MyDevices application-integration.
	CreateMyDevicesIntegration(context.Context, *CreateMyDevicesIntegrationRequest) (*emptypb.Empty, error)
	// GetMyDevicesIntegration returns the MyDevices application-integration.
	GetMyDevicesIntegration(context.Context, *GetMyDevicesIntegrationRequest) (*GetMyDevicesIntegrationResponse, error)
	// UpdateMyDevicesIntegration updates the MyDevices application-integration.
	UpdateMyDevicesIntegration(context.Context, *UpdateMyDevicesIntegrationRequest) (*emptypb.Empty, error)
	// DeleteMyDevicesIntegration deletes the MyDevices application-integration.
	DeleteMyDevicesIntegration(context.Context, *DeleteMyDevicesIntegrationRequest) (*emptypb.Empty, error)
	// CreateLoRaCloudIntegration creates A LoRaCloud application-integration.
	CreateLoRaCloudIntegration(context.Context, *CreateLoRaCloudIntegrationRequest) (*emptypb.Empty, error)
	// GetLoRaCloudIntegration returns the LoRaCloud application-integration.
	GetLoRaCloudIntegration(context.Context, *GetLoRaCloudIntegrationRequest) (*GetLoRaCloudIntegrationResponse, error)
	// UpdateLoRaCloudIntegration updates the LoRaCloud application-integration.
	UpdateLoRaCloudIntegration(context.Context, *UpdateLoRaCloudIntegrationRequest) (*emptypb.Empty, error)
	// DeleteLoRaCloudIntegration deletes the LoRaCloud application-integration.
	DeleteLoRaCloudIntegration(context.Context, *DeleteLoRaCloudIntegrationRequest) (*emptypb.Empty, error)
	// CreateGCPPubSubIntegration creates a GCP PubSub application-integration.
	CreateGCPPubSubIntegration(context.Context, *CreateGCPPubSubIntegrationRequest) (*emptypb.Empty, error)
	// GetGCPPubSubIntegration returns the GCP PubSub application-integration.
	GetGCPPubSubIntegration(context.Context, *GetGCPPubSubIntegrationRequest) (*GetGCPPubSubIntegrationResponse, error)
	// UpdateGCPPubSubIntegration updates the GCP PubSub application-integration.
	UpdateGCPPubSubIntegration(context.Context, *UpdateGCPPubSubIntegrationRequest) (*emptypb.Empty, error)
	// DeleteGCPPubSubIntegration deletes the GCP PubSub application-integration.
	DeleteGCPPubSubIntegration(context.Context, *DeleteGCPPubSubIntegrationRequest) (*emptypb.Empty, error)
	// CreateAWSSNSIntegration creates a AWS SNS application-integration.
	CreateAWSSNSIntegration(context.Context, *CreateAWSSNSIntegrationRequest) (*emptypb.Empty, error)
	// GetAWSSNSIntegration returns the AWS SNS application-integration.
	GetAWSSNSIntegration(context.Context, *GetAWSSNSIntegrationRequest) (*GetAWSSNSIntegrationResponse, error)
	// UpdateAWSSNSIntegration updates the AWS SNS application-integration.
	UpdateAWSSNSIntegration(context.Context, *UpdateAWSSNSIntegrationRequest) (*emptypb.Empty, error)
	// DeleteAWSSNSIntegration deletes the AWS SNS application-integration.
	DeleteAWSSNSIntegration(context.Context, *DeleteAWSSNSIntegrationRequest) (*emptypb.Empty, error)
	// CreateAzureServiceBusIntegration creates an Azure Service-Bus application-integration.
	CreateAzureServiceBusIntegration(context.Context, *CreateAzureServiceBusIntegrationRequest) (*emptypb.Empty, error)
	// GetAzureServiceBusIntegration returns the Azure Service-Bus application-integration.
	GetAzureServiceBusIntegration(context.Context, *GetAzureServiceBusIntegrationRequest) (*GetAzureServiceBusIntegrationResponse, error)
	// UpdateAzureServiceBusIntegration updates the Azure Service-Bus application-integration.
	UpdateAzureServiceBusIntegration(context.Context, *UpdateAzureServiceBusIntegrationRequest) (*emptypb.Empty, error)
	// DeleteAzureServiceBusIntegration deletes the Azure Service-Bus application-integration.
	DeleteAzureServiceBusIntegration(context.Context, *DeleteAzureServiceBusIntegrationRequest) (*emptypb.Empty, error)
	// CreatePilotThingsIntegration creates an Pilot Things application-integration.
	CreatePilotThingsIntegration(context.Context, *CreatePilotThingsIntegrationRequest) (*emptypb.Empty, error)
	// GetPilotThingsIntegration returns the Pilot Things application-integration.
	GetPilotThingsIntegration(context.Context, *GetPilotThingsIntegrationRequest) (*GetPilotThingsIntegrationResponse, error)
	// UpdatePilotThingsIntegration updates the Pilot Things application-integration.
	UpdatePilotThingsIntegration(context.Context, *UpdatePilotThingsIntegrationRequest) (*emptypb.Empty, error)
	// DeletePilotThingsIntegration deletes the Pilot Things application-integration.
	DeletePilotThingsIntegration(context.Context, *DeletePilotThingsIntegrationRequest) (*emptypb.Empty, error)
	// CreateKafkaIntegration creates the application-integration.
	CreateKafkaIntegration(context.Context, *CreateKafkaIntegrationRequest) (*emptypb.Empty, error)
	// GetKafkaIntegration returns the application-integration.
	GetKafkaIntegration(context.Context, *GetKafkaIntegrationRequest) (*GetKafkaIntegrationResponse, error)
	// UpdateKafkaIntegration updates the application-integration.
	UpdateKafkaIntegration(context.Context, *UpdateKafkaIntegrationRequest) (*emptypb.Empty, error)
	// DeleteKafkaIntegration deletes the application-integration.
	DeleteKafkaIntegration(context.Context, *DeleteKafkaIntegrationRequest) (*emptypb.Empty, error)
	// ListIntegrations lists all configured integrations.
	ListIntegrations(context.Context, *ListIntegrationRequest) (*ListIntegrationResponse, error)
	// GenerateMQTTIntegrationClientCertificate generates an application ID specific TLS certificate
	// to connect to the MQTT broker.
	GenerateMQTTIntegrationClientCertificate(context.Context, *GenerateMQTTIntegrationClientCertificateRequest) (*GenerateMQTTIntegrationClientCertificateResponse, error)
	// CreateMQTTIntegration creates the application-integration.
	CreateMQTTIntegration(context.Context, *CreateMQTTIntegrationRequest) (*emptypb.Empty, error)
	// GetMQTTIntegration returns the application-integration.
	GetMQTTIntegration(context.Context, *GetMQTTIntegrationRequest) (*GetMQTTIntegrationResponse, error)
	// UpdateMQTTIntegration updates the application-integration.
	UpdateMQTTIntegration(context.Context, *UpdateMQTTIntegrationRequest) (*emptypb.Empty, error)
	// DeleteMQTTIntegration deletes the application-integration.
	DeleteMQTTIntegration(context.Context, *DeleteMQTTIntegrationRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedApplicationServiceServer()
}

// UnimplementedApplicationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApplicationServiceServer struct {
}

func (UnimplementedApplicationServiceServer) Create(context.Context, *CreateApplicationRequest) (*CreateApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedApplicationServiceServer) Get(context.Context, *GetApplicationRequest) (*GetApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedApplicationServiceServer) Update(context.Context, *UpdateApplicationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedApplicationServiceServer) Delete(context.Context, *DeleteApplicationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedApplicationServiceServer) List(context.Context, *ListApplicationRequest) (*ListApplicationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedApplicationServiceServer) CreateHTTPIntegration(context.Context, *CreateHTTPIntegrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHTTPIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) GetHTTPIntegration(context.Context, *GetHTTPIntegrationRequest) (*GetHTTPIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHTTPIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) UpdateHTTPIntegration(context.Context, *UpdateHTTPIntegrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHTTPIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) DeleteHTTPIntegration(context.Context, *DeleteHTTPIntegrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHTTPIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) CreateInfluxDBIntegration(context.Context, *CreateInfluxDBIntegrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInfluxDBIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) GetInfluxDBIntegration(context.Context, *GetInfluxDBIntegrationRequest) (*GetInfluxDBIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfluxDBIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) UpdateInfluxDBIntegration(context.Context, *UpdateInfluxDBIntegrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInfluxDBIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) DeleteInfluxDBIntegration(context.Context, *DeleteInfluxDBIntegrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInfluxDBIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) CreateThingsBoardIntegration(context.Context, *CreateThingsBoardIntegrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateThingsBoardIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) GetThingsBoardIntegration(context.Context, *GetThingsBoardIntegrationRequest) (*GetThingsBoardIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThingsBoardIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) UpdateThingsBoardIntegration(context.Context, *UpdateThingsBoardIntegrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateThingsBoardIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) DeleteThingsBoardIntegration(context.Context, *DeleteThingsBoardIntegrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteThingsBoardIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) CreateMyDevicesIntegration(context.Context, *CreateMyDevicesIntegrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMyDevicesIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) GetMyDevicesIntegration(context.Context, *GetMyDevicesIntegrationRequest) (*GetMyDevicesIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMyDevicesIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) UpdateMyDevicesIntegration(context.Context, *UpdateMyDevicesIntegrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMyDevicesIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) DeleteMyDevicesIntegration(context.Context, *DeleteMyDevicesIntegrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMyDevicesIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) CreateLoRaCloudIntegration(context.Context, *CreateLoRaCloudIntegrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLoRaCloudIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) GetLoRaCloudIntegration(context.Context, *GetLoRaCloudIntegrationRequest) (*GetLoRaCloudIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoRaCloudIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) UpdateLoRaCloudIntegration(context.Context, *UpdateLoRaCloudIntegrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLoRaCloudIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) DeleteLoRaCloudIntegration(context.Context, *DeleteLoRaCloudIntegrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLoRaCloudIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) CreateGCPPubSubIntegration(context.Context, *CreateGCPPubSubIntegrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGCPPubSubIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) GetGCPPubSubIntegration(context.Context, *GetGCPPubSubIntegrationRequest) (*GetGCPPubSubIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGCPPubSubIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) UpdateGCPPubSubIntegration(context.Context, *UpdateGCPPubSubIntegrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGCPPubSubIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) DeleteGCPPubSubIntegration(context.Context, *DeleteGCPPubSubIntegrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGCPPubSubIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) CreateAWSSNSIntegration(context.Context, *CreateAWSSNSIntegrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAWSSNSIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) GetAWSSNSIntegration(context.Context, *GetAWSSNSIntegrationRequest) (*GetAWSSNSIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAWSSNSIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) UpdateAWSSNSIntegration(context.Context, *UpdateAWSSNSIntegrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAWSSNSIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) DeleteAWSSNSIntegration(context.Context, *DeleteAWSSNSIntegrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAWSSNSIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) CreateAzureServiceBusIntegration(context.Context, *CreateAzureServiceBusIntegrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAzureServiceBusIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) GetAzureServiceBusIntegration(context.Context, *GetAzureServiceBusIntegrationRequest) (*GetAzureServiceBusIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAzureServiceBusIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) UpdateAzureServiceBusIntegration(context.Context, *UpdateAzureServiceBusIntegrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAzureServiceBusIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) DeleteAzureServiceBusIntegration(context.Context, *DeleteAzureServiceBusIntegrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAzureServiceBusIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) CreatePilotThingsIntegration(context.Context, *CreatePilotThingsIntegrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePilotThingsIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) GetPilotThingsIntegration(context.Context, *GetPilotThingsIntegrationRequest) (*GetPilotThingsIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPilotThingsIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) UpdatePilotThingsIntegration(context.Context, *UpdatePilotThingsIntegrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePilotThingsIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) DeletePilotThingsIntegration(context.Context, *DeletePilotThingsIntegrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePilotThingsIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) CreateKafkaIntegration(context.Context, *CreateKafkaIntegrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateKafkaIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) GetKafkaIntegration(context.Context, *GetKafkaIntegrationRequest) (*GetKafkaIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKafkaIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) UpdateKafkaIntegration(context.Context, *UpdateKafkaIntegrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKafkaIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) DeleteKafkaIntegration(context.Context, *DeleteKafkaIntegrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteKafkaIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) ListIntegrations(context.Context, *ListIntegrationRequest) (*ListIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIntegrations not implemented")
}
func (UnimplementedApplicationServiceServer) GenerateMQTTIntegrationClientCertificate(context.Context, *GenerateMQTTIntegrationClientCertificateRequest) (*GenerateMQTTIntegrationClientCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateMQTTIntegrationClientCertificate not implemented")
}
func (UnimplementedApplicationServiceServer) CreateMQTTIntegration(context.Context, *CreateMQTTIntegrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMQTTIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) GetMQTTIntegration(context.Context, *GetMQTTIntegrationRequest) (*GetMQTTIntegrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMQTTIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) UpdateMQTTIntegration(context.Context, *UpdateMQTTIntegrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMQTTIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) DeleteMQTTIntegration(context.Context, *DeleteMQTTIntegrationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMQTTIntegration not implemented")
}
func (UnimplementedApplicationServiceServer) mustEmbedUnimplementedApplicationServiceServer() {}

// UnsafeApplicationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationServiceServer will
// result in compilation errors.
type UnsafeApplicationServiceServer interface {
	mustEmbedUnimplementedApplicationServiceServer()
}

func RegisterApplicationServiceServer(s grpc.ServiceRegistrar, srv ApplicationServiceServer) {
	s.RegisterService(&ApplicationService_ServiceDesc, srv)
}

func _ApplicationService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).Create(ctx, req.(*CreateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).Get(ctx, req.(*GetApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).Update(ctx, req.(*UpdateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).Delete(ctx, req.(*DeleteApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).List(ctx, req.(*ListApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_CreateHTTPIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateHTTPIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).CreateHTTPIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_CreateHTTPIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).CreateHTTPIntegration(ctx, req.(*CreateHTTPIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_GetHTTPIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHTTPIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GetHTTPIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_GetHTTPIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GetHTTPIntegration(ctx, req.(*GetHTTPIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_UpdateHTTPIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHTTPIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).UpdateHTTPIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_UpdateHTTPIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).UpdateHTTPIntegration(ctx, req.(*UpdateHTTPIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_DeleteHTTPIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHTTPIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).DeleteHTTPIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_DeleteHTTPIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).DeleteHTTPIntegration(ctx, req.(*DeleteHTTPIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_CreateInfluxDBIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInfluxDBIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).CreateInfluxDBIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_CreateInfluxDBIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).CreateInfluxDBIntegration(ctx, req.(*CreateInfluxDBIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_GetInfluxDBIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfluxDBIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GetInfluxDBIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_GetInfluxDBIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GetInfluxDBIntegration(ctx, req.(*GetInfluxDBIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_UpdateInfluxDBIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInfluxDBIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).UpdateInfluxDBIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_UpdateInfluxDBIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).UpdateInfluxDBIntegration(ctx, req.(*UpdateInfluxDBIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_DeleteInfluxDBIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInfluxDBIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).DeleteInfluxDBIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_DeleteInfluxDBIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).DeleteInfluxDBIntegration(ctx, req.(*DeleteInfluxDBIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_CreateThingsBoardIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateThingsBoardIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).CreateThingsBoardIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_CreateThingsBoardIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).CreateThingsBoardIntegration(ctx, req.(*CreateThingsBoardIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_GetThingsBoardIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThingsBoardIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GetThingsBoardIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_GetThingsBoardIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GetThingsBoardIntegration(ctx, req.(*GetThingsBoardIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_UpdateThingsBoardIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateThingsBoardIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).UpdateThingsBoardIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_UpdateThingsBoardIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).UpdateThingsBoardIntegration(ctx, req.(*UpdateThingsBoardIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_DeleteThingsBoardIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteThingsBoardIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).DeleteThingsBoardIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_DeleteThingsBoardIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).DeleteThingsBoardIntegration(ctx, req.(*DeleteThingsBoardIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_CreateMyDevicesIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMyDevicesIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).CreateMyDevicesIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_CreateMyDevicesIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).CreateMyDevicesIntegration(ctx, req.(*CreateMyDevicesIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_GetMyDevicesIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMyDevicesIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GetMyDevicesIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_GetMyDevicesIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GetMyDevicesIntegration(ctx, req.(*GetMyDevicesIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_UpdateMyDevicesIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMyDevicesIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).UpdateMyDevicesIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_UpdateMyDevicesIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).UpdateMyDevicesIntegration(ctx, req.(*UpdateMyDevicesIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_DeleteMyDevicesIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMyDevicesIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).DeleteMyDevicesIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_DeleteMyDevicesIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).DeleteMyDevicesIntegration(ctx, req.(*DeleteMyDevicesIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_CreateLoRaCloudIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLoRaCloudIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).CreateLoRaCloudIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_CreateLoRaCloudIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).CreateLoRaCloudIntegration(ctx, req.(*CreateLoRaCloudIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_GetLoRaCloudIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoRaCloudIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GetLoRaCloudIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_GetLoRaCloudIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GetLoRaCloudIntegration(ctx, req.(*GetLoRaCloudIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_UpdateLoRaCloudIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLoRaCloudIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).UpdateLoRaCloudIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_UpdateLoRaCloudIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).UpdateLoRaCloudIntegration(ctx, req.(*UpdateLoRaCloudIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_DeleteLoRaCloudIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLoRaCloudIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).DeleteLoRaCloudIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_DeleteLoRaCloudIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).DeleteLoRaCloudIntegration(ctx, req.(*DeleteLoRaCloudIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_CreateGCPPubSubIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGCPPubSubIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).CreateGCPPubSubIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_CreateGCPPubSubIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).CreateGCPPubSubIntegration(ctx, req.(*CreateGCPPubSubIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_GetGCPPubSubIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGCPPubSubIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GetGCPPubSubIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_GetGCPPubSubIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GetGCPPubSubIntegration(ctx, req.(*GetGCPPubSubIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_UpdateGCPPubSubIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGCPPubSubIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).UpdateGCPPubSubIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_UpdateGCPPubSubIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).UpdateGCPPubSubIntegration(ctx, req.(*UpdateGCPPubSubIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_DeleteGCPPubSubIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGCPPubSubIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).DeleteGCPPubSubIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_DeleteGCPPubSubIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).DeleteGCPPubSubIntegration(ctx, req.(*DeleteGCPPubSubIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_CreateAWSSNSIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAWSSNSIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).CreateAWSSNSIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_CreateAWSSNSIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).CreateAWSSNSIntegration(ctx, req.(*CreateAWSSNSIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_GetAWSSNSIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAWSSNSIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GetAWSSNSIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_GetAWSSNSIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GetAWSSNSIntegration(ctx, req.(*GetAWSSNSIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_UpdateAWSSNSIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAWSSNSIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).UpdateAWSSNSIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_UpdateAWSSNSIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).UpdateAWSSNSIntegration(ctx, req.(*UpdateAWSSNSIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_DeleteAWSSNSIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAWSSNSIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).DeleteAWSSNSIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_DeleteAWSSNSIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).DeleteAWSSNSIntegration(ctx, req.(*DeleteAWSSNSIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_CreateAzureServiceBusIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAzureServiceBusIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).CreateAzureServiceBusIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_CreateAzureServiceBusIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).CreateAzureServiceBusIntegration(ctx, req.(*CreateAzureServiceBusIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_GetAzureServiceBusIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAzureServiceBusIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GetAzureServiceBusIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_GetAzureServiceBusIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GetAzureServiceBusIntegration(ctx, req.(*GetAzureServiceBusIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_UpdateAzureServiceBusIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAzureServiceBusIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).UpdateAzureServiceBusIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_UpdateAzureServiceBusIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).UpdateAzureServiceBusIntegration(ctx, req.(*UpdateAzureServiceBusIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_DeleteAzureServiceBusIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAzureServiceBusIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).DeleteAzureServiceBusIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_DeleteAzureServiceBusIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).DeleteAzureServiceBusIntegration(ctx, req.(*DeleteAzureServiceBusIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_CreatePilotThingsIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePilotThingsIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).CreatePilotThingsIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_CreatePilotThingsIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).CreatePilotThingsIntegration(ctx, req.(*CreatePilotThingsIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_GetPilotThingsIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPilotThingsIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GetPilotThingsIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_GetPilotThingsIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GetPilotThingsIntegration(ctx, req.(*GetPilotThingsIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_UpdatePilotThingsIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePilotThingsIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).UpdatePilotThingsIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_UpdatePilotThingsIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).UpdatePilotThingsIntegration(ctx, req.(*UpdatePilotThingsIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_DeletePilotThingsIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePilotThingsIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).DeletePilotThingsIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_DeletePilotThingsIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).DeletePilotThingsIntegration(ctx, req.(*DeletePilotThingsIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_CreateKafkaIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKafkaIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).CreateKafkaIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_CreateKafkaIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).CreateKafkaIntegration(ctx, req.(*CreateKafkaIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_GetKafkaIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKafkaIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GetKafkaIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_GetKafkaIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GetKafkaIntegration(ctx, req.(*GetKafkaIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_UpdateKafkaIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKafkaIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).UpdateKafkaIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_UpdateKafkaIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).UpdateKafkaIntegration(ctx, req.(*UpdateKafkaIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_DeleteKafkaIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKafkaIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).DeleteKafkaIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_DeleteKafkaIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).DeleteKafkaIntegration(ctx, req.(*DeleteKafkaIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_ListIntegrations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).ListIntegrations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_ListIntegrations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).ListIntegrations(ctx, req.(*ListIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_GenerateMQTTIntegrationClientCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateMQTTIntegrationClientCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GenerateMQTTIntegrationClientCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_GenerateMQTTIntegrationClientCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GenerateMQTTIntegrationClientCertificate(ctx, req.(*GenerateMQTTIntegrationClientCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_CreateMQTTIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMQTTIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).CreateMQTTIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_CreateMQTTIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).CreateMQTTIntegration(ctx, req.(*CreateMQTTIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_GetMQTTIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMQTTIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GetMQTTIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_GetMQTTIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GetMQTTIntegration(ctx, req.(*GetMQTTIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_UpdateMQTTIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMQTTIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).UpdateMQTTIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_UpdateMQTTIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).UpdateMQTTIntegration(ctx, req.(*UpdateMQTTIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_DeleteMQTTIntegration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMQTTIntegrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).DeleteMQTTIntegration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationService_DeleteMQTTIntegration_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).DeleteMQTTIntegration(ctx, req.(*DeleteMQTTIntegrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApplicationService_ServiceDesc is the grpc.ServiceDesc for ApplicationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApplicationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ApplicationService",
	HandlerType: (*ApplicationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _ApplicationService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ApplicationService_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ApplicationService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ApplicationService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _ApplicationService_List_Handler,
		},
		{
			MethodName: "CreateHTTPIntegration",
			Handler:    _ApplicationService_CreateHTTPIntegration_Handler,
		},
		{
			MethodName: "GetHTTPIntegration",
			Handler:    _ApplicationService_GetHTTPIntegration_Handler,
		},
		{
			MethodName: "UpdateHTTPIntegration",
			Handler:    _ApplicationService_UpdateHTTPIntegration_Handler,
		},
		{
			MethodName: "DeleteHTTPIntegration",
			Handler:    _ApplicationService_DeleteHTTPIntegration_Handler,
		},
		{
			MethodName: "CreateInfluxDBIntegration",
			Handler:    _ApplicationService_CreateInfluxDBIntegration_Handler,
		},
		{
			MethodName: "GetInfluxDBIntegration",
			Handler:    _ApplicationService_GetInfluxDBIntegration_Handler,
		},
		{
			MethodName: "UpdateInfluxDBIntegration",
			Handler:    _ApplicationService_UpdateInfluxDBIntegration_Handler,
		},
		{
			MethodName: "DeleteInfluxDBIntegration",
			Handler:    _ApplicationService_DeleteInfluxDBIntegration_Handler,
		},
		{
			MethodName: "CreateThingsBoardIntegration",
			Handler:    _ApplicationService_CreateThingsBoardIntegration_Handler,
		},
		{
			MethodName: "GetThingsBoardIntegration",
			Handler:    _ApplicationService_GetThingsBoardIntegration_Handler,
		},
		{
			MethodName: "UpdateThingsBoardIntegration",
			Handler:    _ApplicationService_UpdateThingsBoardIntegration_Handler,
		},
		{
			MethodName: "DeleteThingsBoardIntegration",
			Handler:    _ApplicationService_DeleteThingsBoardIntegration_Handler,
		},
		{
			MethodName: "CreateMyDevicesIntegration",
			Handler:    _ApplicationService_CreateMyDevicesIntegration_Handler,
		},
		{
			MethodName: "GetMyDevicesIntegration",
			Handler:    _ApplicationService_GetMyDevicesIntegration_Handler,
		},
		{
			MethodName: "UpdateMyDevicesIntegration",
			Handler:    _ApplicationService_UpdateMyDevicesIntegration_Handler,
		},
		{
			MethodName: "DeleteMyDevicesIntegration",
			Handler:    _ApplicationService_DeleteMyDevicesIntegration_Handler,
		},
		{
			MethodName: "CreateLoRaCloudIntegration",
			Handler:    _ApplicationService_CreateLoRaCloudIntegration_Handler,
		},
		{
			MethodName: "GetLoRaCloudIntegration",
			Handler:    _ApplicationService_GetLoRaCloudIntegration_Handler,
		},
		{
			MethodName: "UpdateLoRaCloudIntegration",
			Handler:    _ApplicationService_UpdateLoRaCloudIntegration_Handler,
		},
		{
			MethodName: "DeleteLoRaCloudIntegration",
			Handler:    _ApplicationService_DeleteLoRaCloudIntegration_Handler,
		},
		{
			MethodName: "CreateGCPPubSubIntegration",
			Handler:    _ApplicationService_CreateGCPPubSubIntegration_Handler,
		},
		{
			MethodName: "GetGCPPubSubIntegration",
			Handler:    _ApplicationService_GetGCPPubSubIntegration_Handler,
		},
		{
			MethodName: "UpdateGCPPubSubIntegration",
			Handler:    _ApplicationService_UpdateGCPPubSubIntegration_Handler,
		},
		{
			MethodName: "DeleteGCPPubSubIntegration",
			Handler:    _ApplicationService_DeleteGCPPubSubIntegration_Handler,
		},
		{
			MethodName: "CreateAWSSNSIntegration",
			Handler:    _ApplicationService_CreateAWSSNSIntegration_Handler,
		},
		{
			MethodName: "GetAWSSNSIntegration",
			Handler:    _ApplicationService_GetAWSSNSIntegration_Handler,
		},
		{
			MethodName: "UpdateAWSSNSIntegration",
			Handler:    _ApplicationService_UpdateAWSSNSIntegration_Handler,
		},
		{
			MethodName: "DeleteAWSSNSIntegration",
			Handler:    _ApplicationService_DeleteAWSSNSIntegration_Handler,
		},
		{
			MethodName: "CreateAzureServiceBusIntegration",
			Handler:    _ApplicationService_CreateAzureServiceBusIntegration_Handler,
		},
		{
			MethodName: "GetAzureServiceBusIntegration",
			Handler:    _ApplicationService_GetAzureServiceBusIntegration_Handler,
		},
		{
			MethodName: "UpdateAzureServiceBusIntegration",
			Handler:    _ApplicationService_UpdateAzureServiceBusIntegration_Handler,
		},
		{
			MethodName: "DeleteAzureServiceBusIntegration",
			Handler:    _ApplicationService_DeleteAzureServiceBusIntegration_Handler,
		},
		{
			MethodName: "CreatePilotThingsIntegration",
			Handler:    _ApplicationService_CreatePilotThingsIntegration_Handler,
		},
		{
			MethodName: "GetPilotThingsIntegration",
			Handler:    _ApplicationService_GetPilotThingsIntegration_Handler,
		},
		{
			MethodName: "UpdatePilotThingsIntegration",
			Handler:    _ApplicationService_UpdatePilotThingsIntegration_Handler,
		},
		{
			MethodName: "DeletePilotThingsIntegration",
			Handler:    _ApplicationService_DeletePilotThingsIntegration_Handler,
		},
		{
			MethodName: "CreateKafkaIntegration",
			Handler:    _ApplicationService_CreateKafkaIntegration_Handler,
		},
		{
			MethodName: "GetKafkaIntegration",
			Handler:    _ApplicationService_GetKafkaIntegration_Handler,
		},
		{
			MethodName: "UpdateKafkaIntegration",
			Handler:    _ApplicationService_UpdateKafkaIntegration_Handler,
		},
		{
			MethodName: "DeleteKafkaIntegration",
			Handler:    _ApplicationService_DeleteKafkaIntegration_Handler,
		},
		{
			MethodName: "ListIntegrations",
			Handler:    _ApplicationService_ListIntegrations_Handler,
		},
		{
			MethodName: "GenerateMQTTIntegrationClientCertificate",
			Handler:    _ApplicationService_GenerateMQTTIntegrationClientCertificate_Handler,
		},
		{
			MethodName: "CreateMQTTIntegration",
			Handler:    _ApplicationService_CreateMQTTIntegration_Handler,
		},
		{
			MethodName: "GetMQTTIntegration",
			Handler:    _ApplicationService_GetMQTTIntegration_Handler,
		},
		{
			MethodName: "UpdateMQTTIntegration",
			Handler:    _ApplicationService_UpdateMQTTIntegration_Handler,
		},
		{
			MethodName: "DeleteMQTTIntegration",
			Handler:    _ApplicationService_DeleteMQTTIntegration_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "as/external/api/application.proto",
}
