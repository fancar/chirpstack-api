// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: as/external/api/datastream.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DataStreamService_GetGatewayTaskResult_FullMethodName = "/api.DataStreamService/GetGatewayTaskResult"
)

// DataStreamServiceClient is the client API for DataStreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataStreamServiceClient interface {
	// GetGatewayTaskResult get results for gateway that previously recieved during
	//
	//	ExecCommand in background mode
	//	(!) websocket required! The endpoint does not work from a web-swagger.
	GetGatewayTaskResult(ctx context.Context, in *DataStreamRequest, opts ...grpc.CallOption) (DataStreamService_GetGatewayTaskResultClient, error)
}

type dataStreamServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataStreamServiceClient(cc grpc.ClientConnInterface) DataStreamServiceClient {
	return &dataStreamServiceClient{cc}
}

func (c *dataStreamServiceClient) GetGatewayTaskResult(ctx context.Context, in *DataStreamRequest, opts ...grpc.CallOption) (DataStreamService_GetGatewayTaskResultClient, error) {
	stream, err := c.cc.NewStream(ctx, &DataStreamService_ServiceDesc.Streams[0], DataStreamService_GetGatewayTaskResult_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &dataStreamServiceGetGatewayTaskResultClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DataStreamService_GetGatewayTaskResultClient interface {
	Recv() (*DataStreamResponse, error)
	grpc.ClientStream
}

type dataStreamServiceGetGatewayTaskResultClient struct {
	grpc.ClientStream
}

func (x *dataStreamServiceGetGatewayTaskResultClient) Recv() (*DataStreamResponse, error) {
	m := new(DataStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DataStreamServiceServer is the server API for DataStreamService service.
// All implementations must embed UnimplementedDataStreamServiceServer
// for forward compatibility
type DataStreamServiceServer interface {
	// GetGatewayTaskResult get results for gateway that previously recieved during
	//
	//	ExecCommand in background mode
	//	(!) websocket required! The endpoint does not work from a web-swagger.
	GetGatewayTaskResult(*DataStreamRequest, DataStreamService_GetGatewayTaskResultServer) error
	mustEmbedUnimplementedDataStreamServiceServer()
}

// UnimplementedDataStreamServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataStreamServiceServer struct {
}

func (UnimplementedDataStreamServiceServer) GetGatewayTaskResult(*DataStreamRequest, DataStreamService_GetGatewayTaskResultServer) error {
	return status.Errorf(codes.Unimplemented, "method GetGatewayTaskResult not implemented")
}
func (UnimplementedDataStreamServiceServer) mustEmbedUnimplementedDataStreamServiceServer() {}

// UnsafeDataStreamServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataStreamServiceServer will
// result in compilation errors.
type UnsafeDataStreamServiceServer interface {
	mustEmbedUnimplementedDataStreamServiceServer()
}

func RegisterDataStreamServiceServer(s grpc.ServiceRegistrar, srv DataStreamServiceServer) {
	s.RegisterService(&DataStreamService_ServiceDesc, srv)
}

func _DataStreamService_GetGatewayTaskResult_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DataStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DataStreamServiceServer).GetGatewayTaskResult(m, &dataStreamServiceGetGatewayTaskResultServer{stream})
}

type DataStreamService_GetGatewayTaskResultServer interface {
	Send(*DataStreamResponse) error
	grpc.ServerStream
}

type dataStreamServiceGetGatewayTaskResultServer struct {
	grpc.ServerStream
}

func (x *dataStreamServiceGetGatewayTaskResultServer) Send(m *DataStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

// DataStreamService_ServiceDesc is the grpc.ServiceDesc for DataStreamService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataStreamService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.DataStreamService",
	HandlerType: (*DataStreamServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetGatewayTaskResult",
			Handler:       _DataStreamService_GetGatewayTaskResult_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "as/external/api/datastream.proto",
}
