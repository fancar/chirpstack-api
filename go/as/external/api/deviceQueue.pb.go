// Code generated by protoc-gen-go. DO NOT EDIT.
// source: as/external/api/deviceQueue.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DeviceQueueItem struct {
	// Device EUI (HEX encoded).
	DevEui string `protobuf:"bytes,1,opt,name=dev_eui,json=devEUI,proto3" json:"dev_eui,omitempty"`
	// Set this to true when an acknowledgement from the device is required.
	// Please note that this must not be used to guarantee a delivery.
	Confirmed bool `protobuf:"varint,2,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	// Optional. Downlink frame-counter.
	// This will be automatically set on enquue.
	// If you encrypt data on your side - specify the fCnt here
	FCnt uint32 `protobuf:"varint,6,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	// FPort used (must be > 0)
	FPort uint32 `protobuf:"varint,3,opt,name=f_port,json=fPort,proto3" json:"f_port,omitempty"`
	// Base64 encoded data.
	// Or use the json_object field when an application codec has been configured.
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	// Optional. JSON object (string).
	// Only use this when an application codec has been configured that can convert
	// this object into binary form.
	JsonObject string `protobuf:"bytes,5,opt,name=json_object,json=jsonObject,proto3" json:"json_object,omitempty"`
	// Time to live (in seconds). You can specify the maximum time in queue for the item
	Ttl uint32 `protobuf:"varint,7,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// Optional. the id will be generated on server side if empty
	// later on in case of error you'll recieve the message with the ID
	MessageId string `protobuf:"bytes,8,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// Optional field
	Owner string `protobuf:"bytes,9,opt,name=owner,proto3" json:"owner,omitempty"`
	// service field for queue listing
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// service field for queue listing
	TimeoutAfter         *timestamp.Timestamp `protobuf:"bytes,11,opt,name=timeout_after,json=timeoutAfter,proto3" json:"timeout_after,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *DeviceQueueItem) Reset()         { *m = DeviceQueueItem{} }
func (m *DeviceQueueItem) String() string { return proto.CompactTextString(m) }
func (*DeviceQueueItem) ProtoMessage()    {}
func (*DeviceQueueItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bc7c26115164240, []int{0}
}

func (m *DeviceQueueItem) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeviceQueueItem.Unmarshal(m, b)
}
func (m *DeviceQueueItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeviceQueueItem.Marshal(b, m, deterministic)
}
func (m *DeviceQueueItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceQueueItem.Merge(m, src)
}
func (m *DeviceQueueItem) XXX_Size() int {
	return xxx_messageInfo_DeviceQueueItem.Size(m)
}
func (m *DeviceQueueItem) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceQueueItem.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceQueueItem proto.InternalMessageInfo

func (m *DeviceQueueItem) GetDevEui() string {
	if m != nil {
		return m.DevEui
	}
	return ""
}

func (m *DeviceQueueItem) GetConfirmed() bool {
	if m != nil {
		return m.Confirmed
	}
	return false
}

func (m *DeviceQueueItem) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

func (m *DeviceQueueItem) GetFPort() uint32 {
	if m != nil {
		return m.FPort
	}
	return 0
}

func (m *DeviceQueueItem) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *DeviceQueueItem) GetJsonObject() string {
	if m != nil {
		return m.JsonObject
	}
	return ""
}

func (m *DeviceQueueItem) GetTtl() uint32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *DeviceQueueItem) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *DeviceQueueItem) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *DeviceQueueItem) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *DeviceQueueItem) GetTimeoutAfter() *timestamp.Timestamp {
	if m != nil {
		return m.TimeoutAfter
	}
	return nil
}

// DownlinkItemHex data payload as hex-string
type DownlinkItemHex struct {
	// Set this to true when an acknowledgement from the device is required.
	// Please note that this must not be used to guarantee a delivery.
	Confirmed bool `protobuf:"varint,1,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	// Optional. Downlink frame-counter.
	// This will be automatically set on enquue.
	// If you encrypt data on your side - specify the fCnt here
	FCnt uint32 `protobuf:"varint,2,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	// FPort used (must be > 0)
	FPort uint32 `protobuf:"varint,3,opt,name=f_port,json=fPort,proto3" json:"f_port,omitempty"`
	// hex-encoded string
	Data string `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	// Optional. Time to live (in seconds). You can specify the maximum time in queue for the item
	Ttl uint32 `protobuf:"varint,5,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// Optional. the id will be generated on server side if empty
	// later on in case of error you'll recieve the message with the ID
	MessageId            string   `protobuf:"bytes,6,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DownlinkItemHex) Reset()         { *m = DownlinkItemHex{} }
func (m *DownlinkItemHex) String() string { return proto.CompactTextString(m) }
func (*DownlinkItemHex) ProtoMessage()    {}
func (*DownlinkItemHex) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bc7c26115164240, []int{1}
}

func (m *DownlinkItemHex) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DownlinkItemHex.Unmarshal(m, b)
}
func (m *DownlinkItemHex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DownlinkItemHex.Marshal(b, m, deterministic)
}
func (m *DownlinkItemHex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownlinkItemHex.Merge(m, src)
}
func (m *DownlinkItemHex) XXX_Size() int {
	return xxx_messageInfo_DownlinkItemHex.Size(m)
}
func (m *DownlinkItemHex) XXX_DiscardUnknown() {
	xxx_messageInfo_DownlinkItemHex.DiscardUnknown(m)
}

var xxx_messageInfo_DownlinkItemHex proto.InternalMessageInfo

func (m *DownlinkItemHex) GetConfirmed() bool {
	if m != nil {
		return m.Confirmed
	}
	return false
}

func (m *DownlinkItemHex) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

func (m *DownlinkItemHex) GetFPort() uint32 {
	if m != nil {
		return m.FPort
	}
	return 0
}

func (m *DownlinkItemHex) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *DownlinkItemHex) GetTtl() uint32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *DownlinkItemHex) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

type EnqueueDeviceQueueItemRequest struct {
	// Queue-item object to enqueue.
	DeviceQueueItem *DeviceQueueItem `protobuf:"bytes,1,opt,name=device_queue_item,json=deviceQueueItem,proto3" json:"device_queue_item,omitempty"`
	// !Please do not call method in parallel when it set to true!
	// If set to true - enqueue on air . If false - background enqueue
	// Set this to true when you really need to recieve current fCnt
	// ! CAUTION ! The mode is very slow!
	// It has to connect to NS, get current fcnt,
	// then encrypt payload and put it to ns queue.
	// If you have to onboard a lot of downlinks to the server
	// as fast as possible - please DO NOT use the feature!
	// If you set it to false the errors will be sent as ErrorEvents
	// via messages that A.S. sends to your applications
	// you can match it according to the downlink-uuid recieved from the answer.
	GetFcnt              bool     `protobuf:"varint,2,opt,name=get_fcnt,json=getFcnt,proto3" json:"get_fcnt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnqueueDeviceQueueItemRequest) Reset()         { *m = EnqueueDeviceQueueItemRequest{} }
func (m *EnqueueDeviceQueueItemRequest) String() string { return proto.CompactTextString(m) }
func (*EnqueueDeviceQueueItemRequest) ProtoMessage()    {}
func (*EnqueueDeviceQueueItemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bc7c26115164240, []int{2}
}

func (m *EnqueueDeviceQueueItemRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnqueueDeviceQueueItemRequest.Unmarshal(m, b)
}
func (m *EnqueueDeviceQueueItemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnqueueDeviceQueueItemRequest.Marshal(b, m, deterministic)
}
func (m *EnqueueDeviceQueueItemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnqueueDeviceQueueItemRequest.Merge(m, src)
}
func (m *EnqueueDeviceQueueItemRequest) XXX_Size() int {
	return xxx_messageInfo_EnqueueDeviceQueueItemRequest.Size(m)
}
func (m *EnqueueDeviceQueueItemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EnqueueDeviceQueueItemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EnqueueDeviceQueueItemRequest proto.InternalMessageInfo

func (m *EnqueueDeviceQueueItemRequest) GetDeviceQueueItem() *DeviceQueueItem {
	if m != nil {
		return m.DeviceQueueItem
	}
	return nil
}

func (m *EnqueueDeviceQueueItemRequest) GetGetFcnt() bool {
	if m != nil {
		return m.GetFcnt
	}
	return false
}

type EnqueueDeviceQueueItemResponse struct {
	// Frame-counter for the enqueued payload.
	// it allways zero if get_fcnt in request is false
	FCnt uint32 `protobuf:"varint,1,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	// downlink message ID (UUID string). ! Generated for background tasks !
	MsgId                string   `protobuf:"bytes,2,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnqueueDeviceQueueItemResponse) Reset()         { *m = EnqueueDeviceQueueItemResponse{} }
func (m *EnqueueDeviceQueueItemResponse) String() string { return proto.CompactTextString(m) }
func (*EnqueueDeviceQueueItemResponse) ProtoMessage()    {}
func (*EnqueueDeviceQueueItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bc7c26115164240, []int{3}
}

func (m *EnqueueDeviceQueueItemResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnqueueDeviceQueueItemResponse.Unmarshal(m, b)
}
func (m *EnqueueDeviceQueueItemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnqueueDeviceQueueItemResponse.Marshal(b, m, deterministic)
}
func (m *EnqueueDeviceQueueItemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnqueueDeviceQueueItemResponse.Merge(m, src)
}
func (m *EnqueueDeviceQueueItemResponse) XXX_Size() int {
	return xxx_messageInfo_EnqueueDeviceQueueItemResponse.Size(m)
}
func (m *EnqueueDeviceQueueItemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EnqueueDeviceQueueItemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EnqueueDeviceQueueItemResponse proto.InternalMessageInfo

func (m *EnqueueDeviceQueueItemResponse) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

func (m *EnqueueDeviceQueueItemResponse) GetMsgId() string {
	if m != nil {
		return m.MsgId
	}
	return ""
}

type FlushDeviceQueueRequest struct {
	// Device EUI (HEX encoded).
	DevEui               string   `protobuf:"bytes,1,opt,name=dev_eui,json=devEUI,proto3" json:"dev_eui,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlushDeviceQueueRequest) Reset()         { *m = FlushDeviceQueueRequest{} }
func (m *FlushDeviceQueueRequest) String() string { return proto.CompactTextString(m) }
func (*FlushDeviceQueueRequest) ProtoMessage()    {}
func (*FlushDeviceQueueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bc7c26115164240, []int{4}
}

func (m *FlushDeviceQueueRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlushDeviceQueueRequest.Unmarshal(m, b)
}
func (m *FlushDeviceQueueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlushDeviceQueueRequest.Marshal(b, m, deterministic)
}
func (m *FlushDeviceQueueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlushDeviceQueueRequest.Merge(m, src)
}
func (m *FlushDeviceQueueRequest) XXX_Size() int {
	return xxx_messageInfo_FlushDeviceQueueRequest.Size(m)
}
func (m *FlushDeviceQueueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FlushDeviceQueueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FlushDeviceQueueRequest proto.InternalMessageInfo

func (m *FlushDeviceQueueRequest) GetDevEui() string {
	if m != nil {
		return m.DevEui
	}
	return ""
}

type ListDeviceQueueItemsRequest struct {
	// Device EUI (HEX encoded).
	DevEui string `protobuf:"bytes,1,opt,name=dev_eui,json=devEUI,proto3" json:"dev_eui,omitempty"`
	// Return only the count, not the result-set.
	CountOnly            bool     `protobuf:"varint,2,opt,name=count_only,json=countOnly,proto3" json:"count_only,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListDeviceQueueItemsRequest) Reset()         { *m = ListDeviceQueueItemsRequest{} }
func (m *ListDeviceQueueItemsRequest) String() string { return proto.CompactTextString(m) }
func (*ListDeviceQueueItemsRequest) ProtoMessage()    {}
func (*ListDeviceQueueItemsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bc7c26115164240, []int{5}
}

func (m *ListDeviceQueueItemsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDeviceQueueItemsRequest.Unmarshal(m, b)
}
func (m *ListDeviceQueueItemsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDeviceQueueItemsRequest.Marshal(b, m, deterministic)
}
func (m *ListDeviceQueueItemsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDeviceQueueItemsRequest.Merge(m, src)
}
func (m *ListDeviceQueueItemsRequest) XXX_Size() int {
	return xxx_messageInfo_ListDeviceQueueItemsRequest.Size(m)
}
func (m *ListDeviceQueueItemsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDeviceQueueItemsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListDeviceQueueItemsRequest proto.InternalMessageInfo

func (m *ListDeviceQueueItemsRequest) GetDevEui() string {
	if m != nil {
		return m.DevEui
	}
	return ""
}

func (m *ListDeviceQueueItemsRequest) GetCountOnly() bool {
	if m != nil {
		return m.CountOnly
	}
	return false
}

type ListDeviceQueueItemsResponse struct {
	// The device queue items.
	DeviceQueueItems []*DeviceQueueItem `protobuf:"bytes,1,rep,name=device_queue_items,json=deviceQueueItems,proto3" json:"device_queue_items,omitempty"`
	// Total number of items in the queue.
	TotalCount           uint32   `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListDeviceQueueItemsResponse) Reset()         { *m = ListDeviceQueueItemsResponse{} }
func (m *ListDeviceQueueItemsResponse) String() string { return proto.CompactTextString(m) }
func (*ListDeviceQueueItemsResponse) ProtoMessage()    {}
func (*ListDeviceQueueItemsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bc7c26115164240, []int{6}
}

func (m *ListDeviceQueueItemsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListDeviceQueueItemsResponse.Unmarshal(m, b)
}
func (m *ListDeviceQueueItemsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListDeviceQueueItemsResponse.Marshal(b, m, deterministic)
}
func (m *ListDeviceQueueItemsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListDeviceQueueItemsResponse.Merge(m, src)
}
func (m *ListDeviceQueueItemsResponse) XXX_Size() int {
	return xxx_messageInfo_ListDeviceQueueItemsResponse.Size(m)
}
func (m *ListDeviceQueueItemsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListDeviceQueueItemsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListDeviceQueueItemsResponse proto.InternalMessageInfo

func (m *ListDeviceQueueItemsResponse) GetDeviceQueueItems() []*DeviceQueueItem {
	if m != nil {
		return m.DeviceQueueItems
	}
	return nil
}

func (m *ListDeviceQueueItemsResponse) GetTotalCount() uint32 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

type EnqueueDeviceQueueActilityItemRequest struct {
	// Device EUI (HEX encoded).
	DevEui string `protobuf:"bytes,1,opt,name=dev_eui,json=devEUI,proto3" json:"dev_eui,omitempty"`
	// Set this to true when an acknowledgement from the device is required.
	// Please note that this must not be used to guarantee a delivery.
	ConfirmDownlink bool `protobuf:"varint,2,opt,name=confirm_downlink,json=confirmDownlink,proto3" json:"confirm_downlink,omitempty"`
	// Indicates to flush the LRC downlink queue before adding the new message to the queue.
	// Default is false.
	FlushDownlinkQueue bool `protobuf:"varint,3,opt,name=flush_downlink_queue,json=flushDownlinkQueue,proto3" json:"flush_downlink_queue,omitempty"`
	// Payload of the message in hexadecimal format.
	PayloadHex string `protobuf:"bytes,4,opt,name=payload_hex,json=payloadHex,proto3" json:"payload_hex,omitempty"`
	// LoRa port(s) targetted by the message.
	TargetPorts string `protobuf:"bytes,5,opt,name=target_ports,json=targetPorts,proto3" json:"target_ports,omitempty"`
	// Downlink frame-counter.
	// This will be automatically set on enquue.
	// If you encrypt data on your side - specify the fCnt here
	FCnt uint32 `protobuf:"varint,6,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	// Time to live (in seconds). You canspecify the maximum time in queue for the item
	Ttl uint32 `protobuf:"varint,7,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// !Please do not call method in parallel when it set to true!
	// If set to true - enqueue on air . If false - background enqueue
	// Set this to true when you really need to recieve current fCnt
	// ! CAUTION ! The mode is very slow!
	// It has to connect to NS, get current fcnt,
	// then encrypt payload and put it to ns queue.
	// If you have to onboard a lot of downlinks to the server
	// as fast as possible - please DO NOT use the feature!
	// If you set it to false the errors will be sent as ErrorEvents
	// via messages that A.S. sends to your applications
	// you can match it according to the downlink-uuid recieved from the answer.
	GetFcnt              bool     `protobuf:"varint,8,opt,name=get_fcnt,json=getFcnt,proto3" json:"get_fcnt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnqueueDeviceQueueActilityItemRequest) Reset()         { *m = EnqueueDeviceQueueActilityItemRequest{} }
func (m *EnqueueDeviceQueueActilityItemRequest) String() string { return proto.CompactTextString(m) }
func (*EnqueueDeviceQueueActilityItemRequest) ProtoMessage()    {}
func (*EnqueueDeviceQueueActilityItemRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bc7c26115164240, []int{7}
}

func (m *EnqueueDeviceQueueActilityItemRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnqueueDeviceQueueActilityItemRequest.Unmarshal(m, b)
}
func (m *EnqueueDeviceQueueActilityItemRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnqueueDeviceQueueActilityItemRequest.Marshal(b, m, deterministic)
}
func (m *EnqueueDeviceQueueActilityItemRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnqueueDeviceQueueActilityItemRequest.Merge(m, src)
}
func (m *EnqueueDeviceQueueActilityItemRequest) XXX_Size() int {
	return xxx_messageInfo_EnqueueDeviceQueueActilityItemRequest.Size(m)
}
func (m *EnqueueDeviceQueueActilityItemRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EnqueueDeviceQueueActilityItemRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EnqueueDeviceQueueActilityItemRequest proto.InternalMessageInfo

func (m *EnqueueDeviceQueueActilityItemRequest) GetDevEui() string {
	if m != nil {
		return m.DevEui
	}
	return ""
}

func (m *EnqueueDeviceQueueActilityItemRequest) GetConfirmDownlink() bool {
	if m != nil {
		return m.ConfirmDownlink
	}
	return false
}

func (m *EnqueueDeviceQueueActilityItemRequest) GetFlushDownlinkQueue() bool {
	if m != nil {
		return m.FlushDownlinkQueue
	}
	return false
}

func (m *EnqueueDeviceQueueActilityItemRequest) GetPayloadHex() string {
	if m != nil {
		return m.PayloadHex
	}
	return ""
}

func (m *EnqueueDeviceQueueActilityItemRequest) GetTargetPorts() string {
	if m != nil {
		return m.TargetPorts
	}
	return ""
}

func (m *EnqueueDeviceQueueActilityItemRequest) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

func (m *EnqueueDeviceQueueActilityItemRequest) GetTtl() uint32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *EnqueueDeviceQueueActilityItemRequest) GetGetFcnt() bool {
	if m != nil {
		return m.GetFcnt
	}
	return false
}

type EnqueueDeviceQueueActilityItemResponse struct {
	// Frame-counter for the enqueued payload.
	ConfirmDownlink    bool   `protobuf:"varint,1,opt,name=confirm_downlink,json=confirmDownlink,proto3" json:"confirm_downlink,omitempty"`
	FlushDownlinkQueue bool   `protobuf:"varint,2,opt,name=flush_downlink_queue,json=flushDownlinkQueue,proto3" json:"flush_downlink_queue,omitempty"`
	PayloadHex         string `protobuf:"bytes,3,opt,name=payload_hex,json=payloadHex,proto3" json:"payload_hex,omitempty"`
	TargetPorts        string `protobuf:"bytes,4,opt,name=target_ports,json=targetPorts,proto3" json:"target_ports,omitempty"`
	Status             string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	// downlink message ID (UUID string). ! Generated for background tasks !
	MsgId                string   `protobuf:"bytes,6,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EnqueueDeviceQueueActilityItemResponse) Reset() {
	*m = EnqueueDeviceQueueActilityItemResponse{}
}
func (m *EnqueueDeviceQueueActilityItemResponse) String() string { return proto.CompactTextString(m) }
func (*EnqueueDeviceQueueActilityItemResponse) ProtoMessage()    {}
func (*EnqueueDeviceQueueActilityItemResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bc7c26115164240, []int{8}
}

func (m *EnqueueDeviceQueueActilityItemResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EnqueueDeviceQueueActilityItemResponse.Unmarshal(m, b)
}
func (m *EnqueueDeviceQueueActilityItemResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EnqueueDeviceQueueActilityItemResponse.Marshal(b, m, deterministic)
}
func (m *EnqueueDeviceQueueActilityItemResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EnqueueDeviceQueueActilityItemResponse.Merge(m, src)
}
func (m *EnqueueDeviceQueueActilityItemResponse) XXX_Size() int {
	return xxx_messageInfo_EnqueueDeviceQueueActilityItemResponse.Size(m)
}
func (m *EnqueueDeviceQueueActilityItemResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EnqueueDeviceQueueActilityItemResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EnqueueDeviceQueueActilityItemResponse proto.InternalMessageInfo

func (m *EnqueueDeviceQueueActilityItemResponse) GetConfirmDownlink() bool {
	if m != nil {
		return m.ConfirmDownlink
	}
	return false
}

func (m *EnqueueDeviceQueueActilityItemResponse) GetFlushDownlinkQueue() bool {
	if m != nil {
		return m.FlushDownlinkQueue
	}
	return false
}

func (m *EnqueueDeviceQueueActilityItemResponse) GetPayloadHex() string {
	if m != nil {
		return m.PayloadHex
	}
	return ""
}

func (m *EnqueueDeviceQueueActilityItemResponse) GetTargetPorts() string {
	if m != nil {
		return m.TargetPorts
	}
	return ""
}

func (m *EnqueueDeviceQueueActilityItemResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *EnqueueDeviceQueueActilityItemResponse) GetMsgId() string {
	if m != nil {
		return m.MsgId
	}
	return ""
}

type GetNextDownlinkFCntRequest struct {
	// Device EUI (HEX encoded).
	DevEui               string   `protobuf:"bytes,1,opt,name=dev_eui,json=devEUI,proto3" json:"dev_eui,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNextDownlinkFCntRequest) Reset()         { *m = GetNextDownlinkFCntRequest{} }
func (m *GetNextDownlinkFCntRequest) String() string { return proto.CompactTextString(m) }
func (*GetNextDownlinkFCntRequest) ProtoMessage()    {}
func (*GetNextDownlinkFCntRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bc7c26115164240, []int{9}
}

func (m *GetNextDownlinkFCntRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNextDownlinkFCntRequest.Unmarshal(m, b)
}
func (m *GetNextDownlinkFCntRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNextDownlinkFCntRequest.Marshal(b, m, deterministic)
}
func (m *GetNextDownlinkFCntRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNextDownlinkFCntRequest.Merge(m, src)
}
func (m *GetNextDownlinkFCntRequest) XXX_Size() int {
	return xxx_messageInfo_GetNextDownlinkFCntRequest.Size(m)
}
func (m *GetNextDownlinkFCntRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNextDownlinkFCntRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetNextDownlinkFCntRequest proto.InternalMessageInfo

func (m *GetNextDownlinkFCntRequest) GetDevEui() string {
	if m != nil {
		return m.DevEui
	}
	return ""
}

type GetNextDownlinkFCntResponse struct {
	// Next downlink frame-counter.
	FCnt                 uint32   `protobuf:"varint,1,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNextDownlinkFCntResponse) Reset()         { *m = GetNextDownlinkFCntResponse{} }
func (m *GetNextDownlinkFCntResponse) String() string { return proto.CompactTextString(m) }
func (*GetNextDownlinkFCntResponse) ProtoMessage()    {}
func (*GetNextDownlinkFCntResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6bc7c26115164240, []int{10}
}

func (m *GetNextDownlinkFCntResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNextDownlinkFCntResponse.Unmarshal(m, b)
}
func (m *GetNextDownlinkFCntResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNextDownlinkFCntResponse.Marshal(b, m, deterministic)
}
func (m *GetNextDownlinkFCntResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNextDownlinkFCntResponse.Merge(m, src)
}
func (m *GetNextDownlinkFCntResponse) XXX_Size() int {
	return xxx_messageInfo_GetNextDownlinkFCntResponse.Size(m)
}
func (m *GetNextDownlinkFCntResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNextDownlinkFCntResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetNextDownlinkFCntResponse proto.InternalMessageInfo

func (m *GetNextDownlinkFCntResponse) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

func init() {
	proto.RegisterType((*DeviceQueueItem)(nil), "api.DeviceQueueItem")
	proto.RegisterType((*DownlinkItemHex)(nil), "api.DownlinkItemHex")
	proto.RegisterType((*EnqueueDeviceQueueItemRequest)(nil), "api.EnqueueDeviceQueueItemRequest")
	proto.RegisterType((*EnqueueDeviceQueueItemResponse)(nil), "api.EnqueueDeviceQueueItemResponse")
	proto.RegisterType((*FlushDeviceQueueRequest)(nil), "api.FlushDeviceQueueRequest")
	proto.RegisterType((*ListDeviceQueueItemsRequest)(nil), "api.ListDeviceQueueItemsRequest")
	proto.RegisterType((*ListDeviceQueueItemsResponse)(nil), "api.ListDeviceQueueItemsResponse")
	proto.RegisterType((*EnqueueDeviceQueueActilityItemRequest)(nil), "api.EnqueueDeviceQueueActilityItemRequest")
	proto.RegisterType((*EnqueueDeviceQueueActilityItemResponse)(nil), "api.EnqueueDeviceQueueActilityItemResponse")
	proto.RegisterType((*GetNextDownlinkFCntRequest)(nil), "api.GetNextDownlinkFCntRequest")
	proto.RegisterType((*GetNextDownlinkFCntResponse)(nil), "api.GetNextDownlinkFCntResponse")
}

func init() {
	proto.RegisterFile("as/external/api/deviceQueue.proto", fileDescriptor_6bc7c26115164240)
}

var fileDescriptor_6bc7c26115164240 = []byte{
	// 974 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x96, 0xd1, 0x72, 0xdb, 0x44,
	0x17, 0xc7, 0x47, 0x4e, 0xec, 0xd8, 0xc7, 0xe9, 0x38, 0xdf, 0x36, 0x5f, 0x2b, 0x1c, 0xa7, 0x71,
	0x54, 0x60, 0x4c, 0x18, 0x24, 0xc6, 0x99, 0x0e, 0x53, 0x6e, 0x20, 0x49, 0x13, 0xc8, 0x4c, 0x87,
	0x06, 0x43, 0x6f, 0xb8, 0xd1, 0xac, 0xa5, 0xb5, 0xa3, 0x56, 0xd2, 0x2a, 0xda, 0xa3, 0x34, 0x1e,
	0xe8, 0x0d, 0x5c, 0x73, 0xc5, 0x03, 0x00, 0xc3, 0x23, 0xf1, 0x0a, 0x5c, 0xf2, 0x00, 0x5c, 0x32,
	0xbb, 0x5e, 0x61, 0xc7, 0xb6, 0xec, 0xf6, 0x4e, 0x3a, 0x7b, 0x76, 0xcf, 0x39, 0xbf, 0xfd, 0x9f,
	0x23, 0xc1, 0x3e, 0x15, 0x0e, 0xbb, 0x41, 0x96, 0xc6, 0x34, 0x74, 0x68, 0x12, 0x38, 0x3e, 0xbb,
	0x0e, 0x3c, 0xf6, 0x75, 0xc6, 0x32, 0x66, 0x27, 0x29, 0x47, 0x4e, 0xd6, 0x68, 0x12, 0x34, 0x5b,
	0x43, 0xce, 0x87, 0x21, 0x53, 0x2e, 0x34, 0x8e, 0x39, 0x52, 0x0c, 0x78, 0x2c, 0xc6, 0x2e, 0xcd,
	0x1d, 0xbd, 0xaa, 0xde, 0xfa, 0xd9, 0xc0, 0x61, 0x51, 0x82, 0x23, 0xbd, 0xb8, 0x37, 0xbb, 0x88,
	0x41, 0xc4, 0x04, 0xd2, 0x28, 0x19, 0x3b, 0x58, 0x7f, 0x97, 0xa0, 0xf1, 0x64, 0x12, 0xf6, 0x1c,
	0x59, 0x44, 0xee, 0xc3, 0x86, 0xcf, 0xae, 0x5d, 0x96, 0x05, 0xa6, 0xd1, 0x36, 0x3a, 0xb5, 0x5e,
	0xc5, 0x67, 0xd7, 0xa7, 0xcf, 0xcf, 0x49, 0x0b, 0x6a, 0x1e, 0x8f, 0x07, 0x41, 0x1a, 0x31, 0xdf,
	0x2c, 0xb5, 0x8d, 0x4e, 0xb5, 0x37, 0x31, 0x90, 0xbb, 0x50, 0x1e, 0xb8, 0x5e, 0x8c, 0x66, 0xa5,
	0x6d, 0x74, 0xee, 0xf4, 0xd6, 0x07, 0x27, 0x31, 0x92, 0xff, 0x43, 0x65, 0xe0, 0x26, 0x3c, 0x45,
	0x73, 0x4d, 0x59, 0xcb, 0x83, 0x0b, 0x9e, 0x22, 0x21, 0xb0, 0xee, 0x53, 0xa4, 0xe6, 0x7a, 0xdb,
	0xe8, 0x6c, 0xf6, 0xd4, 0x33, 0xd9, 0x83, 0xfa, 0x0b, 0xc1, 0x63, 0x97, 0xf7, 0x5f, 0x30, 0x0f,
	0xcd, 0xb2, 0x0a, 0x0d, 0xd2, 0xf4, 0x4c, 0x59, 0xc8, 0x16, 0xac, 0x21, 0x86, 0xe6, 0x86, 0x3a,
	0x48, 0x3e, 0x92, 0x5d, 0x80, 0x88, 0x09, 0x41, 0x87, 0xcc, 0x0d, 0x7c, 0xb3, 0xaa, 0x76, 0xd4,
	0xb4, 0xe5, 0xdc, 0x27, 0xdb, 0x50, 0xe6, 0xaf, 0x62, 0x96, 0x9a, 0x35, 0xb5, 0x32, 0x7e, 0x21,
	0x8f, 0x01, 0xbc, 0x94, 0x51, 0x64, 0xbe, 0x4b, 0xd1, 0x84, 0xb6, 0xd1, 0xa9, 0x77, 0x9b, 0xf6,
	0x18, 0x94, 0x9d, 0x83, 0xb2, 0xbf, 0xcd, 0x41, 0xf5, 0x6a, 0xda, 0xfb, 0x08, 0xc9, 0x67, 0x70,
	0x47, 0x02, 0xe4, 0x19, 0xba, 0x74, 0x80, 0x2c, 0x35, 0xeb, 0x2b, 0x77, 0x6f, 0xea, 0x0d, 0x47,
	0xd2, 0xdf, 0xfa, 0xcd, 0x80, 0xc6, 0x13, 0xfe, 0x2a, 0x0e, 0x83, 0xf8, 0xa5, 0x64, 0xfd, 0x25,
	0xbb, 0xb9, 0x4d, 0xd5, 0x28, 0xa4, 0x5a, 0x7a, 0x3b, 0xaa, 0x35, 0x4d, 0x55, 0x43, 0x2b, 0x17,
	0x41, 0xab, 0xcc, 0x40, 0xb3, 0x7e, 0x80, 0xdd, 0xd3, 0xf8, 0x4a, 0x8a, 0x61, 0x46, 0x17, 0x3d,
	0x76, 0x95, 0x31, 0x81, 0xe4, 0x73, 0xf8, 0xdf, 0x58, 0xa8, 0xae, 0xf2, 0x72, 0x03, 0x64, 0x91,
	0xca, 0xbb, 0xde, 0xdd, 0xb6, 0x69, 0x12, 0xd8, 0xb3, 0xfb, 0x1a, 0xfe, 0x8c, 0xc0, 0xde, 0x81,
	0xea, 0x90, 0xa1, 0x3b, 0xc8, 0xcb, 0xaa, 0xf6, 0x36, 0x86, 0x0c, 0xcf, 0xbc, 0x18, 0xad, 0xa7,
	0xf0, 0xa0, 0x28, 0xba, 0x48, 0x78, 0x2c, 0xd8, 0x04, 0x88, 0x71, 0x1b, 0x48, 0x24, 0x86, 0xb2,
	0x9e, 0xd2, 0xf8, 0xaa, 0x23, 0x31, 0x3c, 0xf7, 0xad, 0x2e, 0xdc, 0x3f, 0x0b, 0x33, 0x71, 0x39,
	0x75, 0x56, 0x5e, 0x45, 0x91, 0xc8, 0xad, 0xe7, 0xb0, 0xf3, 0x34, 0x10, 0x38, 0x13, 0x5e, 0xac,
	0xda, 0x27, 0xb1, 0x7a, 0x3c, 0x8b, 0xd1, 0xe5, 0x71, 0x38, 0x9a, 0x74, 0x47, 0x16, 0xe3, 0xb3,
	0x38, 0x1c, 0x59, 0x3f, 0x19, 0xd0, 0x5a, 0x7c, 0xae, 0xae, 0xeb, 0x18, 0xc8, 0x1c, 0x56, 0x61,
	0x1a, 0xed, 0xb5, 0x42, 0xae, 0x5b, 0x33, 0x5c, 0x85, 0x6c, 0x21, 0xe4, 0x48, 0x43, 0x57, 0xc5,
	0xd5, 0x92, 0x01, 0x65, 0x3a, 0x91, 0x16, 0xeb, 0x8f, 0x12, 0xbc, 0x37, 0xcf, 0xf7, 0xc8, 0xc3,
	0x20, 0x0c, 0x70, 0x34, 0x7d, 0xcb, 0x85, 0x75, 0x7e, 0x00, 0x5b, 0x5a, 0x9d, 0xae, 0xaf, 0x95,
	0xac, 0xab, 0x6d, 0x68, 0x7b, 0x2e, 0x70, 0xf2, 0x31, 0x6c, 0x0f, 0x24, 0xfe, 0xff, 0x1c, 0xc7,
	0xa5, 0x29, 0xd1, 0x56, 0x7b, 0x44, 0xad, 0xe5, 0xce, 0x2a, 0x11, 0x59, 0x40, 0x42, 0x47, 0x21,
	0xa7, 0xbe, 0x7b, 0xc9, 0x6e, 0xb4, 0x90, 0x41, 0x9b, 0x64, 0xb3, 0xec, 0xc3, 0x26, 0xd2, 0x54,
	0xaa, 0x47, 0xca, 0x5f, 0xe8, 0x29, 0x51, 0x1f, 0xdb, 0x64, 0x13, 0x88, 0xc5, 0x73, 0x68, 0x7e,
	0x76, 0x4c, 0x8b, 0xb0, 0x7a, 0x5b, 0x84, 0xff, 0x18, 0xf0, 0xfe, 0x2a, 0x4a, 0xfa, 0xd6, 0x16,
	0xd1, 0x30, 0xde, 0x8e, 0x46, 0xe9, 0x4d, 0x69, 0xac, 0xad, 0xa4, 0xb1, 0x3e, 0x4f, 0xe3, 0x1e,
	0x54, 0x04, 0x52, 0xcc, 0x72, 0x54, 0xfa, 0x6d, 0xaa, 0x63, 0x2a, 0xd3, 0x1d, 0xf3, 0x08, 0x9a,
	0x5f, 0x30, 0xfc, 0x8a, 0xdd, 0x60, 0x9e, 0xca, 0xd9, 0x49, 0x8c, 0x2b, 0x9b, 0xa6, 0x0b, 0x3b,
	0x0b, 0xb7, 0x2d, 0xe9, 0xd9, 0xee, 0xaf, 0x65, 0x20, 0x53, 0x78, 0xbf, 0x61, 0xa9, 0x7c, 0x26,
	0x3f, 0x1b, 0xb0, 0xa1, 0xe1, 0x13, 0x4b, 0xe9, 0x7e, 0xe9, 0x38, 0x6a, 0x3e, 0x5c, 0xea, 0x33,
	0x4e, 0xc0, 0x7a, 0xfc, 0xe3, 0x9f, 0x7f, 0xfd, 0x52, 0x3a, 0xb4, 0xec, 0xa9, 0xef, 0xac, 0x70,
	0xbe, 0x9f, 0x6b, 0x38, 0x5b, 0x97, 0xf7, 0xda, 0x51, 0xb6, 0x4f, 0x8d, 0x03, 0xe2, 0x41, 0x59,
	0xcd, 0x10, 0xd2, 0x52, 0x81, 0x0a, 0xe6, 0x49, 0xf3, 0xde, 0xdc, 0x37, 0xe0, 0x54, 0x7e, 0x87,
	0xad, 0x77, 0x55, 0xe4, 0x07, 0x07, 0xad, 0xb9, 0xc8, 0x53, 0x71, 0xc8, 0x15, 0xac, 0xcb, 0xe1,
	0x40, 0xda, 0x2a, 0xc6, 0x92, 0xf9, 0xd3, 0xdc, 0x5f, 0xe2, 0xa1, 0x8b, 0xd5, 0x21, 0xc9, 0xf2,
	0x90, 0xbf, 0x1b, 0xd0, 0xc8, 0x25, 0x9d, 0xf3, 0x3e, 0x28, 0x60, 0xb9, 0x60, 0x40, 0x34, 0x3f,
	0x7c, 0x23, 0x5f, 0x9d, 0xd2, 0x23, 0x95, 0x92, 0x63, 0x1d, 0x2c, 0x4b, 0xc9, 0xa1, 0x7a, 0xab,
	0xc0, 0x51, 0xa8, 0xd8, 0xbf, 0x86, 0xbb, 0x0b, 0x64, 0x45, 0xf6, 0x54, 0xe8, 0x62, 0x9d, 0x36,
	0xdb, 0xc5, 0x0e, 0x3a, 0xa1, 0x87, 0x2a, 0xa1, 0x5d, 0xb2, 0x53, 0x90, 0x90, 0x1c, 0x0b, 0xc7,
	0x09, 0xec, 0x07, 0xdc, 0xf6, 0x2e, 0x83, 0x34, 0x11, 0x48, 0xbd, 0x97, 0xea, 0x54, 0x2a, 0xec,
	0xfc, 0xa7, 0x4d, 0xbe, 0x1f, 0x6f, 0x4d, 0xd5, 0x7e, 0x21, 0xef, 0xfe, 0xc2, 0xf8, 0xee, 0x93,
	0x61, 0x80, 0x97, 0x59, 0xdf, 0xf6, 0x78, 0xe4, 0xf4, 0x53, 0xee, 0x51, 0x9a, 0x3a, 0x93, 0x63,
	0x3e, 0x92, 0x21, 0x87, 0xdc, 0xb9, 0x3e, 0x74, 0x66, 0xfe, 0x00, 0xfb, 0x15, 0xa5, 0x9e, 0xc3,
	0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xe3, 0x87, 0xd9, 0x69, 0x1b, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DeviceQueueServiceClient is the client API for DeviceQueueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceQueueServiceClient interface {
	// Enqueue adds the given item to the device-queue.
	Enqueue(ctx context.Context, in *EnqueueDeviceQueueItemRequest, opts ...grpc.CallOption) (*EnqueueDeviceQueueItemResponse, error)
	// Flush flushes the downlink device-queue.
	Flush(ctx context.Context, in *FlushDeviceQueueRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// List lists the items in the device-queue.
	List(ctx context.Context, in *ListDeviceQueueItemsRequest, opts ...grpc.CallOption) (*ListDeviceQueueItemsResponse, error)
	// ActilityEnqueue adds the given item to the device-queue with actility-styled request\response.
	ActilityEnqueue(ctx context.Context, in *EnqueueDeviceQueueActilityItemRequest, opts ...grpc.CallOption) (*EnqueueDeviceQueueActilityItemResponse, error)
	// GetNextDownlinkFCnt returns next downlink f-counter for the device
	// used by clients who encrypt payload data themself
	GetNextDownlinkFCnt(ctx context.Context, in *GetNextDownlinkFCntRequest, opts ...grpc.CallOption) (*GetNextDownlinkFCntResponse, error)
}

type deviceQueueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceQueueServiceClient(cc grpc.ClientConnInterface) DeviceQueueServiceClient {
	return &deviceQueueServiceClient{cc}
}

func (c *deviceQueueServiceClient) Enqueue(ctx context.Context, in *EnqueueDeviceQueueItemRequest, opts ...grpc.CallOption) (*EnqueueDeviceQueueItemResponse, error) {
	out := new(EnqueueDeviceQueueItemResponse)
	err := c.cc.Invoke(ctx, "/api.DeviceQueueService/Enqueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceQueueServiceClient) Flush(ctx context.Context, in *FlushDeviceQueueRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/api.DeviceQueueService/Flush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceQueueServiceClient) List(ctx context.Context, in *ListDeviceQueueItemsRequest, opts ...grpc.CallOption) (*ListDeviceQueueItemsResponse, error) {
	out := new(ListDeviceQueueItemsResponse)
	err := c.cc.Invoke(ctx, "/api.DeviceQueueService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceQueueServiceClient) ActilityEnqueue(ctx context.Context, in *EnqueueDeviceQueueActilityItemRequest, opts ...grpc.CallOption) (*EnqueueDeviceQueueActilityItemResponse, error) {
	out := new(EnqueueDeviceQueueActilityItemResponse)
	err := c.cc.Invoke(ctx, "/api.DeviceQueueService/ActilityEnqueue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceQueueServiceClient) GetNextDownlinkFCnt(ctx context.Context, in *GetNextDownlinkFCntRequest, opts ...grpc.CallOption) (*GetNextDownlinkFCntResponse, error) {
	out := new(GetNextDownlinkFCntResponse)
	err := c.cc.Invoke(ctx, "/api.DeviceQueueService/GetNextDownlinkFCnt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceQueueServiceServer is the server API for DeviceQueueService service.
type DeviceQueueServiceServer interface {
	// Enqueue adds the given item to the device-queue.
	Enqueue(context.Context, *EnqueueDeviceQueueItemRequest) (*EnqueueDeviceQueueItemResponse, error)
	// Flush flushes the downlink device-queue.
	Flush(context.Context, *FlushDeviceQueueRequest) (*empty.Empty, error)
	// List lists the items in the device-queue.
	List(context.Context, *ListDeviceQueueItemsRequest) (*ListDeviceQueueItemsResponse, error)
	// ActilityEnqueue adds the given item to the device-queue with actility-styled request\response.
	ActilityEnqueue(context.Context, *EnqueueDeviceQueueActilityItemRequest) (*EnqueueDeviceQueueActilityItemResponse, error)
	// GetNextDownlinkFCnt returns next downlink f-counter for the device
	// used by clients who encrypt payload data themself
	GetNextDownlinkFCnt(context.Context, *GetNextDownlinkFCntRequest) (*GetNextDownlinkFCntResponse, error)
}

// UnimplementedDeviceQueueServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDeviceQueueServiceServer struct {
}

func (*UnimplementedDeviceQueueServiceServer) Enqueue(ctx context.Context, req *EnqueueDeviceQueueItemRequest) (*EnqueueDeviceQueueItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enqueue not implemented")
}
func (*UnimplementedDeviceQueueServiceServer) Flush(ctx context.Context, req *FlushDeviceQueueRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Flush not implemented")
}
func (*UnimplementedDeviceQueueServiceServer) List(ctx context.Context, req *ListDeviceQueueItemsRequest) (*ListDeviceQueueItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedDeviceQueueServiceServer) ActilityEnqueue(ctx context.Context, req *EnqueueDeviceQueueActilityItemRequest) (*EnqueueDeviceQueueActilityItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActilityEnqueue not implemented")
}
func (*UnimplementedDeviceQueueServiceServer) GetNextDownlinkFCnt(ctx context.Context, req *GetNextDownlinkFCntRequest) (*GetNextDownlinkFCntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextDownlinkFCnt not implemented")
}

func RegisterDeviceQueueServiceServer(s *grpc.Server, srv DeviceQueueServiceServer) {
	s.RegisterService(&_DeviceQueueService_serviceDesc, srv)
}

func _DeviceQueueService_Enqueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnqueueDeviceQueueItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceQueueServiceServer).Enqueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DeviceQueueService/Enqueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceQueueServiceServer).Enqueue(ctx, req.(*EnqueueDeviceQueueItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceQueueService_Flush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushDeviceQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceQueueServiceServer).Flush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DeviceQueueService/Flush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceQueueServiceServer).Flush(ctx, req.(*FlushDeviceQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceQueueService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeviceQueueItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceQueueServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DeviceQueueService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceQueueServiceServer).List(ctx, req.(*ListDeviceQueueItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceQueueService_ActilityEnqueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnqueueDeviceQueueActilityItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceQueueServiceServer).ActilityEnqueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DeviceQueueService/ActilityEnqueue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceQueueServiceServer).ActilityEnqueue(ctx, req.(*EnqueueDeviceQueueActilityItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceQueueService_GetNextDownlinkFCnt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextDownlinkFCntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceQueueServiceServer).GetNextDownlinkFCnt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DeviceQueueService/GetNextDownlinkFCnt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceQueueServiceServer).GetNextDownlinkFCnt(ctx, req.(*GetNextDownlinkFCntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeviceQueueService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.DeviceQueueService",
	HandlerType: (*DeviceQueueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Enqueue",
			Handler:    _DeviceQueueService_Enqueue_Handler,
		},
		{
			MethodName: "Flush",
			Handler:    _DeviceQueueService_Flush_Handler,
		},
		{
			MethodName: "List",
			Handler:    _DeviceQueueService_List_Handler,
		},
		{
			MethodName: "ActilityEnqueue",
			Handler:    _DeviceQueueService_ActilityEnqueue_Handler,
		},
		{
			MethodName: "GetNextDownlinkFCnt",
			Handler:    _DeviceQueueService_GetNextDownlinkFCnt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "as/external/api/deviceQueue.proto",
}
