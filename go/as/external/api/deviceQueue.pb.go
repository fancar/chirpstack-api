// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        (unknown)
// source: as/external/api/deviceQueue.proto

package api

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DeviceQueueItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI (HEX encoded).
	DevEui string `protobuf:"bytes,1,opt,name=dev_eui,json=devEUI,proto3" json:"dev_eui,omitempty"`
	// Set this to true when an acknowledgement from the device is required.
	// Please note that this must not be used to guarantee a delivery.
	Confirmed bool `protobuf:"varint,2,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	// Optional. Downlink frame-counter. Us it only if you encrypt payload byself!
	// By default=0, means it will be set to queue as is and encrypted right before send the dl.
	// Specify the excact next fCnt here. Otherwise it will be droped.
	// if fCnt>0 set, we send data as is, without encryption.
	FCnt uint32 `protobuf:"varint,6,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	// FPort used (must be > 0)
	FPort uint32 `protobuf:"varint,3,opt,name=f_port,json=fPort,proto3" json:"f_port,omitempty"`
	// Base64 encoded data.
	// Or use the json_object field when an application codec has been configured.
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	// Optional. JSON object (string).
	// Only use this when an application codec has been configured that can convert
	// this object into binary form.
	JsonObject string `protobuf:"bytes,5,opt,name=json_object,json=jsonObject,proto3" json:"json_object,omitempty"`
	// Time to live (in seconds). You can specify the maximum time in queue for the item
	Ttl uint32 `protobuf:"varint,7,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// Optional. the id will be generated on server side if empty
	// later on in case of error you'll recieve the message with the ID
	MessageId string `protobuf:"bytes,8,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// Optional field
	Owner string `protobuf:"bytes,9,opt,name=owner,proto3" json:"owner,omitempty"`
	// service field for queue listing
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// service field for queue listing
	TimeoutAfter *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=timeout_after,json=timeoutAfter,proto3" json:"timeout_after,omitempty"`
	// id of the application. Optional. For validation purposes
	ApplicationId uint32 `protobuf:"varint,12,opt,name=application_id,json=applicationID,proto3" json:"application_id,omitempty"`
}

func (x *DeviceQueueItem) Reset() {
	*x = DeviceQueueItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_external_api_deviceQueue_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceQueueItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceQueueItem) ProtoMessage() {}

func (x *DeviceQueueItem) ProtoReflect() protoreflect.Message {
	mi := &file_as_external_api_deviceQueue_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceQueueItem.ProtoReflect.Descriptor instead.
func (*DeviceQueueItem) Descriptor() ([]byte, []int) {
	return file_as_external_api_deviceQueue_proto_rawDescGZIP(), []int{0}
}

func (x *DeviceQueueItem) GetDevEui() string {
	if x != nil {
		return x.DevEui
	}
	return ""
}

func (x *DeviceQueueItem) GetConfirmed() bool {
	if x != nil {
		return x.Confirmed
	}
	return false
}

func (x *DeviceQueueItem) GetFCnt() uint32 {
	if x != nil {
		return x.FCnt
	}
	return 0
}

func (x *DeviceQueueItem) GetFPort() uint32 {
	if x != nil {
		return x.FPort
	}
	return 0
}

func (x *DeviceQueueItem) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DeviceQueueItem) GetJsonObject() string {
	if x != nil {
		return x.JsonObject
	}
	return ""
}

func (x *DeviceQueueItem) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *DeviceQueueItem) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *DeviceQueueItem) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *DeviceQueueItem) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DeviceQueueItem) GetTimeoutAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeoutAfter
	}
	return nil
}

func (x *DeviceQueueItem) GetApplicationId() uint32 {
	if x != nil {
		return x.ApplicationId
	}
	return 0
}

// DownlinkItemHex data payload as hex-string
type DownlinkItemHex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Set this to true when an acknowledgement from the device is required.
	// Please note that this must not be used to guarantee a delivery.
	Confirmed bool `protobuf:"varint,1,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	// Optional. Downlink frame-counter.
	// This will be automatically set on enquue.
	// If you encrypt data on your side - specify the fCnt here
	FCnt uint32 `protobuf:"varint,2,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	// FPort used (must be > 0)
	FPort uint32 `protobuf:"varint,3,opt,name=f_port,json=fPort,proto3" json:"f_port,omitempty"`
	// hex-encoded string
	Data string `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	// Optional. Time to live (in seconds). You can specify the maximum time in queue for the item
	Ttl uint32 `protobuf:"varint,5,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// Optional. the id will be generated on server side if empty
	// later on in case of error you'll recieve the message with the ID
	MessageId string `protobuf:"bytes,6,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *DownlinkItemHex) Reset() {
	*x = DownlinkItemHex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_external_api_deviceQueue_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownlinkItemHex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownlinkItemHex) ProtoMessage() {}

func (x *DownlinkItemHex) ProtoReflect() protoreflect.Message {
	mi := &file_as_external_api_deviceQueue_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownlinkItemHex.ProtoReflect.Descriptor instead.
func (*DownlinkItemHex) Descriptor() ([]byte, []int) {
	return file_as_external_api_deviceQueue_proto_rawDescGZIP(), []int{1}
}

func (x *DownlinkItemHex) GetConfirmed() bool {
	if x != nil {
		return x.Confirmed
	}
	return false
}

func (x *DownlinkItemHex) GetFCnt() uint32 {
	if x != nil {
		return x.FCnt
	}
	return 0
}

func (x *DownlinkItemHex) GetFPort() uint32 {
	if x != nil {
		return x.FPort
	}
	return 0
}

func (x *DownlinkItemHex) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

func (x *DownlinkItemHex) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *DownlinkItemHex) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

type EnqueueDeviceQueueItemHexRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI (HEX encoded).
	DevEui string `protobuf:"bytes,1,opt,name=dev_eui,json=devEUI,proto3" json:"dev_eui,omitempty"`
	// Queue-item object to enqueue.
	DeviceQueueItem *DownlinkItemHex `protobuf:"bytes,2,opt,name=device_queue_item,json=deviceQueueItem,proto3" json:"device_queue_item,omitempty"`
	// ! CAUTION !
	// Set this to true when you really need to recieve next fCnt
	// or you want to know the enqueue-status immediately (eg development purposes)
	// ! Please do not call the method in parallel if the flag set it to true.
	// It can be painfully slow.
	// The flag basicaly means 'put it right into queue'.
	// ! The next fCnt be returned only if you set f_cnt parmeter.
	// Otherwise it allways be 0.
	// If you set it to false. It will be processed asynchronously.
	// In case of process with error - it will be sent as ErrorEvents via you apps.
	// You can match it by the message_id parameter.
	GetFcnt bool `protobuf:"varint,3,opt,name=get_fcnt,json=getFcnt,proto3" json:"get_fcnt,omitempty"`
}

func (x *EnqueueDeviceQueueItemHexRequest) Reset() {
	*x = EnqueueDeviceQueueItemHexRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_external_api_deviceQueue_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnqueueDeviceQueueItemHexRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueDeviceQueueItemHexRequest) ProtoMessage() {}

func (x *EnqueueDeviceQueueItemHexRequest) ProtoReflect() protoreflect.Message {
	mi := &file_as_external_api_deviceQueue_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueDeviceQueueItemHexRequest.ProtoReflect.Descriptor instead.
func (*EnqueueDeviceQueueItemHexRequest) Descriptor() ([]byte, []int) {
	return file_as_external_api_deviceQueue_proto_rawDescGZIP(), []int{2}
}

func (x *EnqueueDeviceQueueItemHexRequest) GetDevEui() string {
	if x != nil {
		return x.DevEui
	}
	return ""
}

func (x *EnqueueDeviceQueueItemHexRequest) GetDeviceQueueItem() *DownlinkItemHex {
	if x != nil {
		return x.DeviceQueueItem
	}
	return nil
}

func (x *EnqueueDeviceQueueItemHexRequest) GetGetFcnt() bool {
	if x != nil {
		return x.GetFcnt
	}
	return false
}

type EnqueueDeviceQueueItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Queue-item object to enqueue.
	DeviceQueueItem *DeviceQueueItem `protobuf:"bytes,1,opt,name=device_queue_item,json=deviceQueueItem,proto3" json:"device_queue_item,omitempty"`
	// ! CAUTION !
	// Set this to true when you really need to recieve next fCnt
	// or you want to know the enqueue-status immediately (eg development purposes)
	// ! Please do not call the method in parallel if the flag set it to true.
	// It can be painfully slow.
	// The flag basicaly means 'put it right into queue'.
	// ! The next fCnt be returned only if you set f_cnt parmeter.
	// Otherwise it allways be 0.
	// If you set it to false. It will be processed asynchronously.
	// In case of process with error - it will be sent as ErrorEvents via you apps.
	// You can match it by the message_id parameter.
	GetFcnt bool `protobuf:"varint,2,opt,name=get_fcnt,json=getFcnt,proto3" json:"get_fcnt,omitempty"`
}

func (x *EnqueueDeviceQueueItemRequest) Reset() {
	*x = EnqueueDeviceQueueItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_external_api_deviceQueue_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnqueueDeviceQueueItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueDeviceQueueItemRequest) ProtoMessage() {}

func (x *EnqueueDeviceQueueItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_as_external_api_deviceQueue_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueDeviceQueueItemRequest.ProtoReflect.Descriptor instead.
func (*EnqueueDeviceQueueItemRequest) Descriptor() ([]byte, []int) {
	return file_as_external_api_deviceQueue_proto_rawDescGZIP(), []int{3}
}

func (x *EnqueueDeviceQueueItemRequest) GetDeviceQueueItem() *DeviceQueueItem {
	if x != nil {
		return x.DeviceQueueItem
	}
	return nil
}

func (x *EnqueueDeviceQueueItemRequest) GetGetFcnt() bool {
	if x != nil {
		return x.GetFcnt
	}
	return false
}

type EnqueueDeviceQueueItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Frame-counter for the enqueued payload.
	// it allways zero if get_fcnt in request is false
	FCnt uint32 `protobuf:"varint,1,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	// downlink message ID (UUID string). ! Generated for background tasks !
	MsgId string `protobuf:"bytes,2,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
}

func (x *EnqueueDeviceQueueItemResponse) Reset() {
	*x = EnqueueDeviceQueueItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_external_api_deviceQueue_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnqueueDeviceQueueItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueDeviceQueueItemResponse) ProtoMessage() {}

func (x *EnqueueDeviceQueueItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_as_external_api_deviceQueue_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueDeviceQueueItemResponse.ProtoReflect.Descriptor instead.
func (*EnqueueDeviceQueueItemResponse) Descriptor() ([]byte, []int) {
	return file_as_external_api_deviceQueue_proto_rawDescGZIP(), []int{4}
}

func (x *EnqueueDeviceQueueItemResponse) GetFCnt() uint32 {
	if x != nil {
		return x.FCnt
	}
	return 0
}

func (x *EnqueueDeviceQueueItemResponse) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

type FlushDeviceQueueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI (HEX encoded).
	DevEui string `protobuf:"bytes,1,opt,name=dev_eui,json=devEUI,proto3" json:"dev_eui,omitempty"`
}

func (x *FlushDeviceQueueRequest) Reset() {
	*x = FlushDeviceQueueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_external_api_deviceQueue_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushDeviceQueueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushDeviceQueueRequest) ProtoMessage() {}

func (x *FlushDeviceQueueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_as_external_api_deviceQueue_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushDeviceQueueRequest.ProtoReflect.Descriptor instead.
func (*FlushDeviceQueueRequest) Descriptor() ([]byte, []int) {
	return file_as_external_api_deviceQueue_proto_rawDescGZIP(), []int{5}
}

func (x *FlushDeviceQueueRequest) GetDevEui() string {
	if x != nil {
		return x.DevEui
	}
	return ""
}

type ListDeviceQueueItemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI (HEX encoded).
	DevEui string `protobuf:"bytes,1,opt,name=dev_eui,json=devEUI,proto3" json:"dev_eui,omitempty"`
	// Return only the count, not the result-set.
	CountOnly bool `protobuf:"varint,2,opt,name=count_only,json=countOnly,proto3" json:"count_only,omitempty"`
}

func (x *ListDeviceQueueItemsRequest) Reset() {
	*x = ListDeviceQueueItemsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_external_api_deviceQueue_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeviceQueueItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeviceQueueItemsRequest) ProtoMessage() {}

func (x *ListDeviceQueueItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_as_external_api_deviceQueue_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeviceQueueItemsRequest.ProtoReflect.Descriptor instead.
func (*ListDeviceQueueItemsRequest) Descriptor() ([]byte, []int) {
	return file_as_external_api_deviceQueue_proto_rawDescGZIP(), []int{6}
}

func (x *ListDeviceQueueItemsRequest) GetDevEui() string {
	if x != nil {
		return x.DevEui
	}
	return ""
}

func (x *ListDeviceQueueItemsRequest) GetCountOnly() bool {
	if x != nil {
		return x.CountOnly
	}
	return false
}

type ListDeviceQueueItemsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The device queue items.
	DeviceQueueItems []*DeviceQueueItem `protobuf:"bytes,1,rep,name=device_queue_items,json=deviceQueueItems,proto3" json:"device_queue_items,omitempty"`
	// Total number of items in the queue.
	TotalCount uint32 `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *ListDeviceQueueItemsResponse) Reset() {
	*x = ListDeviceQueueItemsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_external_api_deviceQueue_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDeviceQueueItemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDeviceQueueItemsResponse) ProtoMessage() {}

func (x *ListDeviceQueueItemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_as_external_api_deviceQueue_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDeviceQueueItemsResponse.ProtoReflect.Descriptor instead.
func (*ListDeviceQueueItemsResponse) Descriptor() ([]byte, []int) {
	return file_as_external_api_deviceQueue_proto_rawDescGZIP(), []int{7}
}

func (x *ListDeviceQueueItemsResponse) GetDeviceQueueItems() []*DeviceQueueItem {
	if x != nil {
		return x.DeviceQueueItems
	}
	return nil
}

func (x *ListDeviceQueueItemsResponse) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type EnqueueDeviceQueueActilityItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI (HEX encoded).
	DevEui string `protobuf:"bytes,1,opt,name=dev_eui,json=devEUI,proto3" json:"dev_eui,omitempty"`
	// Set this to true when an acknowledgement from the device is required.
	// Please note that this must not be used to guarantee a delivery.
	ConfirmDownlink bool `protobuf:"varint,2,opt,name=confirm_downlink,json=confirmDownlink,proto3" json:"confirm_downlink,omitempty"`
	// Indicates to flush the LRC downlink queue before adding the new message to the queue.
	// Default is false.
	FlushDownlinkQueue bool `protobuf:"varint,3,opt,name=flush_downlink_queue,json=flushDownlinkQueue,proto3" json:"flush_downlink_queue,omitempty"`
	// Payload of the message in hexadecimal format.
	PayloadHex string `protobuf:"bytes,4,opt,name=payload_hex,json=payloadHex,proto3" json:"payload_hex,omitempty"`
	// LoRa port(s) targetted by the message.
	TargetPorts string `protobuf:"bytes,5,opt,name=target_ports,json=targetPorts,proto3" json:"target_ports,omitempty"`
	// Downlink frame-counter.
	// This will be automatically set on enquue.
	// If you encrypt data on your side - specify the fCnt here
	FCnt uint32 `protobuf:"varint,6,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	// Time to live (in seconds). You canspecify the maximum time in queue for the item
	Ttl uint32 `protobuf:"varint,7,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// ! CAUTION !
	// Set this to true when you really need to recieve next fCnt
	// or you want to know the enqueue-status immediately (eg development purposes)
	// ! Please do not call the method in parallel if the flag set it to true.
	// It can be painfully slow.
	// The flag basicaly means 'put it right into queue'.
	// ! The next fCnt be returned only if you set f_cnt parmeter.
	// Otherwise it allways be 0.
	// If you set it to false. It will be processed asynchronously.
	// In case of process with error - it will be sent as ErrorEvents via you apps.
	// You can match it by the message_id parameter.
	GetFcnt bool `protobuf:"varint,8,opt,name=get_fcnt,json=getFcnt,proto3" json:"get_fcnt,omitempty"`
}

func (x *EnqueueDeviceQueueActilityItemRequest) Reset() {
	*x = EnqueueDeviceQueueActilityItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_external_api_deviceQueue_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnqueueDeviceQueueActilityItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueDeviceQueueActilityItemRequest) ProtoMessage() {}

func (x *EnqueueDeviceQueueActilityItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_as_external_api_deviceQueue_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueDeviceQueueActilityItemRequest.ProtoReflect.Descriptor instead.
func (*EnqueueDeviceQueueActilityItemRequest) Descriptor() ([]byte, []int) {
	return file_as_external_api_deviceQueue_proto_rawDescGZIP(), []int{8}
}

func (x *EnqueueDeviceQueueActilityItemRequest) GetDevEui() string {
	if x != nil {
		return x.DevEui
	}
	return ""
}

func (x *EnqueueDeviceQueueActilityItemRequest) GetConfirmDownlink() bool {
	if x != nil {
		return x.ConfirmDownlink
	}
	return false
}

func (x *EnqueueDeviceQueueActilityItemRequest) GetFlushDownlinkQueue() bool {
	if x != nil {
		return x.FlushDownlinkQueue
	}
	return false
}

func (x *EnqueueDeviceQueueActilityItemRequest) GetPayloadHex() string {
	if x != nil {
		return x.PayloadHex
	}
	return ""
}

func (x *EnqueueDeviceQueueActilityItemRequest) GetTargetPorts() string {
	if x != nil {
		return x.TargetPorts
	}
	return ""
}

func (x *EnqueueDeviceQueueActilityItemRequest) GetFCnt() uint32 {
	if x != nil {
		return x.FCnt
	}
	return 0
}

func (x *EnqueueDeviceQueueActilityItemRequest) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *EnqueueDeviceQueueActilityItemRequest) GetGetFcnt() bool {
	if x != nil {
		return x.GetFcnt
	}
	return false
}

type EnqueueDeviceQueueActilityItemResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Frame-counter for the enqueued payload.
	ConfirmDownlink    bool   `protobuf:"varint,1,opt,name=confirm_downlink,json=confirmDownlink,proto3" json:"confirm_downlink,omitempty"`
	FlushDownlinkQueue bool   `protobuf:"varint,2,opt,name=flush_downlink_queue,json=flushDownlinkQueue,proto3" json:"flush_downlink_queue,omitempty"`
	PayloadHex         string `protobuf:"bytes,3,opt,name=payload_hex,json=payloadHex,proto3" json:"payload_hex,omitempty"`
	TargetPorts        string `protobuf:"bytes,4,opt,name=target_ports,json=targetPorts,proto3" json:"target_ports,omitempty"`
	Status             string `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	// downlink message ID (UUID string). ! Generated for background tasks !
	MsgId string `protobuf:"bytes,6,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
}

func (x *EnqueueDeviceQueueActilityItemResponse) Reset() {
	*x = EnqueueDeviceQueueActilityItemResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_external_api_deviceQueue_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnqueueDeviceQueueActilityItemResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueDeviceQueueActilityItemResponse) ProtoMessage() {}

func (x *EnqueueDeviceQueueActilityItemResponse) ProtoReflect() protoreflect.Message {
	mi := &file_as_external_api_deviceQueue_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueDeviceQueueActilityItemResponse.ProtoReflect.Descriptor instead.
func (*EnqueueDeviceQueueActilityItemResponse) Descriptor() ([]byte, []int) {
	return file_as_external_api_deviceQueue_proto_rawDescGZIP(), []int{9}
}

func (x *EnqueueDeviceQueueActilityItemResponse) GetConfirmDownlink() bool {
	if x != nil {
		return x.ConfirmDownlink
	}
	return false
}

func (x *EnqueueDeviceQueueActilityItemResponse) GetFlushDownlinkQueue() bool {
	if x != nil {
		return x.FlushDownlinkQueue
	}
	return false
}

func (x *EnqueueDeviceQueueActilityItemResponse) GetPayloadHex() string {
	if x != nil {
		return x.PayloadHex
	}
	return ""
}

func (x *EnqueueDeviceQueueActilityItemResponse) GetTargetPorts() string {
	if x != nil {
		return x.TargetPorts
	}
	return ""
}

func (x *EnqueueDeviceQueueActilityItemResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *EnqueueDeviceQueueActilityItemResponse) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

type GetNextDownlinkFCntRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI (HEX encoded).
	DevEui string `protobuf:"bytes,1,opt,name=dev_eui,json=devEUI,proto3" json:"dev_eui,omitempty"`
}

func (x *GetNextDownlinkFCntRequest) Reset() {
	*x = GetNextDownlinkFCntRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_external_api_deviceQueue_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNextDownlinkFCntRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNextDownlinkFCntRequest) ProtoMessage() {}

func (x *GetNextDownlinkFCntRequest) ProtoReflect() protoreflect.Message {
	mi := &file_as_external_api_deviceQueue_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNextDownlinkFCntRequest.ProtoReflect.Descriptor instead.
func (*GetNextDownlinkFCntRequest) Descriptor() ([]byte, []int) {
	return file_as_external_api_deviceQueue_proto_rawDescGZIP(), []int{10}
}

func (x *GetNextDownlinkFCntRequest) GetDevEui() string {
	if x != nil {
		return x.DevEui
	}
	return ""
}

type GetNextDownlinkFCntResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Next downlink frame-counter.
	FCnt uint32 `protobuf:"varint,1,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
}

func (x *GetNextDownlinkFCntResponse) Reset() {
	*x = GetNextDownlinkFCntResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_external_api_deviceQueue_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNextDownlinkFCntResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNextDownlinkFCntResponse) ProtoMessage() {}

func (x *GetNextDownlinkFCntResponse) ProtoReflect() protoreflect.Message {
	mi := &file_as_external_api_deviceQueue_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNextDownlinkFCntResponse.ProtoReflect.Descriptor instead.
func (*GetNextDownlinkFCntResponse) Descriptor() ([]byte, []int) {
	return file_as_external_api_deviceQueue_proto_rawDescGZIP(), []int{11}
}

func (x *GetNextDownlinkFCntResponse) GetFCnt() uint32 {
	if x != nil {
		return x.FCnt
	}
	return 0
}

var File_as_external_api_deviceQueue_proto protoreflect.FileDescriptor

var file_as_external_api_deviceQueue_proto_rawDesc = []byte{
	0x0a, 0x21, 0x61, 0x73, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x03, 0x0a, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f,
	0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x55,
	0x49, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12,
	0x13, 0x0a, 0x05, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x66, 0x43, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1f, 0x0a, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74,
	0x74, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x3f, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0xa0, 0x01, 0x0a, 0x0f, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x65, 0x78, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x13, 0x0a, 0x05,
	0x66, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x43, 0x6e,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x66, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03,
	0x74, 0x74, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x1d,
	0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x98, 0x01,
	0x0a, 0x20, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x55, 0x49, 0x12, 0x40, 0x0a, 0x11, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x74, 0x65, 0x6d, 0x48, 0x65, 0x78, 0x52, 0x0f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x63, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x67, 0x65, 0x74, 0x46, 0x63, 0x6e, 0x74, 0x22, 0x7c, 0x0a, 0x1d, 0x45, 0x6e, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x11, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x65, 0x74, 0x5f, 0x66, 0x63, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x67,
	0x65, 0x74, 0x46, 0x63, 0x6e, 0x74, 0x22, 0x4c, 0x0a, 0x1e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x66, 0x5f, 0x63, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x43, 0x6e, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d,
	0x73, 0x67, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x17, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x55, 0x49, 0x22, 0x55, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65,
	0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x55, 0x49,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x22,
	0x83, 0x01, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x42, 0x0a, 0x12, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa3, 0x02, 0x0a, 0x25, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x55, 0x49, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x72, 0x6d, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x44, 0x6f, 0x77, 0x6e, 0x6c,
	0x69, 0x6e, 0x6b, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x12, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x5f, 0x68, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x48, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x13, 0x0a, 0x05, 0x66, 0x5f, 0x63,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x43, 0x6e, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x74, 0x6c,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f, 0x66, 0x63, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x67, 0x65, 0x74, 0x46, 0x63, 0x6e, 0x74, 0x22, 0xf8, 0x01, 0x0a, 0x26,
	0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72,
	0x6d, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e,
	0x6b, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x12, 0x66, 0x6c, 0x75, 0x73, 0x68, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x68,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x48, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78,
	0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x46, 0x43, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x55, 0x49, 0x22, 0x32, 0x0a,
	0x1b, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b,
	0x46, 0x43, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x05,
	0x66, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x43, 0x6e,
	0x74, 0x32, 0xa7, 0x06, 0x0a, 0x12, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8d, 0x01, 0x0a, 0x07, 0x45, 0x6e, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45,
	0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x39, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x01, 0x2a, 0x22, 0x2e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75,
	0x69, 0x7d, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x0a, 0x45, 0x6e, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x48, 0x65, 0x78, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x48, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x2b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x25, 0x3a, 0x01, 0x2a, 0x22, 0x20,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x65,
	0x76, 0x5f, 0x65, 0x75, 0x69, 0x7d, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x68, 0x65, 0x78,
	0x12, 0x63, 0x0a, 0x05, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x12, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x46, 0x6c, 0x75, 0x73, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x2a, 0x1c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x7d, 0x2f,
	0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x71, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x12, 0x1c, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75,
	0x69, 0x7d, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0xa1, 0x01, 0x0a, 0x0f, 0x41, 0x63, 0x74,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x2a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45,
	0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a,
	0x22, 0x2a, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b,
	0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x7d, 0x2f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x7d, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x46,
	0x43, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78,
	0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x46, 0x43, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65,
	0x78, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x46, 0x43, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x12, 0x1b,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x64, 0x65,
	0x76, 0x5f, 0x65, 0x75, 0x69, 0x7d, 0x2f, 0x66, 0x63, 0x6e, 0x74, 0x42, 0x80, 0x01, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x42, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x37, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x72, 0x6f, 0x63, 0x61, 0x61, 0x72, 0x2f,
	0x63, 0x68, 0x69, 0x72, 0x70, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67,
	0x6f, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x73, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x61, 0x70, 0x69, 0xa2, 0x02, 0x03, 0x41, 0x58, 0x58, 0xaa, 0x02, 0x03, 0x41, 0x70, 0x69,
	0xca, 0x02, 0x03, 0x41, 0x70, 0x69, 0xe2, 0x02, 0x0f, 0x41, 0x70, 0x69, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x03, 0x41, 0x70, 0x69, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_as_external_api_deviceQueue_proto_rawDescOnce sync.Once
	file_as_external_api_deviceQueue_proto_rawDescData = file_as_external_api_deviceQueue_proto_rawDesc
)

func file_as_external_api_deviceQueue_proto_rawDescGZIP() []byte {
	file_as_external_api_deviceQueue_proto_rawDescOnce.Do(func() {
		file_as_external_api_deviceQueue_proto_rawDescData = protoimpl.X.CompressGZIP(file_as_external_api_deviceQueue_proto_rawDescData)
	})
	return file_as_external_api_deviceQueue_proto_rawDescData
}

var file_as_external_api_deviceQueue_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_as_external_api_deviceQueue_proto_goTypes = []interface{}{
	(*DeviceQueueItem)(nil),                        // 0: api.DeviceQueueItem
	(*DownlinkItemHex)(nil),                        // 1: api.DownlinkItemHex
	(*EnqueueDeviceQueueItemHexRequest)(nil),       // 2: api.EnqueueDeviceQueueItemHexRequest
	(*EnqueueDeviceQueueItemRequest)(nil),          // 3: api.EnqueueDeviceQueueItemRequest
	(*EnqueueDeviceQueueItemResponse)(nil),         // 4: api.EnqueueDeviceQueueItemResponse
	(*FlushDeviceQueueRequest)(nil),                // 5: api.FlushDeviceQueueRequest
	(*ListDeviceQueueItemsRequest)(nil),            // 6: api.ListDeviceQueueItemsRequest
	(*ListDeviceQueueItemsResponse)(nil),           // 7: api.ListDeviceQueueItemsResponse
	(*EnqueueDeviceQueueActilityItemRequest)(nil),  // 8: api.EnqueueDeviceQueueActilityItemRequest
	(*EnqueueDeviceQueueActilityItemResponse)(nil), // 9: api.EnqueueDeviceQueueActilityItemResponse
	(*GetNextDownlinkFCntRequest)(nil),             // 10: api.GetNextDownlinkFCntRequest
	(*GetNextDownlinkFCntResponse)(nil),            // 11: api.GetNextDownlinkFCntResponse
	(*timestamppb.Timestamp)(nil),                  // 12: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                          // 13: google.protobuf.Empty
}
var file_as_external_api_deviceQueue_proto_depIdxs = []int32{
	12, // 0: api.DeviceQueueItem.created_at:type_name -> google.protobuf.Timestamp
	12, // 1: api.DeviceQueueItem.timeout_after:type_name -> google.protobuf.Timestamp
	1,  // 2: api.EnqueueDeviceQueueItemHexRequest.device_queue_item:type_name -> api.DownlinkItemHex
	0,  // 3: api.EnqueueDeviceQueueItemRequest.device_queue_item:type_name -> api.DeviceQueueItem
	0,  // 4: api.ListDeviceQueueItemsResponse.device_queue_items:type_name -> api.DeviceQueueItem
	3,  // 5: api.DeviceQueueService.Enqueue:input_type -> api.EnqueueDeviceQueueItemRequest
	2,  // 6: api.DeviceQueueService.EnqueueHex:input_type -> api.EnqueueDeviceQueueItemHexRequest
	5,  // 7: api.DeviceQueueService.Flush:input_type -> api.FlushDeviceQueueRequest
	6,  // 8: api.DeviceQueueService.List:input_type -> api.ListDeviceQueueItemsRequest
	8,  // 9: api.DeviceQueueService.ActilityEnqueue:input_type -> api.EnqueueDeviceQueueActilityItemRequest
	10, // 10: api.DeviceQueueService.GetNextDownlinkFCnt:input_type -> api.GetNextDownlinkFCntRequest
	4,  // 11: api.DeviceQueueService.Enqueue:output_type -> api.EnqueueDeviceQueueItemResponse
	4,  // 12: api.DeviceQueueService.EnqueueHex:output_type -> api.EnqueueDeviceQueueItemResponse
	13, // 13: api.DeviceQueueService.Flush:output_type -> google.protobuf.Empty
	7,  // 14: api.DeviceQueueService.List:output_type -> api.ListDeviceQueueItemsResponse
	9,  // 15: api.DeviceQueueService.ActilityEnqueue:output_type -> api.EnqueueDeviceQueueActilityItemResponse
	11, // 16: api.DeviceQueueService.GetNextDownlinkFCnt:output_type -> api.GetNextDownlinkFCntResponse
	11, // [11:17] is the sub-list for method output_type
	5,  // [5:11] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_as_external_api_deviceQueue_proto_init() }
func file_as_external_api_deviceQueue_proto_init() {
	if File_as_external_api_deviceQueue_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_as_external_api_deviceQueue_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceQueueItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_external_api_deviceQueue_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownlinkItemHex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_external_api_deviceQueue_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnqueueDeviceQueueItemHexRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_external_api_deviceQueue_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnqueueDeviceQueueItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_external_api_deviceQueue_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnqueueDeviceQueueItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_external_api_deviceQueue_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushDeviceQueueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_external_api_deviceQueue_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeviceQueueItemsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_external_api_deviceQueue_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDeviceQueueItemsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_external_api_deviceQueue_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnqueueDeviceQueueActilityItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_external_api_deviceQueue_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnqueueDeviceQueueActilityItemResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_external_api_deviceQueue_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNextDownlinkFCntRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_external_api_deviceQueue_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNextDownlinkFCntResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_as_external_api_deviceQueue_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_as_external_api_deviceQueue_proto_goTypes,
		DependencyIndexes: file_as_external_api_deviceQueue_proto_depIdxs,
		MessageInfos:      file_as_external_api_deviceQueue_proto_msgTypes,
	}.Build()
	File_as_external_api_deviceQueue_proto = out.File
	file_as_external_api_deviceQueue_proto_rawDesc = nil
	file_as_external_api_deviceQueue_proto_goTypes = nil
	file_as_external_api_deviceQueue_proto_depIdxs = nil
}
