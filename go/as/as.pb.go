// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        v3.13.0
// source: as/as.proto

package as

import (
	context "context"
	common "github.com/brocaar/chirpstack-api/go/v3/common"
	gw "github.com/brocaar/chirpstack-api/go/v3/gw"
	ns "github.com/brocaar/chirpstack-api/go/v3/ns"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RXWindow int32

const (
	RXWindow_RX1 RXWindow = 0
	RXWindow_RX2 RXWindow = 1
)

// Enum value maps for RXWindow.
var (
	RXWindow_name = map[int32]string{
		0: "RX1",
		1: "RX2",
	}
	RXWindow_value = map[string]int32{
		"RX1": 0,
		"RX2": 1,
	}
)

func (x RXWindow) Enum() *RXWindow {
	p := new(RXWindow)
	*p = x
	return p
}

func (x RXWindow) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RXWindow) Descriptor() protoreflect.EnumDescriptor {
	return file_as_as_proto_enumTypes[0].Descriptor()
}

func (RXWindow) Type() protoreflect.EnumType {
	return &file_as_as_proto_enumTypes[0]
}

func (x RXWindow) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RXWindow.Descriptor instead.
func (RXWindow) EnumDescriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{0}
}

type ErrorType int32

const (
	// Generic error type.
	ErrorType_GENERIC ErrorType = 0
	// OTAA error.
	ErrorType_OTAA ErrorType = 1
	// Uplink frame-counter was reset.
	ErrorType_DATA_UP_FCNT_RESET ErrorType = 2
	// Uplink MIC error.
	ErrorType_DATA_UP_MIC ErrorType = 3
	// Downlink payload size error.
	ErrorType_DEVICE_QUEUE_ITEM_SIZE ErrorType = 4
	// Downlink frame-counter error.
	ErrorType_DEVICE_QUEUE_ITEM_FCNT ErrorType = 5
	// Uplink frame-counter retransmission.
	ErrorType_DATA_UP_FCNT_RETRANSMISSION ErrorType = 6
	// Downlink gateway error.
	ErrorType_DATA_DOWN_GATEWAY ErrorType = 7
)

// Enum value maps for ErrorType.
var (
	ErrorType_name = map[int32]string{
		0: "GENERIC",
		1: "OTAA",
		2: "DATA_UP_FCNT_RESET",
		3: "DATA_UP_MIC",
		4: "DEVICE_QUEUE_ITEM_SIZE",
		5: "DEVICE_QUEUE_ITEM_FCNT",
		6: "DATA_UP_FCNT_RETRANSMISSION",
		7: "DATA_DOWN_GATEWAY",
	}
	ErrorType_value = map[string]int32{
		"GENERIC":                     0,
		"OTAA":                        1,
		"DATA_UP_FCNT_RESET":          2,
		"DATA_UP_MIC":                 3,
		"DEVICE_QUEUE_ITEM_SIZE":      4,
		"DEVICE_QUEUE_ITEM_FCNT":      5,
		"DATA_UP_FCNT_RETRANSMISSION": 6,
		"DATA_DOWN_GATEWAY":           7,
	}
)

func (x ErrorType) Enum() *ErrorType {
	p := new(ErrorType)
	*p = x
	return p
}

func (x ErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_as_as_proto_enumTypes[1].Descriptor()
}

func (ErrorType) Type() protoreflect.EnumType {
	return &file_as_as_proto_enumTypes[1]
}

func (x ErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorType.Descriptor instead.
func (ErrorType) EnumDescriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{1}
}

type UpdateSPonDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// dev_eui of the device
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the service-profile.
	SpId []byte `protobuf:"bytes,2,opt,name=sp_id,json=spId,proto3" json:"sp_id,omitempty"`
}

func (x *UpdateSPonDeviceRequest) Reset() {
	*x = UpdateSPonDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSPonDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSPonDeviceRequest) ProtoMessage() {}

func (x *UpdateSPonDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSPonDeviceRequest.ProtoReflect.Descriptor instead.
func (*UpdateSPonDeviceRequest) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{0}
}

func (x *UpdateSPonDeviceRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *UpdateSPonDeviceRequest) GetSpId() []byte {
	if x != nil {
		return x.SpId
	}
	return nil
}

type GetServiceProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the service-profile.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetServiceProfileRequest) Reset() {
	*x = GetServiceProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceProfileRequest) ProtoMessage() {}

func (x *GetServiceProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceProfileRequest.ProtoReflect.Descriptor instead.
func (*GetServiceProfileRequest) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{1}
}

func (x *GetServiceProfileRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type GetServiceProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Service-profile object to create in as-db
	AsData *ServiceProfileItem `protobuf:"bytes,1,opt,name=as_data,json=asData,proto3" json:"as_data,omitempty"`
}

func (x *GetServiceProfileResponse) Reset() {
	*x = GetServiceProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceProfileResponse) ProtoMessage() {}

func (x *GetServiceProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceProfileResponse.ProtoReflect.Descriptor instead.
func (*GetServiceProfileResponse) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{2}
}

func (x *GetServiceProfileResponse) GetAsData() *ServiceProfileItem {
	if x != nil {
		return x.AsData
	}
	return nil
}

type CreateServiceProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Service-profile data - object to create in as-db
	AsData *ServiceProfileItem `protobuf:"bytes,1,opt,name=as_data,json=asData,proto3" json:"as_data,omitempty"`
	// Service-profile data -  object to create in ns-db
	NsData *ns.ServiceProfile `protobuf:"bytes,2,opt,name=ns_data,json=nsData,proto3" json:"ns_data,omitempty"`
}

func (x *CreateServiceProfileRequest) Reset() {
	*x = CreateServiceProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateServiceProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServiceProfileRequest) ProtoMessage() {}

func (x *CreateServiceProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServiceProfileRequest.ProtoReflect.Descriptor instead.
func (*CreateServiceProfileRequest) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{3}
}

func (x *CreateServiceProfileRequest) GetAsData() *ServiceProfileItem {
	if x != nil {
		return x.AsData
	}
	return nil
}

func (x *CreateServiceProfileRequest) GetNsData() *ns.ServiceProfile {
	if x != nil {
		return x.NsData
	}
	return nil
}

type CreateServiceProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Service-profile ID (UUID).
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateServiceProfileResponse) Reset() {
	*x = CreateServiceProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateServiceProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServiceProfileResponse) ProtoMessage() {}

func (x *CreateServiceProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServiceProfileResponse.ProtoReflect.Descriptor instead.
func (*CreateServiceProfileResponse) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{4}
}

func (x *CreateServiceProfileResponse) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type ServiceProfileItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkServerId  int64                `protobuf:"varint,1,opt,name=network_server_id,json=networkServerId,proto3" json:"network_server_id,omitempty"`
	OrganizationId   int64                `protobuf:"varint,2,opt,name=organization_id,json=organizationId,proto3" json:"organization_id,omitempty"`
	Name             string               `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Description      string               `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	DeviceCountLimit uint32               `protobuf:"varint,5,opt,name=device_count_limit,json=deviceCountLimit,proto3" json:"device_count_limit,omitempty"`
	CreatedAt        *timestamp.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt        *timestamp.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *ServiceProfileItem) Reset() {
	*x = ServiceProfileItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceProfileItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceProfileItem) ProtoMessage() {}

func (x *ServiceProfileItem) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceProfileItem.ProtoReflect.Descriptor instead.
func (*ServiceProfileItem) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{5}
}

func (x *ServiceProfileItem) GetNetworkServerId() int64 {
	if x != nil {
		return x.NetworkServerId
	}
	return 0
}

func (x *ServiceProfileItem) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

func (x *ServiceProfileItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ServiceProfileItem) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ServiceProfileItem) GetDeviceCountLimit() uint32 {
	if x != nil {
		return x.DeviceCountLimit
	}
	return 0
}

func (x *ServiceProfileItem) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ServiceProfileItem) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type GatewayMetaData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// gateway id
	GwId string `protobuf:"bytes,1,opt,name=gw_id,json=gwId,proto3" json:"gw_id,omitempty"`
	// metadata last recieved
	Metadata map[string]string `protobuf:"bytes,2,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GatewayMetaData) Reset() {
	*x = GatewayMetaData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayMetaData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayMetaData) ProtoMessage() {}

func (x *GatewayMetaData) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayMetaData.ProtoReflect.Descriptor instead.
func (*GatewayMetaData) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{6}
}

func (x *GatewayMetaData) GetGwId() string {
	if x != nil {
		return x.GwId
	}
	return ""
}

func (x *GatewayMetaData) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

type GetGWMetaDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gateway metadata by gateway
	MetadataList []*GatewayMetaData `protobuf:"bytes,1,rep,name=metadata_list,json=metadataList,proto3" json:"metadata_list,omitempty"`
}

func (x *GetGWMetaDataResponse) Reset() {
	*x = GetGWMetaDataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGWMetaDataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGWMetaDataResponse) ProtoMessage() {}

func (x *GetGWMetaDataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGWMetaDataResponse.ProtoReflect.Descriptor instead.
func (*GetGWMetaDataResponse) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{7}
}

func (x *GetGWMetaDataResponse) GetMetadataList() []*GatewayMetaData {
	if x != nil {
		return x.MetadataList
	}
	return nil
}

type GetDictionaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choose dictionary type.
	DicType string `protobuf:"bytes,1,opt,name=dic_type,json=dicType,proto3" json:"dic_type,omitempty"`
}

func (x *GetDictionaryRequest) Reset() {
	*x = GetDictionaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictionaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictionaryRequest) ProtoMessage() {}

func (x *GetDictionaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictionaryRequest.ProtoReflect.Descriptor instead.
func (*GetDictionaryRequest) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{8}
}

func (x *GetDictionaryRequest) GetDicType() string {
	if x != nil {
		return x.DicType
	}
	return ""
}

type GetDictionaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// choose dictionary type.
	DicType string        `protobuf:"bytes,1,opt,name=dic_type,json=dicType,proto3" json:"dic_type,omitempty"`
	List    []*Dictionary `protobuf:"bytes,2,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GetDictionaryResponse) Reset() {
	*x = GetDictionaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDictionaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDictionaryResponse) ProtoMessage() {}

func (x *GetDictionaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDictionaryResponse.ProtoReflect.Descriptor instead.
func (*GetDictionaryResponse) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{9}
}

func (x *GetDictionaryResponse) GetDicType() string {
	if x != nil {
		return x.DicType
	}
	return ""
}

func (x *GetDictionaryResponse) GetList() []*Dictionary {
	if x != nil {
		return x.List
	}
	return nil
}

type Dictionary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// id of the label
	Code int64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// type of the dictionary
	DicType string `protobuf:"bytes,2,opt,name=dic_type,json=dicType,proto3" json:"dic_type,omitempty"`
	// label name
	Label string `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	// boolean flag if it is relevant
	IsActual bool `protobuf:"varint,4,opt,name=is_actual,json=isActual,proto3" json:"is_actual,omitempty"`
}

func (x *Dictionary) Reset() {
	*x = Dictionary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dictionary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dictionary) ProtoMessage() {}

func (x *Dictionary) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dictionary.ProtoReflect.Descriptor instead.
func (*Dictionary) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{10}
}

func (x *Dictionary) GetCode() int64 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Dictionary) GetDicType() string {
	if x != nil {
		return x.DicType
	}
	return ""
}

func (x *Dictionary) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Dictionary) GetIsActual() bool {
	if x != nil {
		return x.IsActual
	}
	return false
}

type GetOrgByDevEUIRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI (HEX encoded).
	DevEui string `protobuf:"bytes,1,opt,name=dev_eui,json=devEUI,proto3" json:"dev_eui,omitempty"`
}

func (x *GetOrgByDevEUIRequest) Reset() {
	*x = GetOrgByDevEUIRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgByDevEUIRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgByDevEUIRequest) ProtoMessage() {}

func (x *GetOrgByDevEUIRequest) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgByDevEUIRequest.ProtoReflect.Descriptor instead.
func (*GetOrgByDevEUIRequest) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{11}
}

func (x *GetOrgByDevEUIRequest) GetDevEui() string {
	if x != nil {
		return x.DevEui
	}
	return ""
}

type NewAppSKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI (HEX encoded).
	DevEui []byte `protobuf:"bytes,1,opt,name=dev_eui,json=devEUI,proto3" json:"dev_eui,omitempty"`
	// Assigned Device Address.
	DevAddr []byte `protobuf:"bytes,2,opt,name=dev_addr,json=devAddr,proto3" json:"dev_addr,omitempty"`
	// AESKey is a AES128Key recieved from NS. Normaly (without KEK)
	//  it's just will be saved as AppSKey
	AesKeyEnvelope *common.KeyEnvelope `protobuf:"bytes,3,opt,name=aes_key_envelope,json=aesKeyEnvelope,proto3" json:"aes_key_envelope,omitempty"`
}

func (x *NewAppSKeyRequest) Reset() {
	*x = NewAppSKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewAppSKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewAppSKeyRequest) ProtoMessage() {}

func (x *NewAppSKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewAppSKeyRequest.ProtoReflect.Descriptor instead.
func (*NewAppSKeyRequest) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{12}
}

func (x *NewAppSKeyRequest) GetDevEui() []byte {
	if x != nil {
		return x.DevEui
	}
	return nil
}

func (x *NewAppSKeyRequest) GetDevAddr() []byte {
	if x != nil {
		return x.DevAddr
	}
	return nil
}

func (x *NewAppSKeyRequest) GetAesKeyEnvelope() *common.KeyEnvelope {
	if x != nil {
		return x.AesKeyEnvelope
	}
	return nil
}

type GetOrgIDByGwIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gateway ID (HEX encoded).
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetOrgIDByGwIDRequest) Reset() {
	*x = GetOrgIDByGwIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgIDByGwIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgIDByGwIDRequest) ProtoMessage() {}

func (x *GetOrgIDByGwIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgIDByGwIDRequest.ProtoReflect.Descriptor instead.
func (*GetOrgIDByGwIDRequest) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{13}
}

func (x *GetOrgIDByGwIDRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetDeviceAppSKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AppSKey is a AES128Key for the device
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GetDeviceAppSKeyResponse) Reset() {
	*x = GetDeviceAppSKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceAppSKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceAppSKeyResponse) ProtoMessage() {}

func (x *GetDeviceAppSKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceAppSKeyResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceAppSKeyResponse) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{14}
}

func (x *GetDeviceAppSKeyResponse) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type GetDeviceKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// NwkKey is a AES128Key for the device from device_keys
	NwkKey []byte `protobuf:"bytes,1,opt,name=nwk_key,json=nwkKey,proto3" json:"nwk_key,omitempty"`
	// AppKey is a AES128Key for the device from device_keys
	AppKey []byte `protobuf:"bytes,2,opt,name=app_key,json=appKey,proto3" json:"app_key,omitempty"`
}

func (x *GetDeviceKeysResponse) Reset() {
	*x = GetDeviceKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceKeysResponse) ProtoMessage() {}

func (x *GetDeviceKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceKeysResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceKeysResponse) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{15}
}

func (x *GetDeviceKeysResponse) GetNwkKey() []byte {
	if x != nil {
		return x.NwkKey
	}
	return nil
}

func (x *GetDeviceKeysResponse) GetAppKey() []byte {
	if x != nil {
		return x.AppKey
	}
	return nil
}

type GetOrgByDevEUIResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Organization ID.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetOrgByDevEUIResponse) Reset() {
	*x = GetOrgByDevEUIResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrgByDevEUIResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrgByDevEUIResponse) ProtoMessage() {}

func (x *GetOrgByDevEUIResponse) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrgByDevEUIResponse.ProtoReflect.Descriptor instead.
func (*GetOrgByDevEUIResponse) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{16}
}

func (x *GetOrgByDevEUIResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ListOrganizationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Max number of organizations to return in the result-set.
	Limit int64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// Offset in the result-set (for pagination).
	Offset int64 `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	// When provided, the given string will be used to search on
	// displayName.
	Search string `protobuf:"bytes,3,opt,name=search,proto3" json:"search,omitempty"`
}

func (x *ListOrganizationRequest) Reset() {
	*x = ListOrganizationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationRequest) ProtoMessage() {}

func (x *ListOrganizationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationRequest.ProtoReflect.Descriptor instead.
func (*ListOrganizationRequest) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{17}
}

func (x *ListOrganizationRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListOrganizationRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListOrganizationRequest) GetSearch() string {
	if x != nil {
		return x.Search
	}
	return ""
}

type ListOrganizationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total number of organizations.
	TotalCount int64                   `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	Result     []*OrganizationListItem `protobuf:"bytes,2,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *ListOrganizationResponse) Reset() {
	*x = ListOrganizationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListOrganizationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListOrganizationResponse) ProtoMessage() {}

func (x *ListOrganizationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListOrganizationResponse.ProtoReflect.Descriptor instead.
func (*ListOrganizationResponse) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{18}
}

func (x *ListOrganizationResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListOrganizationResponse) GetResult() []*OrganizationListItem {
	if x != nil {
		return x.Result
	}
	return nil
}

type OrganizationListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Organization ID.
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Organization name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Organization display name.
	DisplayName string `protobuf:"bytes,3,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	// Can the organization create and "own" Gateways?
	CanHaveGateways bool `protobuf:"varint,4,opt,name=can_have_gateways,json=canHaveGateways,proto3" json:"can_have_gateways,omitempty"`
	// Created at timestamp.
	CreatedAt *timestamp.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Last update timestamp.
	UpdatedAt *timestamp.Timestamp `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *OrganizationListItem) Reset() {
	*x = OrganizationListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationListItem) ProtoMessage() {}

func (x *OrganizationListItem) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationListItem.ProtoReflect.Descriptor instead.
func (*OrganizationListItem) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{19}
}

func (x *OrganizationListItem) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrganizationListItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OrganizationListItem) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *OrganizationListItem) GetCanHaveGateways() bool {
	if x != nil {
		return x.CanHaveGateways
	}
	return false
}

func (x *OrganizationListItem) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *OrganizationListItem) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type GetDevicesSummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Organization ID.
	OrganizationId int64 `protobuf:"varint,1,opt,name=organization_id,json=organizationID,proto3" json:"organization_id,omitempty"`
}

func (x *GetDevicesSummaryRequest) Reset() {
	*x = GetDevicesSummaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDevicesSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDevicesSummaryRequest) ProtoMessage() {}

func (x *GetDevicesSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDevicesSummaryRequest.ProtoReflect.Descriptor instead.
func (*GetDevicesSummaryRequest) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{20}
}

func (x *GetDevicesSummaryRequest) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

type GetDevicesSummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Active count.
	ActiveCount uint32 `protobuf:"varint,1,opt,name=active_count,json=activeCount,proto3" json:"active_count,omitempty"`
	// Inactive count.
	InactiveCount uint32 `protobuf:"varint,2,opt,name=inactive_count,json=inactiveCount,proto3" json:"inactive_count,omitempty"`
	// per data-rate count.
	// Devices that have never been seen are excluded.
	DrCount map[uint32]uint32 `protobuf:"bytes,3,rep,name=dr_count,json=drCount,proto3" json:"dr_count,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Never seen count.
	NeverSeenCount uint32 `protobuf:"varint,4,opt,name=never_seen_count,json=neverSeenCount,proto3" json:"never_seen_count,omitempty"`
}

func (x *GetDevicesSummaryResponse) Reset() {
	*x = GetDevicesSummaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDevicesSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDevicesSummaryResponse) ProtoMessage() {}

func (x *GetDevicesSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDevicesSummaryResponse.ProtoReflect.Descriptor instead.
func (*GetDevicesSummaryResponse) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{21}
}

func (x *GetDevicesSummaryResponse) GetActiveCount() uint32 {
	if x != nil {
		return x.ActiveCount
	}
	return 0
}

func (x *GetDevicesSummaryResponse) GetInactiveCount() uint32 {
	if x != nil {
		return x.InactiveCount
	}
	return 0
}

func (x *GetDevicesSummaryResponse) GetDrCount() map[uint32]uint32 {
	if x != nil {
		return x.DrCount
	}
	return nil
}

func (x *GetDevicesSummaryResponse) GetNeverSeenCount() uint32 {
	if x != nil {
		return x.NeverSeenCount
	}
	return 0
}

type GetGatewaysSummaryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Organization ID.
	OrganizationId int64 `protobuf:"varint,1,opt,name=organization_id,json=organizationID,proto3" json:"organization_id,omitempty"`
}

func (x *GetGatewaysSummaryRequest) Reset() {
	*x = GetGatewaysSummaryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGatewaysSummaryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGatewaysSummaryRequest) ProtoMessage() {}

func (x *GetGatewaysSummaryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGatewaysSummaryRequest.ProtoReflect.Descriptor instead.
func (*GetGatewaysSummaryRequest) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{22}
}

func (x *GetGatewaysSummaryRequest) GetOrganizationId() int64 {
	if x != nil {
		return x.OrganizationId
	}
	return 0
}

type GetGatewaysSummaryResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Active count.
	ActiveCount uint32 `protobuf:"varint,1,opt,name=active_count,json=activeCount,proto3" json:"active_count,omitempty"`
	// Inactive count.
	InactiveCount uint32 `protobuf:"varint,2,opt,name=inactive_count,json=inactiveCount,proto3" json:"inactive_count,omitempty"`
	// Never seen count.
	NeverSeenCount uint32 `protobuf:"varint,3,opt,name=never_seen_count,json=neverSeenCount,proto3" json:"never_seen_count,omitempty"`
}

func (x *GetGatewaysSummaryResponse) Reset() {
	*x = GetGatewaysSummaryResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGatewaysSummaryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGatewaysSummaryResponse) ProtoMessage() {}

func (x *GetGatewaysSummaryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGatewaysSummaryResponse.ProtoReflect.Descriptor instead.
func (*GetGatewaysSummaryResponse) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{23}
}

func (x *GetGatewaysSummaryResponse) GetActiveCount() uint32 {
	if x != nil {
		return x.ActiveCount
	}
	return 0
}

func (x *GetGatewaysSummaryResponse) GetInactiveCount() uint32 {
	if x != nil {
		return x.InactiveCount
	}
	return 0
}

func (x *GetGatewaysSummaryResponse) GetNeverSeenCount() uint32 {
	if x != nil {
		return x.NeverSeenCount
	}
	return 0
}

type DeviceActivationContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Assigned Device Address.
	DevAddr []byte `protobuf:"bytes,1,opt,name=dev_addr,json=devAddr,proto3" json:"dev_addr,omitempty"`
	// Application session key (envelope).
	AppSKey *common.KeyEnvelope `protobuf:"bytes,2,opt,name=app_s_key,json=appSKey,proto3" json:"app_s_key,omitempty"`
}

func (x *DeviceActivationContext) Reset() {
	*x = DeviceActivationContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceActivationContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceActivationContext) ProtoMessage() {}

func (x *DeviceActivationContext) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceActivationContext.ProtoReflect.Descriptor instead.
func (*DeviceActivationContext) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{24}
}

func (x *DeviceActivationContext) GetDevAddr() []byte {
	if x != nil {
		return x.DevAddr
	}
	return nil
}

func (x *DeviceActivationContext) GetAppSKey() *common.KeyEnvelope {
	if x != nil {
		return x.AppSKey
	}
	return nil
}

type HandleUplinkDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DevEUI EUI (8 bytes).
	DevEui []byte `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// Join EUI used for OTAA activation (8 bytes).
	JoinEui []byte `protobuf:"bytes,2,opt,name=join_eui,json=joinEui,proto3" json:"join_eui,omitempty"`
	// Frame-counter.
	FCnt uint32 `protobuf:"varint,3,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	// Frame port.
	FPort uint32 `protobuf:"varint,4,opt,name=f_port,json=fPort,proto3" json:"f_port,omitempty"`
	// ADR enabled.
	Adr bool `protobuf:"varint,5,opt,name=adr,proto3" json:"adr,omitempty"`
	// Data-rate.
	Dr uint32 `protobuf:"varint,6,opt,name=dr,proto3" json:"dr,omitempty"`
	// TX meta-data.
	TxInfo *gw.UplinkTXInfo `protobuf:"bytes,7,opt,name=tx_info,json=txInfo,proto3" json:"tx_info,omitempty"`
	// RX meta-data.
	RxInfo []*gw.UplinkRXInfo `protobuf:"bytes,8,rep,name=rx_info,json=rxInfo,proto3" json:"rx_info,omitempty"`
	// Received data (encrypted).
	Data []byte `protobuf:"bytes,9,opt,name=data,proto3" json:"data,omitempty"`
	// Device activation context.
	//
	// This field is only set on the first uplink frame when the security
	// context has changed (e.g. a new OTAA (re)activation).
	DeviceActivationContext *DeviceActivationContext `protobuf:"bytes,10,opt,name=device_activation_context,json=deviceActivationContext,proto3" json:"device_activation_context,omitempty"`
	// Uplink was of type confirmed.
	ConfirmedUplink bool `protobuf:"varint,11,opt,name=confirmed_uplink,json=confirmedUplink,proto3" json:"confirmed_uplink,omitempty"`
	// true if recieved more than 2 minutes after. Modification
	Late bool `protobuf:"varint,12,opt,name=late,proto3" json:"late,omitempty"`
	// Mic. Modification
	Mic []byte `protobuf:"bytes,13,opt,name=mic,proto3" json:"mic,omitempty"`
	// time frame(s) recieved. Can be gps\fts\by server for packet with best SNR. Modification
	Time *timestamp.Timestamp `protobuf:"bytes,14,opt,name=time,proto3" json:"time,omitempty"`
	// limit for current uplink packet
	Limit ns.RateLimit `protobuf:"varint,15,opt,name=limit,proto3,enum=ns.RateLimit" json:"limit,omitempty"`
	// average Packet Error Rate for last 20 packets in device_session
	Per float64 `protobuf:"fixed64,16,opt,name=per,proto3" json:"per,omitempty"`
	// average Signal to Noise Ratio for last 20 packets in device_session
	Snr float64 `protobuf:"fixed64,17,opt,name=snr,proto3" json:"snr,omitempty"`
	// average Received signal strength indication for last 20 packets in device_session
	Rssi float64 `protobuf:"fixed64,18,opt,name=rssi,proto3" json:"rssi,omitempty"`
	// current class of the device: string: "A", "B", "C"
	Class string `protobuf:"bytes,19,opt,name=class,proto3" json:"class,omitempty"`
}

func (x *HandleUplinkDataRequest) Reset() {
	*x = HandleUplinkDataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleUplinkDataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleUplinkDataRequest) ProtoMessage() {}

func (x *HandleUplinkDataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleUplinkDataRequest.ProtoReflect.Descriptor instead.
func (*HandleUplinkDataRequest) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{25}
}

func (x *HandleUplinkDataRequest) GetDevEui() []byte {
	if x != nil {
		return x.DevEui
	}
	return nil
}

func (x *HandleUplinkDataRequest) GetJoinEui() []byte {
	if x != nil {
		return x.JoinEui
	}
	return nil
}

func (x *HandleUplinkDataRequest) GetFCnt() uint32 {
	if x != nil {
		return x.FCnt
	}
	return 0
}

func (x *HandleUplinkDataRequest) GetFPort() uint32 {
	if x != nil {
		return x.FPort
	}
	return 0
}

func (x *HandleUplinkDataRequest) GetAdr() bool {
	if x != nil {
		return x.Adr
	}
	return false
}

func (x *HandleUplinkDataRequest) GetDr() uint32 {
	if x != nil {
		return x.Dr
	}
	return 0
}

func (x *HandleUplinkDataRequest) GetTxInfo() *gw.UplinkTXInfo {
	if x != nil {
		return x.TxInfo
	}
	return nil
}

func (x *HandleUplinkDataRequest) GetRxInfo() []*gw.UplinkRXInfo {
	if x != nil {
		return x.RxInfo
	}
	return nil
}

func (x *HandleUplinkDataRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *HandleUplinkDataRequest) GetDeviceActivationContext() *DeviceActivationContext {
	if x != nil {
		return x.DeviceActivationContext
	}
	return nil
}

func (x *HandleUplinkDataRequest) GetConfirmedUplink() bool {
	if x != nil {
		return x.ConfirmedUplink
	}
	return false
}

func (x *HandleUplinkDataRequest) GetLate() bool {
	if x != nil {
		return x.Late
	}
	return false
}

func (x *HandleUplinkDataRequest) GetMic() []byte {
	if x != nil {
		return x.Mic
	}
	return nil
}

func (x *HandleUplinkDataRequest) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *HandleUplinkDataRequest) GetLimit() ns.RateLimit {
	if x != nil {
		return x.Limit
	}
	return ns.RateLimit(0)
}

func (x *HandleUplinkDataRequest) GetPer() float64 {
	if x != nil {
		return x.Per
	}
	return 0
}

func (x *HandleUplinkDataRequest) GetSnr() float64 {
	if x != nil {
		return x.Snr
	}
	return 0
}

func (x *HandleUplinkDataRequest) GetRssi() float64 {
	if x != nil {
		return x.Rssi
	}
	return 0
}

func (x *HandleUplinkDataRequest) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

type HandleProprietaryUplinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MACPayload of the proprietary LoRaWAN frame.
	MacPayload []byte `protobuf:"bytes,1,opt,name=mac_payload,json=macPayload,proto3" json:"mac_payload,omitempty"`
	// MIC of the proprietary LoRaWAN frame.
	Mic []byte `protobuf:"bytes,2,opt,name=mic,proto3" json:"mic,omitempty"`
	// TXInfo contains the TX related meta-data.
	TxInfo *gw.UplinkTXInfo `protobuf:"bytes,3,opt,name=tx_info,json=txInfo,proto3" json:"tx_info,omitempty"`
	// RXInfo contains the RX related meta-data.
	RxInfo []*gw.UplinkRXInfo `protobuf:"bytes,4,rep,name=rx_info,json=rxInfo,proto3" json:"rx_info,omitempty"`
}

func (x *HandleProprietaryUplinkRequest) Reset() {
	*x = HandleProprietaryUplinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleProprietaryUplinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleProprietaryUplinkRequest) ProtoMessage() {}

func (x *HandleProprietaryUplinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleProprietaryUplinkRequest.ProtoReflect.Descriptor instead.
func (*HandleProprietaryUplinkRequest) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{26}
}

func (x *HandleProprietaryUplinkRequest) GetMacPayload() []byte {
	if x != nil {
		return x.MacPayload
	}
	return nil
}

func (x *HandleProprietaryUplinkRequest) GetMic() []byte {
	if x != nil {
		return x.Mic
	}
	return nil
}

func (x *HandleProprietaryUplinkRequest) GetTxInfo() *gw.UplinkTXInfo {
	if x != nil {
		return x.TxInfo
	}
	return nil
}

func (x *HandleProprietaryUplinkRequest) GetRxInfo() []*gw.UplinkRXInfo {
	if x != nil {
		return x.RxInfo
	}
	return nil
}

type HandleErrorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI (8 bytes).
	DevEui []byte `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// Type of the error.
	Type ErrorType `protobuf:"varint,3,opt,name=type,proto3,enum=as.ErrorType" json:"type,omitempty"`
	// Error string describing the error.
	Error string `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	// Frame-counter (if applicable) related to the error.
	FCnt uint32 `protobuf:"varint,5,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	// Optional. the id can be generated on client's side or on A.S. to control tx
	MessageId string `protobuf:"bytes,6,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *HandleErrorRequest) Reset() {
	*x = HandleErrorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleErrorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleErrorRequest) ProtoMessage() {}

func (x *HandleErrorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleErrorRequest.ProtoReflect.Descriptor instead.
func (*HandleErrorRequest) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{27}
}

func (x *HandleErrorRequest) GetDevEui() []byte {
	if x != nil {
		return x.DevEui
	}
	return nil
}

func (x *HandleErrorRequest) GetType() ErrorType {
	if x != nil {
		return x.Type
	}
	return ErrorType_GENERIC
}

func (x *HandleErrorRequest) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *HandleErrorRequest) GetFCnt() uint32 {
	if x != nil {
		return x.FCnt
	}
	return 0
}

func (x *HandleErrorRequest) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

type HandleDownlinkACKRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI (8 bytes).
	DevEui []byte `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// Downlink frame-counter.
	FCnt uint32 `protobuf:"varint,2,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	// Frame was acknowledged?
	Acknowledged bool `protobuf:"varint,3,opt,name=acknowledged,proto3" json:"acknowledged,omitempty"`
	// optional. the id can be generated on client's side or on A.S. to control tx
	MessageId string `protobuf:"bytes,4,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *HandleDownlinkACKRequest) Reset() {
	*x = HandleDownlinkACKRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleDownlinkACKRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleDownlinkACKRequest) ProtoMessage() {}

func (x *HandleDownlinkACKRequest) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleDownlinkACKRequest.ProtoReflect.Descriptor instead.
func (*HandleDownlinkACKRequest) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{28}
}

func (x *HandleDownlinkACKRequest) GetDevEui() []byte {
	if x != nil {
		return x.DevEui
	}
	return nil
}

func (x *HandleDownlinkACKRequest) GetFCnt() uint32 {
	if x != nil {
		return x.FCnt
	}
	return 0
}

func (x *HandleDownlinkACKRequest) GetAcknowledged() bool {
	if x != nil {
		return x.Acknowledged
	}
	return false
}

func (x *HandleDownlinkACKRequest) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

type SetDeviceStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI (8 bytes).
	DevEui []byte `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// Battery level (deprecated, use battery_level).
	// 0:      The end-device is connected to an external power source
	// 1..254: The battery level, 1 being at minimum and 254 being at maximum
	// 255:    The end-device was not able to measure the battery level
	Battery uint32 `protobuf:"varint,2,opt,name=battery,proto3" json:"battery,omitempty"`
	// The device margin status
	// -32..32: The demodulation SNR ration in dB
	Margin int32 `protobuf:"varint,3,opt,name=margin,proto3" json:"margin,omitempty"`
	// Device is connected to an external power source.
	ExternalPowerSource bool `protobuf:"varint,4,opt,name=external_power_source,json=externalPowerSource,proto3" json:"external_power_source,omitempty"`
	// Device battery status is not available.
	BatteryLevelUnavailable bool `protobuf:"varint,5,opt,name=battery_level_unavailable,json=batteryLevelUnavailable,proto3" json:"battery_level_unavailable,omitempty"`
	// Battery level as a percentage.
	BatteryLevel float32 `protobuf:"fixed32,6,opt,name=battery_level,json=batteryLevel,proto3" json:"battery_level,omitempty"`
}

func (x *SetDeviceStatusRequest) Reset() {
	*x = SetDeviceStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDeviceStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDeviceStatusRequest) ProtoMessage() {}

func (x *SetDeviceStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDeviceStatusRequest.ProtoReflect.Descriptor instead.
func (*SetDeviceStatusRequest) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{29}
}

func (x *SetDeviceStatusRequest) GetDevEui() []byte {
	if x != nil {
		return x.DevEui
	}
	return nil
}

func (x *SetDeviceStatusRequest) GetBattery() uint32 {
	if x != nil {
		return x.Battery
	}
	return 0
}

func (x *SetDeviceStatusRequest) GetMargin() int32 {
	if x != nil {
		return x.Margin
	}
	return 0
}

func (x *SetDeviceStatusRequest) GetExternalPowerSource() bool {
	if x != nil {
		return x.ExternalPowerSource
	}
	return false
}

func (x *SetDeviceStatusRequest) GetBatteryLevelUnavailable() bool {
	if x != nil {
		return x.BatteryLevelUnavailable
	}
	return false
}

func (x *SetDeviceStatusRequest) GetBatteryLevel() float32 {
	if x != nil {
		return x.BatteryLevel
	}
	return 0
}

type SetDeviceLocationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI (8 bytes).
	DevEui []byte `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// The location of the device.
	Location *common.Location `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	// Uplink IDs used for geolocation.
	UplinkIds [][]byte `protobuf:"bytes,3,rep,name=uplink_ids,json=uplinkIds,proto3" json:"uplink_ids,omitempty"`
}

func (x *SetDeviceLocationRequest) Reset() {
	*x = SetDeviceLocationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDeviceLocationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDeviceLocationRequest) ProtoMessage() {}

func (x *SetDeviceLocationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDeviceLocationRequest.ProtoReflect.Descriptor instead.
func (*SetDeviceLocationRequest) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{30}
}

func (x *SetDeviceLocationRequest) GetDevEui() []byte {
	if x != nil {
		return x.DevEui
	}
	return nil
}

func (x *SetDeviceLocationRequest) GetLocation() *common.Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *SetDeviceLocationRequest) GetUplinkIds() [][]byte {
	if x != nil {
		return x.UplinkIds
	}
	return nil
}

type HandleGatewayStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gateway ID (8 bytes).
	GatewayId []byte `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	// Stats ID (UUID).
	StatsId []byte `protobuf:"bytes,2,opt,name=stats_id,json=statsId,proto3" json:"stats_id,omitempty"`
	// Timestamp.
	Time *timestamp.Timestamp `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
	// Gateway location.
	Location *common.Location `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	// Uplink frames received.
	RxPacketsReceived uint32 `protobuf:"varint,5,opt,name=rx_packets_received,json=rxPacketsReceived,proto3" json:"rx_packets_received,omitempty"`
	// Uplink frames received OK.
	RxPacketsReceivedOk uint32 `protobuf:"varint,6,opt,name=rx_packets_received_ok,json=rxPacketsReceivedOk,proto3" json:"rx_packets_received_ok,omitempty"`
	// Downlink transmissions requested.
	TxPacketsReceived uint32 `protobuf:"varint,7,opt,name=tx_packets_received,json=txPacketsReceived,proto3" json:"tx_packets_received,omitempty"`
	// Downlink emitted.
	TxPacketsEmitted uint32 `protobuf:"varint,8,opt,name=tx_packets_emitted,json=txPacketsEmitted,proto3" json:"tx_packets_emitted,omitempty"`
	// Gateway metadata.
	Metadata map[string]string `protobuf:"bytes,9,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Tx packets per frequency.
	TxPacketsPerFrequency map[uint32]uint32 `protobuf:"bytes,10,rep,name=tx_packets_per_frequency,json=txPacketsPerFrequency,proto3" json:"tx_packets_per_frequency,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Rx packets per frequency.
	RxPacketsPerFrequency map[uint32]uint32 `protobuf:"bytes,11,rep,name=rx_packets_per_frequency,json=rxPacketsPerFrequency,proto3" json:"rx_packets_per_frequency,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Tx packets per DR.
	TxPacketsPerDr map[uint32]uint32 `protobuf:"bytes,12,rep,name=tx_packets_per_dr,json=txPacketsPerDr,proto3" json:"tx_packets_per_dr,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Rx packets per DR.
	RxPacketsPerDr map[uint32]uint32 `protobuf:"bytes,13,rep,name=rx_packets_per_dr,json=rxPacketsPerDr,proto3" json:"rx_packets_per_dr,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// Tx packets per status.
	TxPacketsPerStatus map[string]uint32 `protobuf:"bytes,14,rep,name=tx_packets_per_status,json=txPacketsPerStatus,proto3" json:"tx_packets_per_status,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *HandleGatewayStatsRequest) Reset() {
	*x = HandleGatewayStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleGatewayStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleGatewayStatsRequest) ProtoMessage() {}

func (x *HandleGatewayStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleGatewayStatsRequest.ProtoReflect.Descriptor instead.
func (*HandleGatewayStatsRequest) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{31}
}

func (x *HandleGatewayStatsRequest) GetGatewayId() []byte {
	if x != nil {
		return x.GatewayId
	}
	return nil
}

func (x *HandleGatewayStatsRequest) GetStatsId() []byte {
	if x != nil {
		return x.StatsId
	}
	return nil
}

func (x *HandleGatewayStatsRequest) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *HandleGatewayStatsRequest) GetLocation() *common.Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *HandleGatewayStatsRequest) GetRxPacketsReceived() uint32 {
	if x != nil {
		return x.RxPacketsReceived
	}
	return 0
}

func (x *HandleGatewayStatsRequest) GetRxPacketsReceivedOk() uint32 {
	if x != nil {
		return x.RxPacketsReceivedOk
	}
	return 0
}

func (x *HandleGatewayStatsRequest) GetTxPacketsReceived() uint32 {
	if x != nil {
		return x.TxPacketsReceived
	}
	return 0
}

func (x *HandleGatewayStatsRequest) GetTxPacketsEmitted() uint32 {
	if x != nil {
		return x.TxPacketsEmitted
	}
	return 0
}

func (x *HandleGatewayStatsRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *HandleGatewayStatsRequest) GetTxPacketsPerFrequency() map[uint32]uint32 {
	if x != nil {
		return x.TxPacketsPerFrequency
	}
	return nil
}

func (x *HandleGatewayStatsRequest) GetRxPacketsPerFrequency() map[uint32]uint32 {
	if x != nil {
		return x.RxPacketsPerFrequency
	}
	return nil
}

func (x *HandleGatewayStatsRequest) GetTxPacketsPerDr() map[uint32]uint32 {
	if x != nil {
		return x.TxPacketsPerDr
	}
	return nil
}

func (x *HandleGatewayStatsRequest) GetRxPacketsPerDr() map[uint32]uint32 {
	if x != nil {
		return x.RxPacketsPerDr
	}
	return nil
}

func (x *HandleGatewayStatsRequest) GetTxPacketsPerStatus() map[string]uint32 {
	if x != nil {
		return x.TxPacketsPerStatus
	}
	return nil
}

type HandleTxAckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI (8 bytes).
	DevEui []byte `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// Downlink frame-counter.
	FCnt uint32 `protobuf:"varint,2,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	// Gateway ID.
	GatewayId []byte `protobuf:"bytes,3,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	// TXInfo contains the TX related meta-data.
	TxInfo *gw.DownlinkTXInfo `protobuf:"bytes,4,opt,name=tx_info,json=txInfo,proto3" json:"tx_info,omitempty"`
	// optional. the id was generated on client's side to control tx
	MessageId string `protobuf:"bytes,5,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *HandleTxAckRequest) Reset() {
	*x = HandleTxAckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HandleTxAckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HandleTxAckRequest) ProtoMessage() {}

func (x *HandleTxAckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HandleTxAckRequest.ProtoReflect.Descriptor instead.
func (*HandleTxAckRequest) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{32}
}

func (x *HandleTxAckRequest) GetDevEui() []byte {
	if x != nil {
		return x.DevEui
	}
	return nil
}

func (x *HandleTxAckRequest) GetFCnt() uint32 {
	if x != nil {
		return x.FCnt
	}
	return 0
}

func (x *HandleTxAckRequest) GetGatewayId() []byte {
	if x != nil {
		return x.GatewayId
	}
	return nil
}

func (x *HandleTxAckRequest) GetTxInfo() *gw.DownlinkTXInfo {
	if x != nil {
		return x.TxInfo
	}
	return nil
}

func (x *HandleTxAckRequest) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

type ReEncryptDeviceQueueItemsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DevEUI of the device.
	DevEui []byte `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// Device addres.
	// This is the device address which was used to encrypt the given
	// payloads.
	DevAddr []byte `protobuf:"bytes,2,opt,name=dev_addr,json=devAddr,proto3" json:"dev_addr,omitempty"`
	// Downlink frame-counter to start with.
	// The application-server must use this value when encrypting the first
	// item, and increment it for each successive item.
	FCntStart uint32 `protobuf:"varint,3,opt,name=f_cnt_start,json=fCntStart,proto3" json:"f_cnt_start,omitempty"`
	// Items to re-encrypt.
	Items []*ReEncryptDeviceQueueItem `protobuf:"bytes,4,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ReEncryptDeviceQueueItemsRequest) Reset() {
	*x = ReEncryptDeviceQueueItemsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReEncryptDeviceQueueItemsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReEncryptDeviceQueueItemsRequest) ProtoMessage() {}

func (x *ReEncryptDeviceQueueItemsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReEncryptDeviceQueueItemsRequest.ProtoReflect.Descriptor instead.
func (*ReEncryptDeviceQueueItemsRequest) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{33}
}

func (x *ReEncryptDeviceQueueItemsRequest) GetDevEui() []byte {
	if x != nil {
		return x.DevEui
	}
	return nil
}

func (x *ReEncryptDeviceQueueItemsRequest) GetDevAddr() []byte {
	if x != nil {
		return x.DevAddr
	}
	return nil
}

func (x *ReEncryptDeviceQueueItemsRequest) GetFCntStart() uint32 {
	if x != nil {
		return x.FCntStart
	}
	return 0
}

func (x *ReEncryptDeviceQueueItemsRequest) GetItems() []*ReEncryptDeviceQueueItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type ReEncryptDeviceQueueItemsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ReEncryptedDeviceQueueItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ReEncryptDeviceQueueItemsResponse) Reset() {
	*x = ReEncryptDeviceQueueItemsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReEncryptDeviceQueueItemsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReEncryptDeviceQueueItemsResponse) ProtoMessage() {}

func (x *ReEncryptDeviceQueueItemsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReEncryptDeviceQueueItemsResponse.ProtoReflect.Descriptor instead.
func (*ReEncryptDeviceQueueItemsResponse) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{34}
}

func (x *ReEncryptDeviceQueueItemsResponse) GetItems() []*ReEncryptedDeviceQueueItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type ReEncryptDeviceQueueItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The encrypted FRMPayload bytes.
	FrmPayload []byte `protobuf:"bytes,1,opt,name=frm_payload,json=frmPayload,proto3" json:"frm_payload,omitempty"`
	// The original FCnt of the payload.
	FCnt uint32 `protobuf:"varint,2,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	// The FPort of the payload.
	FPort uint32 `protobuf:"varint,3,opt,name=f_port,json=fPort,proto3" json:"f_port,omitempty"`
	// Payload is of type confirmed.
	Confirmed bool `protobuf:"varint,4,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
}

func (x *ReEncryptDeviceQueueItem) Reset() {
	*x = ReEncryptDeviceQueueItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReEncryptDeviceQueueItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReEncryptDeviceQueueItem) ProtoMessage() {}

func (x *ReEncryptDeviceQueueItem) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReEncryptDeviceQueueItem.ProtoReflect.Descriptor instead.
func (*ReEncryptDeviceQueueItem) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{35}
}

func (x *ReEncryptDeviceQueueItem) GetFrmPayload() []byte {
	if x != nil {
		return x.FrmPayload
	}
	return nil
}

func (x *ReEncryptDeviceQueueItem) GetFCnt() uint32 {
	if x != nil {
		return x.FCnt
	}
	return 0
}

func (x *ReEncryptDeviceQueueItem) GetFPort() uint32 {
	if x != nil {
		return x.FPort
	}
	return 0
}

func (x *ReEncryptDeviceQueueItem) GetConfirmed() bool {
	if x != nil {
		return x.Confirmed
	}
	return false
}

type ReEncryptedDeviceQueueItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The re-encrypted FRMPayload bytes.
	FrmPayload []byte `protobuf:"bytes,1,opt,name=frm_payload,json=frmPayload,proto3" json:"frm_payload,omitempty"`
	// The new FCnt of the payload.
	FCnt uint32 `protobuf:"varint,2,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	// The FPort of the payload.
	FPort uint32 `protobuf:"varint,3,opt,name=f_port,json=fPort,proto3" json:"f_port,omitempty"`
	// Payload is of type confirmed.
	Confirmed bool `protobuf:"varint,4,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	// non-encrypted FRMPayload bytes.
	NonEncrPl []byte `protobuf:"bytes,5,opt,name=non_encr_pl,json=nonEncrPl,proto3" json:"non_encr_pl,omitempty"`
}

func (x *ReEncryptedDeviceQueueItem) Reset() {
	*x = ReEncryptedDeviceQueueItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReEncryptedDeviceQueueItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReEncryptedDeviceQueueItem) ProtoMessage() {}

func (x *ReEncryptedDeviceQueueItem) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReEncryptedDeviceQueueItem.ProtoReflect.Descriptor instead.
func (*ReEncryptedDeviceQueueItem) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{36}
}

func (x *ReEncryptedDeviceQueueItem) GetFrmPayload() []byte {
	if x != nil {
		return x.FrmPayload
	}
	return nil
}

func (x *ReEncryptedDeviceQueueItem) GetFCnt() uint32 {
	if x != nil {
		return x.FCnt
	}
	return 0
}

func (x *ReEncryptedDeviceQueueItem) GetFPort() uint32 {
	if x != nil {
		return x.FPort
	}
	return 0
}

func (x *ReEncryptedDeviceQueueItem) GetConfirmed() bool {
	if x != nil {
		return x.Confirmed
	}
	return false
}

func (x *ReEncryptedDeviceQueueItem) GetNonEncrPl() []byte {
	if x != nil {
		return x.NonEncrPl
	}
	return nil
}

type GatewayTaskResponseData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gateway ID.
	GatewayId []byte `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayID,proto3" json:"gateway_id,omitempty"`
	// Execution request ID (UUID).
	ExecId []byte `protobuf:"bytes,2,opt,name=exec_id,json=execID,proto3" json:"exec_id,omitempty"`
	// command had been executed on gateway.
	Cmd string `protobuf:"bytes,3,opt,name=cmd,proto3" json:"cmd,omitempty"`
	// Standard error.
	Stderr []byte `protobuf:"bytes,4,opt,name=stderr,proto3" json:"stderr,omitempty"`
	// Error message from gateway-bridge.
	Error string `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	// Description
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// file (or other item) name. Optional
	Name string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GatewayTaskResponseData) Reset() {
	*x = GatewayTaskResponseData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayTaskResponseData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayTaskResponseData) ProtoMessage() {}

func (x *GatewayTaskResponseData) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayTaskResponseData.ProtoReflect.Descriptor instead.
func (*GatewayTaskResponseData) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{37}
}

func (x *GatewayTaskResponseData) GetGatewayId() []byte {
	if x != nil {
		return x.GatewayId
	}
	return nil
}

func (x *GatewayTaskResponseData) GetExecId() []byte {
	if x != nil {
		return x.ExecId
	}
	return nil
}

func (x *GatewayTaskResponseData) GetCmd() string {
	if x != nil {
		return x.Cmd
	}
	return ""
}

func (x *GatewayTaskResponseData) GetStderr() []byte {
	if x != nil {
		return x.Stderr
	}
	return nil
}

func (x *GatewayTaskResponseData) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *GatewayTaskResponseData) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GatewayTaskResponseData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GatewayTaskResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//	*GatewayTaskResult_Metadata
	//	*GatewayTaskResult_Chunk
	Result isGatewayTaskResult_Result `protobuf_oneof:"result"`
}

func (x *GatewayTaskResult) Reset() {
	*x = GatewayTaskResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayTaskResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayTaskResult) ProtoMessage() {}

func (x *GatewayTaskResult) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayTaskResult.ProtoReflect.Descriptor instead.
func (*GatewayTaskResult) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{38}
}

func (m *GatewayTaskResult) GetResult() isGatewayTaskResult_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *GatewayTaskResult) GetMetadata() *GatewayTaskResponseData {
	if x, ok := x.GetResult().(*GatewayTaskResult_Metadata); ok {
		return x.Metadata
	}
	return nil
}

func (x *GatewayTaskResult) GetChunk() []byte {
	if x, ok := x.GetResult().(*GatewayTaskResult_Chunk); ok {
		return x.Chunk
	}
	return nil
}

type isGatewayTaskResult_Result interface {
	isGatewayTaskResult_Result()
}

type GatewayTaskResult_Metadata struct {
	Metadata *GatewayTaskResponseData `protobuf:"bytes,1,opt,name=metadata,proto3,oneof"`
}

type GatewayTaskResult_Chunk struct {
	// stdin chunk
	Chunk []byte `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

func (*GatewayTaskResult_Metadata) isGatewayTaskResult_Result() {}

func (*GatewayTaskResult_Chunk) isGatewayTaskResult_Result() {}

type CheckJwtRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the string represents jwt token to check
	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *CheckJwtRequest) Reset() {
	*x = CheckJwtRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckJwtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckJwtRequest) ProtoMessage() {}

func (x *CheckJwtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckJwtRequest.ProtoReflect.Descriptor instead.
func (*CheckJwtRequest) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{39}
}

func (x *CheckJwtRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type CheckJwtResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// true if the user is active (enabled) the jwt belongs to
	IsActive bool `protobuf:"varint,1,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`
	// true - if the jwt belons to a user with admin writes
	IsAdmin bool `protobuf:"varint,2,opt,name=is_admin,json=isAdmin,proto3" json:"is_admin,omitempty"`
}

func (x *CheckJwtResponse) Reset() {
	*x = CheckJwtResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_as_as_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckJwtResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckJwtResponse) ProtoMessage() {}

func (x *CheckJwtResponse) ProtoReflect() protoreflect.Message {
	mi := &file_as_as_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckJwtResponse.ProtoReflect.Descriptor instead.
func (*CheckJwtResponse) Descriptor() ([]byte, []int) {
	return file_as_as_proto_rawDescGZIP(), []int{40}
}

func (x *CheckJwtResponse) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *CheckJwtResponse) GetIsAdmin() bool {
	if x != nil {
		return x.IsAdmin
	}
	return false
}

var File_as_as_proto protoreflect.FileDescriptor

var file_as_as_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x61, 0x73, 0x2f, 0x61, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x61,
	0x73, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x6e, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x67, 0x77, 0x2f, 0x67, 0x77, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x6e, 0x73, 0x2f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x3e, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x50, 0x6f, 0x6e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x13, 0x0a, 0x05,
	0x73, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x73, 0x70, 0x49,
	0x64, 0x22, 0x2a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4c, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x07, 0x61, 0x73,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x73,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x06, 0x61, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x7b, 0x0a, 0x1b, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x07, 0x61, 0x73,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x73,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x06, 0x61, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x07, 0x6e,
	0x73, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e,
	0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x06, 0x6e, 0x73, 0x44, 0x61, 0x74, 0x61, 0x22, 0x2e, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc3, 0x02, 0x0a, 0x12, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x6f,
	0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xa2,
	0x01, 0x0a, 0x0f, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x13, 0x0a, 0x05, 0x67, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x67, 0x77, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x73, 0x2e, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x51, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x47, 0x57, 0x4d, 0x65, 0x74, 0x61,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0d,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x73, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x31, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x64, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x64, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x22, 0x56, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x73,
	0x2e, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0x6e, 0x0a, 0x0a, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x69, 0x63, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x75, 0x61,
	0x6c, 0x22, 0x30, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x42, 0x79, 0x44, 0x65, 0x76,
	0x45, 0x55, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65,
	0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x76,
	0x45, 0x55, 0x49, 0x22, 0x86, 0x01, 0x0a, 0x11, 0x4e, 0x65, 0x77, 0x41, 0x70, 0x70, 0x53, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76,
	0x5f, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45,
	0x55, 0x49, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x64, 0x65, 0x76, 0x41, 0x64, 0x64, 0x72, 0x12, 0x3d, 0x0a,
	0x10, 0x61, 0x65, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x65, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x0e, 0x61, 0x65,
	0x73, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x22, 0x27, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x42, 0x79, 0x47, 0x77, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x70, 0x70, 0x53, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x49, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x6e, 0x77, 0x6b, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x6e, 0x77, 0x6b, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x61, 0x70, 0x70,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x61, 0x70, 0x70, 0x4b,
	0x65, 0x79, 0x22, 0x28, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x42, 0x79, 0x44, 0x65,
	0x76, 0x45, 0x55, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5f, 0x0a, 0x17,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x22, 0x6d, 0x0a,
	0x18, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x73, 0x2e,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xff, 0x01, 0x0a,
	0x14, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x63, 0x61, 0x6e, 0x5f, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x61, 0x6e, 0x48, 0x61, 0x76, 0x65,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x43,
	0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72,
	0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0e, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x44, 0x22, 0x92, 0x02, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x6e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x08, 0x64,
	0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x61, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x44, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x64, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x65, 0x6e,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6e, 0x65,
	0x76, 0x65, 0x72, 0x53, 0x65, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x3a, 0x0a, 0x0c,
	0x44, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x44, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0x90,
	0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x53, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x65, 0x76, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x6e, 0x65, 0x76, 0x65, 0x72, 0x53, 0x65, 0x65, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x65, 0x0a, 0x17, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08,
	0x64, 0x65, 0x76, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x64, 0x65, 0x76, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2f, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x5f, 0x73,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52,
	0x07, 0x61, 0x70, 0x70, 0x53, 0x4b, 0x65, 0x79, 0x22, 0xd2, 0x04, 0x0a, 0x17, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x75, 0x69, 0x12, 0x19, 0x0a,
	0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x6a, 0x6f, 0x69, 0x6e, 0x45, 0x75, 0x69, 0x12, 0x13, 0x0a, 0x05, 0x66, 0x5f, 0x63, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x43, 0x6e, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x66, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x03, 0x61, 0x64, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x02, 0x64, 0x72, 0x12, 0x29, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x77, 0x2e, 0x55, 0x70, 0x6c,
	0x69, 0x6e, 0x6b, 0x54, 0x58, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x74, 0x78, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x29, 0x0a, 0x07, 0x72, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x77, 0x2e, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x58,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x72, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x57, 0x0a, 0x19, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x17, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x55, 0x70,
	0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x63, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d, 0x69, 0x63, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6e, 0x73, 0x2e, 0x52,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x70, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x70, 0x65,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x6e, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03,
	0x73, 0x6e, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x73, 0x73, 0x69, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x04, 0x72, 0x73, 0x73, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x22, 0xa9, 0x01,
	0x0a, 0x1e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x65, 0x74,
	0x61, 0x72, 0x79, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x6d, 0x69, 0x63, 0x12, 0x29, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x77, 0x2e, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b,
	0x54, 0x58, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x74, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29,
	0x0a, 0x07, 0x72, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x67, 0x77, 0x2e, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x58, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x06, 0x72, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x9a, 0x01, 0x0a, 0x12, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x75, 0x69, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x61, 0x73, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x13, 0x0a, 0x05, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x66, 0x43, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x18, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x43, 0x4b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x75, 0x69, 0x12, 0x13, 0x0a, 0x05,
	0x66, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x43, 0x6e,
	0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x22, 0xf8, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x75, 0x69, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3a,
	0x0a, 0x19, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x75, 0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x55,
	0x6e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0c, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22,
	0x80, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x45, 0x75, 0x69, 0x12, 0x2c, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x49,
	0x64, 0x73, 0x22, 0xe9, 0x0a, 0x0a, 0x19, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x73, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x78, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x78, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f,
	0x6f, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x13, 0x72, 0x78, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x4f, 0x6b, 0x12, 0x2e, 0x0a,
	0x13, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x76, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x74, 0x78, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x65, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x78, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x45, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x61, 0x73, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x71, 0x0a, 0x18, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x73, 0x2e, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x50,
	0x65, 0x72, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x15, 0x74, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x50, 0x65, 0x72, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x71, 0x0a, 0x18, 0x72, 0x78, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x61, 0x73, 0x2e, 0x48,
	0x61, 0x6e, 0x64, 0x6c, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x52, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x50, 0x65, 0x72, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x15, 0x72, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x50, 0x65,
	0x72, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x5c, 0x0a, 0x11, 0x74, 0x78,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x72, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x73, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x50, 0x65,
	0x72, 0x44, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x74, 0x78, 0x50, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x50, 0x65, 0x72, 0x44, 0x72, 0x12, 0x5c, 0x0a, 0x11, 0x72, 0x78, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x72, 0x18, 0x0d, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x61, 0x73, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x52, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x50, 0x65, 0x72, 0x44,
	0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x72, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x50, 0x65, 0x72, 0x44, 0x72, 0x12, 0x68, 0x0a, 0x15, 0x74, 0x78, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x73, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x50, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x74, 0x78,
	0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x50, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x48, 0x0a,
	0x1a, 0x54, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x50, 0x65, 0x72, 0x46, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x48, 0x0a, 0x1a, 0x52, 0x78, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x50, 0x65, 0x72, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x41, 0x0a, 0x13, 0x54, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x50, 0x65,
	0x72, 0x44, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x52, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x73, 0x50, 0x65, 0x72, 0x44, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x45, 0x0a, 0x17, 0x54, 0x78, 0x50, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x50, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xad,
	0x01, 0x0a, 0x12, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x78, 0x41, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x75, 0x69, 0x12, 0x13,
	0x0a, 0x05, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66,
	0x43, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x49, 0x64, 0x12, 0x2b, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x77, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e,
	0x6b, 0x54, 0x58, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x74, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x22, 0xaa,
	0x01, 0x0a, 0x20, 0x52, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x75, 0x69, 0x12, 0x19, 0x0a, 0x08,
	0x64, 0x65, 0x76, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x64, 0x65, 0x76, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1e, 0x0a, 0x0b, 0x66, 0x5f, 0x63, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x43,
	0x6e, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x73, 0x2e, 0x52, 0x65, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x59, 0x0a, 0x21, 0x52,
	0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x61, 0x73, 0x2e, 0x52, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x85, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6d, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x66, 0x72, 0x6d, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x43, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x22, 0xa7,
	0x01, 0x0a, 0x1a, 0x52, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x72, 0x6d, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x66, 0x72, 0x6d, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x13,
	0x0a, 0x05, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66,
	0x43, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x6f, 0x6e, 0x5f,
	0x65, 0x6e, 0x63, 0x72, 0x5f, 0x70, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6e,
	0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x72, 0x50, 0x6c, 0x22, 0xc7, 0x01, 0x0a, 0x17, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x65, 0x78, 0x65, 0x63, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03,
	0x63, 0x6d, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x6d, 0x64, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0x70, 0x0a, 0x11, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x73, 0x2e, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x16, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0x27, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4a, 0x77, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4a, 0x0a,
	0x10, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4a, 0x77, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x73, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x73, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x2a, 0x1c, 0x0a, 0x08, 0x52, 0x58, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x58, 0x31, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x52, 0x58, 0x32, 0x10, 0x01, 0x2a, 0xbb, 0x01, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x54, 0x41, 0x41, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x50, 0x5f, 0x46, 0x43, 0x4e, 0x54, 0x5f, 0x52, 0x45, 0x53,
	0x45, 0x54, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x50, 0x5f,
	0x4d, 0x49, 0x43, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f,
	0x51, 0x55, 0x45, 0x55, 0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10,
	0x04, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x51, 0x55, 0x45, 0x55,
	0x45, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x46, 0x43, 0x4e, 0x54, 0x10, 0x05, 0x12, 0x1f, 0x0a,
	0x1b, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x50, 0x5f, 0x46, 0x43, 0x4e, 0x54, 0x5f, 0x52, 0x45,
	0x54, 0x52, 0x41, 0x4e, 0x53, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x12, 0x15,
	0x0a, 0x11, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x44, 0x4f, 0x57, 0x4e, 0x5f, 0x47, 0x41, 0x54, 0x45,
	0x57, 0x41, 0x59, 0x10, 0x07, 0x32, 0xde, 0x0e, 0x0a, 0x18, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x49, 0x0a, 0x10, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x55, 0x70, 0x6c, 0x69,
	0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x2e, 0x61, 0x73, 0x2e, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x57, 0x0a,
	0x17, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x65, 0x74, 0x61,
	0x72, 0x79, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x22, 0x2e, 0x61, 0x73, 0x2e, 0x48, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x65, 0x74, 0x61, 0x72, 0x79, 0x55,
	0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x16, 0x2e, 0x61, 0x73, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x11, 0x48, 0x61, 0x6e, 0x64, 0x6c,
	0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x43, 0x4b, 0x12, 0x1c, 0x2e, 0x61,
	0x73, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b,
	0x41, 0x43, 0x4b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x12, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x61, 0x73, 0x2e,
	0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0b, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x78, 0x41,
	0x63, 0x6b, 0x12, 0x16, 0x2e, 0x61, 0x73, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x54, 0x78,
	0x41, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x2e, 0x61, 0x73, 0x2e, 0x53, 0x65, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a,
	0x11, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x2e, 0x61, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x1c, 0x2e, 0x61, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e,
	0x61, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x55,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x53, 0x75, 0x6d,
	0x6d, 0x61, 0x72, 0x79, 0x12, 0x1d, 0x2e, 0x61, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x73, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x2e, 0x61, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67,
	0x42, 0x79, 0x44, 0x65, 0x76, 0x45, 0x55, 0x49, 0x12, 0x19, 0x2e, 0x61, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x67, 0x42, 0x79, 0x44, 0x65, 0x76, 0x45, 0x55, 0x49, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x42,
	0x79, 0x44, 0x65, 0x76, 0x45, 0x55, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x49, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x49, 0x44, 0x42, 0x79, 0x47,
	0x77, 0x49, 0x44, 0x12, 0x19, 0x2e, 0x61, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x49,
	0x44, 0x42, 0x79, 0x47, 0x77, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x61, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x42, 0x79, 0x44, 0x65, 0x76, 0x45,
	0x55, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x70, 0x70, 0x53, 0x4b, 0x65, 0x79,
	0x12, 0x19, 0x2e, 0x61, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x42, 0x79, 0x44, 0x65,
	0x76, 0x45, 0x55, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x70, 0x70, 0x53, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0d, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x19, 0x2e, 0x61,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x67, 0x42, 0x79, 0x44, 0x65, 0x76, 0x45, 0x55, 0x49,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x73, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x19, 0x52, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x24, 0x2e, 0x61, 0x73, 0x2e, 0x52, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x73, 0x2e, 0x52, 0x65, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x4c, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x15, 0x2e, 0x61, 0x73,
	0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x28, 0x01, 0x12, 0x46,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x12,
	0x18, 0x2e, 0x61, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x44, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x47, 0x57, 0x4d,
	0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x19, 0x2e, 0x61, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x57, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x1c, 0x2e, 0x61, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x61, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5b, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x61, 0x73, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x73, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a,
	0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x50, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x1b, 0x2e, 0x61, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x50, 0x6f,
	0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0a, 0x4e, 0x65, 0x77, 0x41,
	0x70, 0x70, 0x53, 0x4b, 0x65, 0x79, 0x12, 0x15, 0x2e, 0x61, 0x73, 0x2e, 0x4e, 0x65, 0x77, 0x41,
	0x70, 0x70, 0x53, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e,
	0x61, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x70, 0x70, 0x53,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x37, 0x0a,
	0x08, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4a, 0x77, 0x74, 0x12, 0x13, 0x2e, 0x61, 0x73, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x4a, 0x77, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14,
	0x2e, 0x61, 0x73, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4a, 0x77, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x5c, 0x0a, 0x14, 0x69, 0x6f, 0x2e, 0x63, 0x68, 0x69,
	0x72, 0x70, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x73, 0x42, 0x16,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x72, 0x6f, 0x63, 0x61, 0x61, 0x72, 0x2f, 0x63, 0x68, 0x69,
	0x72, 0x70, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x76,
	0x33, 0x2f, 0x61, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_as_as_proto_rawDescOnce sync.Once
	file_as_as_proto_rawDescData = file_as_as_proto_rawDesc
)

func file_as_as_proto_rawDescGZIP() []byte {
	file_as_as_proto_rawDescOnce.Do(func() {
		file_as_as_proto_rawDescData = protoimpl.X.CompressGZIP(file_as_as_proto_rawDescData)
	})
	return file_as_as_proto_rawDescData
}

var file_as_as_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_as_as_proto_msgTypes = make([]protoimpl.MessageInfo, 49)
var file_as_as_proto_goTypes = []interface{}{
	(RXWindow)(0),                             // 0: as.RXWindow
	(ErrorType)(0),                            // 1: as.ErrorType
	(*UpdateSPonDeviceRequest)(nil),           // 2: as.UpdateSPonDeviceRequest
	(*GetServiceProfileRequest)(nil),          // 3: as.GetServiceProfileRequest
	(*GetServiceProfileResponse)(nil),         // 4: as.GetServiceProfileResponse
	(*CreateServiceProfileRequest)(nil),       // 5: as.CreateServiceProfileRequest
	(*CreateServiceProfileResponse)(nil),      // 6: as.CreateServiceProfileResponse
	(*ServiceProfileItem)(nil),                // 7: as.ServiceProfileItem
	(*GatewayMetaData)(nil),                   // 8: as.GatewayMetaData
	(*GetGWMetaDataResponse)(nil),             // 9: as.GetGWMetaDataResponse
	(*GetDictionaryRequest)(nil),              // 10: as.GetDictionaryRequest
	(*GetDictionaryResponse)(nil),             // 11: as.GetDictionaryResponse
	(*Dictionary)(nil),                        // 12: as.Dictionary
	(*GetOrgByDevEUIRequest)(nil),             // 13: as.GetOrgByDevEUIRequest
	(*NewAppSKeyRequest)(nil),                 // 14: as.NewAppSKeyRequest
	(*GetOrgIDByGwIDRequest)(nil),             // 15: as.GetOrgIDByGwIDRequest
	(*GetDeviceAppSKeyResponse)(nil),          // 16: as.GetDeviceAppSKeyResponse
	(*GetDeviceKeysResponse)(nil),             // 17: as.GetDeviceKeysResponse
	(*GetOrgByDevEUIResponse)(nil),            // 18: as.GetOrgByDevEUIResponse
	(*ListOrganizationRequest)(nil),           // 19: as.ListOrganizationRequest
	(*ListOrganizationResponse)(nil),          // 20: as.ListOrganizationResponse
	(*OrganizationListItem)(nil),              // 21: as.OrganizationListItem
	(*GetDevicesSummaryRequest)(nil),          // 22: as.GetDevicesSummaryRequest
	(*GetDevicesSummaryResponse)(nil),         // 23: as.GetDevicesSummaryResponse
	(*GetGatewaysSummaryRequest)(nil),         // 24: as.GetGatewaysSummaryRequest
	(*GetGatewaysSummaryResponse)(nil),        // 25: as.GetGatewaysSummaryResponse
	(*DeviceActivationContext)(nil),           // 26: as.DeviceActivationContext
	(*HandleUplinkDataRequest)(nil),           // 27: as.HandleUplinkDataRequest
	(*HandleProprietaryUplinkRequest)(nil),    // 28: as.HandleProprietaryUplinkRequest
	(*HandleErrorRequest)(nil),                // 29: as.HandleErrorRequest
	(*HandleDownlinkACKRequest)(nil),          // 30: as.HandleDownlinkACKRequest
	(*SetDeviceStatusRequest)(nil),            // 31: as.SetDeviceStatusRequest
	(*SetDeviceLocationRequest)(nil),          // 32: as.SetDeviceLocationRequest
	(*HandleGatewayStatsRequest)(nil),         // 33: as.HandleGatewayStatsRequest
	(*HandleTxAckRequest)(nil),                // 34: as.HandleTxAckRequest
	(*ReEncryptDeviceQueueItemsRequest)(nil),  // 35: as.ReEncryptDeviceQueueItemsRequest
	(*ReEncryptDeviceQueueItemsResponse)(nil), // 36: as.ReEncryptDeviceQueueItemsResponse
	(*ReEncryptDeviceQueueItem)(nil),          // 37: as.ReEncryptDeviceQueueItem
	(*ReEncryptedDeviceQueueItem)(nil),        // 38: as.ReEncryptedDeviceQueueItem
	(*GatewayTaskResponseData)(nil),           // 39: as.GatewayTaskResponseData
	(*GatewayTaskResult)(nil),                 // 40: as.GatewayTaskResult
	(*CheckJwtRequest)(nil),                   // 41: as.CheckJwtRequest
	(*CheckJwtResponse)(nil),                  // 42: as.CheckJwtResponse
	nil,                                       // 43: as.GatewayMetaData.MetadataEntry
	nil,                                       // 44: as.GetDevicesSummaryResponse.DrCountEntry
	nil,                                       // 45: as.HandleGatewayStatsRequest.MetadataEntry
	nil,                                       // 46: as.HandleGatewayStatsRequest.TxPacketsPerFrequencyEntry
	nil,                                       // 47: as.HandleGatewayStatsRequest.RxPacketsPerFrequencyEntry
	nil,                                       // 48: as.HandleGatewayStatsRequest.TxPacketsPerDrEntry
	nil,                                       // 49: as.HandleGatewayStatsRequest.RxPacketsPerDrEntry
	nil,                                       // 50: as.HandleGatewayStatsRequest.TxPacketsPerStatusEntry
	(*ns.ServiceProfile)(nil),                 // 51: ns.ServiceProfile
	(*timestamp.Timestamp)(nil),               // 52: google.protobuf.Timestamp
	(*common.KeyEnvelope)(nil),                // 53: common.KeyEnvelope
	(*gw.UplinkTXInfo)(nil),                   // 54: gw.UplinkTXInfo
	(*gw.UplinkRXInfo)(nil),                   // 55: gw.UplinkRXInfo
	(ns.RateLimit)(0),                         // 56: ns.RateLimit
	(*common.Location)(nil),                   // 57: common.Location
	(*gw.DownlinkTXInfo)(nil),                 // 58: gw.DownlinkTXInfo
	(*empty.Empty)(nil),                       // 59: google.protobuf.Empty
}
var file_as_as_proto_depIdxs = []int32{
	7,  // 0: as.GetServiceProfileResponse.as_data:type_name -> as.ServiceProfileItem
	7,  // 1: as.CreateServiceProfileRequest.as_data:type_name -> as.ServiceProfileItem
	51, // 2: as.CreateServiceProfileRequest.ns_data:type_name -> ns.ServiceProfile
	52, // 3: as.ServiceProfileItem.created_at:type_name -> google.protobuf.Timestamp
	52, // 4: as.ServiceProfileItem.updated_at:type_name -> google.protobuf.Timestamp
	43, // 5: as.GatewayMetaData.metadata:type_name -> as.GatewayMetaData.MetadataEntry
	8,  // 6: as.GetGWMetaDataResponse.metadata_list:type_name -> as.GatewayMetaData
	12, // 7: as.GetDictionaryResponse.list:type_name -> as.Dictionary
	53, // 8: as.NewAppSKeyRequest.aes_key_envelope:type_name -> common.KeyEnvelope
	21, // 9: as.ListOrganizationResponse.result:type_name -> as.OrganizationListItem
	52, // 10: as.OrganizationListItem.created_at:type_name -> google.protobuf.Timestamp
	52, // 11: as.OrganizationListItem.updated_at:type_name -> google.protobuf.Timestamp
	44, // 12: as.GetDevicesSummaryResponse.dr_count:type_name -> as.GetDevicesSummaryResponse.DrCountEntry
	53, // 13: as.DeviceActivationContext.app_s_key:type_name -> common.KeyEnvelope
	54, // 14: as.HandleUplinkDataRequest.tx_info:type_name -> gw.UplinkTXInfo
	55, // 15: as.HandleUplinkDataRequest.rx_info:type_name -> gw.UplinkRXInfo
	26, // 16: as.HandleUplinkDataRequest.device_activation_context:type_name -> as.DeviceActivationContext
	52, // 17: as.HandleUplinkDataRequest.time:type_name -> google.protobuf.Timestamp
	56, // 18: as.HandleUplinkDataRequest.limit:type_name -> ns.RateLimit
	54, // 19: as.HandleProprietaryUplinkRequest.tx_info:type_name -> gw.UplinkTXInfo
	55, // 20: as.HandleProprietaryUplinkRequest.rx_info:type_name -> gw.UplinkRXInfo
	1,  // 21: as.HandleErrorRequest.type:type_name -> as.ErrorType
	57, // 22: as.SetDeviceLocationRequest.location:type_name -> common.Location
	52, // 23: as.HandleGatewayStatsRequest.time:type_name -> google.protobuf.Timestamp
	57, // 24: as.HandleGatewayStatsRequest.location:type_name -> common.Location
	45, // 25: as.HandleGatewayStatsRequest.metadata:type_name -> as.HandleGatewayStatsRequest.MetadataEntry
	46, // 26: as.HandleGatewayStatsRequest.tx_packets_per_frequency:type_name -> as.HandleGatewayStatsRequest.TxPacketsPerFrequencyEntry
	47, // 27: as.HandleGatewayStatsRequest.rx_packets_per_frequency:type_name -> as.HandleGatewayStatsRequest.RxPacketsPerFrequencyEntry
	48, // 28: as.HandleGatewayStatsRequest.tx_packets_per_dr:type_name -> as.HandleGatewayStatsRequest.TxPacketsPerDrEntry
	49, // 29: as.HandleGatewayStatsRequest.rx_packets_per_dr:type_name -> as.HandleGatewayStatsRequest.RxPacketsPerDrEntry
	50, // 30: as.HandleGatewayStatsRequest.tx_packets_per_status:type_name -> as.HandleGatewayStatsRequest.TxPacketsPerStatusEntry
	58, // 31: as.HandleTxAckRequest.tx_info:type_name -> gw.DownlinkTXInfo
	37, // 32: as.ReEncryptDeviceQueueItemsRequest.items:type_name -> as.ReEncryptDeviceQueueItem
	38, // 33: as.ReEncryptDeviceQueueItemsResponse.items:type_name -> as.ReEncryptedDeviceQueueItem
	39, // 34: as.GatewayTaskResult.metadata:type_name -> as.GatewayTaskResponseData
	27, // 35: as.ApplicationServerService.HandleUplinkData:input_type -> as.HandleUplinkDataRequest
	28, // 36: as.ApplicationServerService.HandleProprietaryUplink:input_type -> as.HandleProprietaryUplinkRequest
	29, // 37: as.ApplicationServerService.HandleError:input_type -> as.HandleErrorRequest
	30, // 38: as.ApplicationServerService.HandleDownlinkACK:input_type -> as.HandleDownlinkACKRequest
	33, // 39: as.ApplicationServerService.HandleGatewayStats:input_type -> as.HandleGatewayStatsRequest
	34, // 40: as.ApplicationServerService.HandleTxAck:input_type -> as.HandleTxAckRequest
	31, // 41: as.ApplicationServerService.SetDeviceStatus:input_type -> as.SetDeviceStatusRequest
	32, // 42: as.ApplicationServerService.SetDeviceLocation:input_type -> as.SetDeviceLocationRequest
	22, // 43: as.ApplicationServerService.GetDevicesSummary:input_type -> as.GetDevicesSummaryRequest
	24, // 44: as.ApplicationServerService.GetGatewaysSummary:input_type -> as.GetGatewaysSummaryRequest
	19, // 45: as.ApplicationServerService.ListOrganisation:input_type -> as.ListOrganizationRequest
	13, // 46: as.ApplicationServerService.GetOrgByDevEUI:input_type -> as.GetOrgByDevEUIRequest
	15, // 47: as.ApplicationServerService.GetOrgIDByGwID:input_type -> as.GetOrgIDByGwIDRequest
	13, // 48: as.ApplicationServerService.GetDeviceAppSKey:input_type -> as.GetOrgByDevEUIRequest
	13, // 49: as.ApplicationServerService.GetDeviceKeys:input_type -> as.GetOrgByDevEUIRequest
	35, // 50: as.ApplicationServerService.ReEncryptDeviceQueueItems:input_type -> as.ReEncryptDeviceQueueItemsRequest
	40, // 51: as.ApplicationServerService.StreamGatewayTaskResult:input_type -> as.GatewayTaskResult
	10, // 52: as.ApplicationServerService.GetDictionary:input_type -> as.GetDictionaryRequest
	59, // 53: as.ApplicationServerService.GetGWMetaData:input_type -> google.protobuf.Empty
	3,  // 54: as.ApplicationServerService.GetServiceProfile:input_type -> as.GetServiceProfileRequest
	5,  // 55: as.ApplicationServerService.CreateServiceProfile:input_type -> as.CreateServiceProfileRequest
	2,  // 56: as.ApplicationServerService.UpdateSPonDevice:input_type -> as.UpdateSPonDeviceRequest
	14, // 57: as.ApplicationServerService.NewAppSKey:input_type -> as.NewAppSKeyRequest
	41, // 58: as.ApplicationServerService.CheckJwt:input_type -> as.CheckJwtRequest
	59, // 59: as.ApplicationServerService.HandleUplinkData:output_type -> google.protobuf.Empty
	59, // 60: as.ApplicationServerService.HandleProprietaryUplink:output_type -> google.protobuf.Empty
	59, // 61: as.ApplicationServerService.HandleError:output_type -> google.protobuf.Empty
	59, // 62: as.ApplicationServerService.HandleDownlinkACK:output_type -> google.protobuf.Empty
	59, // 63: as.ApplicationServerService.HandleGatewayStats:output_type -> google.protobuf.Empty
	59, // 64: as.ApplicationServerService.HandleTxAck:output_type -> google.protobuf.Empty
	59, // 65: as.ApplicationServerService.SetDeviceStatus:output_type -> google.protobuf.Empty
	59, // 66: as.ApplicationServerService.SetDeviceLocation:output_type -> google.protobuf.Empty
	23, // 67: as.ApplicationServerService.GetDevicesSummary:output_type -> as.GetDevicesSummaryResponse
	25, // 68: as.ApplicationServerService.GetGatewaysSummary:output_type -> as.GetGatewaysSummaryResponse
	20, // 69: as.ApplicationServerService.ListOrganisation:output_type -> as.ListOrganizationResponse
	18, // 70: as.ApplicationServerService.GetOrgByDevEUI:output_type -> as.GetOrgByDevEUIResponse
	18, // 71: as.ApplicationServerService.GetOrgIDByGwID:output_type -> as.GetOrgByDevEUIResponse
	16, // 72: as.ApplicationServerService.GetDeviceAppSKey:output_type -> as.GetDeviceAppSKeyResponse
	17, // 73: as.ApplicationServerService.GetDeviceKeys:output_type -> as.GetDeviceKeysResponse
	36, // 74: as.ApplicationServerService.ReEncryptDeviceQueueItems:output_type -> as.ReEncryptDeviceQueueItemsResponse
	59, // 75: as.ApplicationServerService.StreamGatewayTaskResult:output_type -> google.protobuf.Empty
	11, // 76: as.ApplicationServerService.GetDictionary:output_type -> as.GetDictionaryResponse
	9,  // 77: as.ApplicationServerService.GetGWMetaData:output_type -> as.GetGWMetaDataResponse
	4,  // 78: as.ApplicationServerService.GetServiceProfile:output_type -> as.GetServiceProfileResponse
	6,  // 79: as.ApplicationServerService.CreateServiceProfile:output_type -> as.CreateServiceProfileResponse
	59, // 80: as.ApplicationServerService.UpdateSPonDevice:output_type -> google.protobuf.Empty
	16, // 81: as.ApplicationServerService.NewAppSKey:output_type -> as.GetDeviceAppSKeyResponse
	42, // 82: as.ApplicationServerService.CheckJwt:output_type -> as.CheckJwtResponse
	59, // [59:83] is the sub-list for method output_type
	35, // [35:59] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_as_as_proto_init() }
func file_as_as_proto_init() {
	if File_as_as_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_as_as_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSPonDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateServiceProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateServiceProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceProfileItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayMetaData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGWMetaDataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDictionaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDictionaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dictionary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrgByDevEUIRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewAppSKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrgIDByGwIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceAppSKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrgByDevEUIResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListOrganizationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDevicesSummaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDevicesSummaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGatewaysSummaryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGatewaysSummaryResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceActivationContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleUplinkDataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleProprietaryUplinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleErrorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleDownlinkACKRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDeviceStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDeviceLocationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleGatewayStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HandleTxAckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReEncryptDeviceQueueItemsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReEncryptDeviceQueueItemsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReEncryptDeviceQueueItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReEncryptedDeviceQueueItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayTaskResponseData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayTaskResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckJwtRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_as_as_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckJwtResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_as_as_proto_msgTypes[38].OneofWrappers = []interface{}{
		(*GatewayTaskResult_Metadata)(nil),
		(*GatewayTaskResult_Chunk)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_as_as_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   49,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_as_as_proto_goTypes,
		DependencyIndexes: file_as_as_proto_depIdxs,
		EnumInfos:         file_as_as_proto_enumTypes,
		MessageInfos:      file_as_as_proto_msgTypes,
	}.Build()
	File_as_as_proto = out.File
	file_as_as_proto_rawDesc = nil
	file_as_as_proto_goTypes = nil
	file_as_as_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ApplicationServerServiceClient is the client API for ApplicationServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApplicationServerServiceClient interface {
	// HandleUplinkData handles uplink data received from an end-device.
	HandleUplinkData(ctx context.Context, in *HandleUplinkDataRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// HandleProprietaryUplink handles proprietary uplink payloads.
	HandleProprietaryUplink(ctx context.Context, in *HandleProprietaryUplinkRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// HandleError handles an error message.
	HandleError(ctx context.Context, in *HandleErrorRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// HandleDownlinkACK handles a downlink ACK or nACK response.
	HandleDownlinkACK(ctx context.Context, in *HandleDownlinkACKRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// HandleGatewayStats handles the given gateway stats.
	HandleGatewayStats(ctx context.Context, in *HandleGatewayStatsRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// HandleTXACK handles the TX acknowledgement.
	HandleTxAck(ctx context.Context, in *HandleTxAckRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// SetDeviceStatus updates the device-status for a device.
	SetDeviceStatus(ctx context.Context, in *SetDeviceStatusRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// SetDeviceLocation updates the device-location for a device.
	SetDeviceLocation(ctx context.Context, in *SetDeviceLocationRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// SetDeviceLocation updates the device-location for a device.
	GetDevicesSummary(ctx context.Context, in *GetDevicesSummaryRequest, opts ...grpc.CallOption) (*GetDevicesSummaryResponse, error)
	// SetDeviceLocation updates the device-location for a device.
	GetGatewaysSummary(ctx context.Context, in *GetGatewaysSummaryRequest, opts ...grpc.CallOption) (*GetGatewaysSummaryResponse, error)
	// SetDeviceLocation updates the device-location for a device.
	ListOrganisation(ctx context.Context, in *ListOrganizationRequest, opts ...grpc.CallOption) (*ListOrganizationResponse, error)
	// GetOrgByDevEUI returns organization id by devEUI. Modification.
	GetOrgByDevEUI(ctx context.Context, in *GetOrgByDevEUIRequest, opts ...grpc.CallOption) (*GetOrgByDevEUIResponse, error)
	// GetOrgIDByGwID returns organization id by gwID. Modification.
	GetOrgIDByGwID(ctx context.Context, in *GetOrgIDByGwIDRequest, opts ...grpc.CallOption) (*GetOrgByDevEUIResponse, error)
	// GetDeviceAppSKey returns AES128Key by devEUI. Modification.
	GetDeviceAppSKey(ctx context.Context, in *GetOrgByDevEUIRequest, opts ...grpc.CallOption) (*GetDeviceAppSKeyResponse, error)
	// GetDeviceKeys returns NwkKey,AppKey by devEUI. Modification.
	GetDeviceKeys(ctx context.Context, in *GetOrgByDevEUIRequest, opts ...grpc.CallOption) (*GetDeviceKeysResponse, error)
	// ReEncryptDeviceQueueItems requests the application-server to re-encrypt
	// the given payload items using the new parameters. This request is
	// for example triggered when the associated frame-counter of a downlink
	// payload will be used by a mac-layer only payload, e.g. when the NS has
	// mac-commands (or ACKs) to send to the device and combining this with
	// an application-layer payload would exceed the max. payload size.
	// Note there is no requirement that the number of returned items must be
	// equal to the number of requested items.
	ReEncryptDeviceQueueItems(ctx context.Context, in *ReEncryptDeviceQueueItemsRequest, opts ...grpc.CallOption) (*ReEncryptDeviceQueueItemsResponse, error)
	// StreamGatewayTaskResult stream ExecCmd results from gateway to save into as-db
	StreamGatewayTaskResult(ctx context.Context, opts ...grpc.CallOption) (ApplicationServerService_StreamGatewayTaskResultClient, error)
	// GetDictionary returns list of dictionary by the type. Modification.
	GetDictionary(ctx context.Context, in *GetDictionaryRequest, opts ...grpc.CallOption) (*GetDictionaryResponse, error)
	// GetGWMetaData returns a map with last metadata for the gw
	GetGWMetaData(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetGWMetaDataResponse, error)
	// GetServiceProfile (TEMP for ADR MIGRATE) returns sp from as-database (local only)
	GetServiceProfile(ctx context.Context, in *GetServiceProfileRequest, opts ...grpc.CallOption) (*GetServiceProfileResponse, error)
	// CreateServiceProfile (TEMP for ADR MIGRATE) creates service profile in as local db.
	CreateServiceProfile(ctx context.Context, in *CreateServiceProfileRequest, opts ...grpc.CallOption) (*CreateServiceProfileResponse, error)
	// UpdateSPonDevice (TEMP for ADR MIGRATE) update SP for device in local db.
	UpdateSPonDevice(ctx context.Context, in *UpdateSPonDeviceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// NewAppSKey returns and saves AppSKey (AES128Key) according to join_server config (if kek is enabled). Modification.
	NewAppSKey(ctx context.Context, in *NewAppSKeyRequest, opts ...grpc.CallOption) (*GetDeviceAppSKeyResponse, error)
	// CheckJwt checks if the JWT recieved is valid
	CheckJwt(ctx context.Context, in *CheckJwtRequest, opts ...grpc.CallOption) (*CheckJwtResponse, error)
}

type applicationServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationServerServiceClient(cc grpc.ClientConnInterface) ApplicationServerServiceClient {
	return &applicationServerServiceClient{cc}
}

func (c *applicationServerServiceClient) HandleUplinkData(ctx context.Context, in *HandleUplinkDataRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/as.ApplicationServerService/HandleUplinkData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) HandleProprietaryUplink(ctx context.Context, in *HandleProprietaryUplinkRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/as.ApplicationServerService/HandleProprietaryUplink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) HandleError(ctx context.Context, in *HandleErrorRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/as.ApplicationServerService/HandleError", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) HandleDownlinkACK(ctx context.Context, in *HandleDownlinkACKRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/as.ApplicationServerService/HandleDownlinkACK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) HandleGatewayStats(ctx context.Context, in *HandleGatewayStatsRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/as.ApplicationServerService/HandleGatewayStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) HandleTxAck(ctx context.Context, in *HandleTxAckRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/as.ApplicationServerService/HandleTxAck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) SetDeviceStatus(ctx context.Context, in *SetDeviceStatusRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/as.ApplicationServerService/SetDeviceStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) SetDeviceLocation(ctx context.Context, in *SetDeviceLocationRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/as.ApplicationServerService/SetDeviceLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) GetDevicesSummary(ctx context.Context, in *GetDevicesSummaryRequest, opts ...grpc.CallOption) (*GetDevicesSummaryResponse, error) {
	out := new(GetDevicesSummaryResponse)
	err := c.cc.Invoke(ctx, "/as.ApplicationServerService/GetDevicesSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) GetGatewaysSummary(ctx context.Context, in *GetGatewaysSummaryRequest, opts ...grpc.CallOption) (*GetGatewaysSummaryResponse, error) {
	out := new(GetGatewaysSummaryResponse)
	err := c.cc.Invoke(ctx, "/as.ApplicationServerService/GetGatewaysSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) ListOrganisation(ctx context.Context, in *ListOrganizationRequest, opts ...grpc.CallOption) (*ListOrganizationResponse, error) {
	out := new(ListOrganizationResponse)
	err := c.cc.Invoke(ctx, "/as.ApplicationServerService/ListOrganisation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) GetOrgByDevEUI(ctx context.Context, in *GetOrgByDevEUIRequest, opts ...grpc.CallOption) (*GetOrgByDevEUIResponse, error) {
	out := new(GetOrgByDevEUIResponse)
	err := c.cc.Invoke(ctx, "/as.ApplicationServerService/GetOrgByDevEUI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) GetOrgIDByGwID(ctx context.Context, in *GetOrgIDByGwIDRequest, opts ...grpc.CallOption) (*GetOrgByDevEUIResponse, error) {
	out := new(GetOrgByDevEUIResponse)
	err := c.cc.Invoke(ctx, "/as.ApplicationServerService/GetOrgIDByGwID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) GetDeviceAppSKey(ctx context.Context, in *GetOrgByDevEUIRequest, opts ...grpc.CallOption) (*GetDeviceAppSKeyResponse, error) {
	out := new(GetDeviceAppSKeyResponse)
	err := c.cc.Invoke(ctx, "/as.ApplicationServerService/GetDeviceAppSKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) GetDeviceKeys(ctx context.Context, in *GetOrgByDevEUIRequest, opts ...grpc.CallOption) (*GetDeviceKeysResponse, error) {
	out := new(GetDeviceKeysResponse)
	err := c.cc.Invoke(ctx, "/as.ApplicationServerService/GetDeviceKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) ReEncryptDeviceQueueItems(ctx context.Context, in *ReEncryptDeviceQueueItemsRequest, opts ...grpc.CallOption) (*ReEncryptDeviceQueueItemsResponse, error) {
	out := new(ReEncryptDeviceQueueItemsResponse)
	err := c.cc.Invoke(ctx, "/as.ApplicationServerService/ReEncryptDeviceQueueItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) StreamGatewayTaskResult(ctx context.Context, opts ...grpc.CallOption) (ApplicationServerService_StreamGatewayTaskResultClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ApplicationServerService_serviceDesc.Streams[0], "/as.ApplicationServerService/StreamGatewayTaskResult", opts...)
	if err != nil {
		return nil, err
	}
	x := &applicationServerServiceStreamGatewayTaskResultClient{stream}
	return x, nil
}

type ApplicationServerService_StreamGatewayTaskResultClient interface {
	Send(*GatewayTaskResult) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type applicationServerServiceStreamGatewayTaskResultClient struct {
	grpc.ClientStream
}

func (x *applicationServerServiceStreamGatewayTaskResultClient) Send(m *GatewayTaskResult) error {
	return x.ClientStream.SendMsg(m)
}

func (x *applicationServerServiceStreamGatewayTaskResultClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *applicationServerServiceClient) GetDictionary(ctx context.Context, in *GetDictionaryRequest, opts ...grpc.CallOption) (*GetDictionaryResponse, error) {
	out := new(GetDictionaryResponse)
	err := c.cc.Invoke(ctx, "/as.ApplicationServerService/GetDictionary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) GetGWMetaData(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetGWMetaDataResponse, error) {
	out := new(GetGWMetaDataResponse)
	err := c.cc.Invoke(ctx, "/as.ApplicationServerService/GetGWMetaData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) GetServiceProfile(ctx context.Context, in *GetServiceProfileRequest, opts ...grpc.CallOption) (*GetServiceProfileResponse, error) {
	out := new(GetServiceProfileResponse)
	err := c.cc.Invoke(ctx, "/as.ApplicationServerService/GetServiceProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) CreateServiceProfile(ctx context.Context, in *CreateServiceProfileRequest, opts ...grpc.CallOption) (*CreateServiceProfileResponse, error) {
	out := new(CreateServiceProfileResponse)
	err := c.cc.Invoke(ctx, "/as.ApplicationServerService/CreateServiceProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) UpdateSPonDevice(ctx context.Context, in *UpdateSPonDeviceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/as.ApplicationServerService/UpdateSPonDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) NewAppSKey(ctx context.Context, in *NewAppSKeyRequest, opts ...grpc.CallOption) (*GetDeviceAppSKeyResponse, error) {
	out := new(GetDeviceAppSKeyResponse)
	err := c.cc.Invoke(ctx, "/as.ApplicationServerService/NewAppSKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) CheckJwt(ctx context.Context, in *CheckJwtRequest, opts ...grpc.CallOption) (*CheckJwtResponse, error) {
	out := new(CheckJwtResponse)
	err := c.cc.Invoke(ctx, "/as.ApplicationServerService/CheckJwt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationServerServiceServer is the server API for ApplicationServerService service.
type ApplicationServerServiceServer interface {
	// HandleUplinkData handles uplink data received from an end-device.
	HandleUplinkData(context.Context, *HandleUplinkDataRequest) (*empty.Empty, error)
	// HandleProprietaryUplink handles proprietary uplink payloads.
	HandleProprietaryUplink(context.Context, *HandleProprietaryUplinkRequest) (*empty.Empty, error)
	// HandleError handles an error message.
	HandleError(context.Context, *HandleErrorRequest) (*empty.Empty, error)
	// HandleDownlinkACK handles a downlink ACK or nACK response.
	HandleDownlinkACK(context.Context, *HandleDownlinkACKRequest) (*empty.Empty, error)
	// HandleGatewayStats handles the given gateway stats.
	HandleGatewayStats(context.Context, *HandleGatewayStatsRequest) (*empty.Empty, error)
	// HandleTXACK handles the TX acknowledgement.
	HandleTxAck(context.Context, *HandleTxAckRequest) (*empty.Empty, error)
	// SetDeviceStatus updates the device-status for a device.
	SetDeviceStatus(context.Context, *SetDeviceStatusRequest) (*empty.Empty, error)
	// SetDeviceLocation updates the device-location for a device.
	SetDeviceLocation(context.Context, *SetDeviceLocationRequest) (*empty.Empty, error)
	// SetDeviceLocation updates the device-location for a device.
	GetDevicesSummary(context.Context, *GetDevicesSummaryRequest) (*GetDevicesSummaryResponse, error)
	// SetDeviceLocation updates the device-location for a device.
	GetGatewaysSummary(context.Context, *GetGatewaysSummaryRequest) (*GetGatewaysSummaryResponse, error)
	// SetDeviceLocation updates the device-location for a device.
	ListOrganisation(context.Context, *ListOrganizationRequest) (*ListOrganizationResponse, error)
	// GetOrgByDevEUI returns organization id by devEUI. Modification.
	GetOrgByDevEUI(context.Context, *GetOrgByDevEUIRequest) (*GetOrgByDevEUIResponse, error)
	// GetOrgIDByGwID returns organization id by gwID. Modification.
	GetOrgIDByGwID(context.Context, *GetOrgIDByGwIDRequest) (*GetOrgByDevEUIResponse, error)
	// GetDeviceAppSKey returns AES128Key by devEUI. Modification.
	GetDeviceAppSKey(context.Context, *GetOrgByDevEUIRequest) (*GetDeviceAppSKeyResponse, error)
	// GetDeviceKeys returns NwkKey,AppKey by devEUI. Modification.
	GetDeviceKeys(context.Context, *GetOrgByDevEUIRequest) (*GetDeviceKeysResponse, error)
	// ReEncryptDeviceQueueItems requests the application-server to re-encrypt
	// the given payload items using the new parameters. This request is
	// for example triggered when the associated frame-counter of a downlink
	// payload will be used by a mac-layer only payload, e.g. when the NS has
	// mac-commands (or ACKs) to send to the device and combining this with
	// an application-layer payload would exceed the max. payload size.
	// Note there is no requirement that the number of returned items must be
	// equal to the number of requested items.
	ReEncryptDeviceQueueItems(context.Context, *ReEncryptDeviceQueueItemsRequest) (*ReEncryptDeviceQueueItemsResponse, error)
	// StreamGatewayTaskResult stream ExecCmd results from gateway to save into as-db
	StreamGatewayTaskResult(ApplicationServerService_StreamGatewayTaskResultServer) error
	// GetDictionary returns list of dictionary by the type. Modification.
	GetDictionary(context.Context, *GetDictionaryRequest) (*GetDictionaryResponse, error)
	// GetGWMetaData returns a map with last metadata for the gw
	GetGWMetaData(context.Context, *empty.Empty) (*GetGWMetaDataResponse, error)
	// GetServiceProfile (TEMP for ADR MIGRATE) returns sp from as-database (local only)
	GetServiceProfile(context.Context, *GetServiceProfileRequest) (*GetServiceProfileResponse, error)
	// CreateServiceProfile (TEMP for ADR MIGRATE) creates service profile in as local db.
	CreateServiceProfile(context.Context, *CreateServiceProfileRequest) (*CreateServiceProfileResponse, error)
	// UpdateSPonDevice (TEMP for ADR MIGRATE) update SP for device in local db.
	UpdateSPonDevice(context.Context, *UpdateSPonDeviceRequest) (*empty.Empty, error)
	// NewAppSKey returns and saves AppSKey (AES128Key) according to join_server config (if kek is enabled). Modification.
	NewAppSKey(context.Context, *NewAppSKeyRequest) (*GetDeviceAppSKeyResponse, error)
	// CheckJwt checks if the JWT recieved is valid
	CheckJwt(context.Context, *CheckJwtRequest) (*CheckJwtResponse, error)
}

// UnimplementedApplicationServerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedApplicationServerServiceServer struct {
}

func (*UnimplementedApplicationServerServiceServer) HandleUplinkData(context.Context, *HandleUplinkDataRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleUplinkData not implemented")
}
func (*UnimplementedApplicationServerServiceServer) HandleProprietaryUplink(context.Context, *HandleProprietaryUplinkRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleProprietaryUplink not implemented")
}
func (*UnimplementedApplicationServerServiceServer) HandleError(context.Context, *HandleErrorRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleError not implemented")
}
func (*UnimplementedApplicationServerServiceServer) HandleDownlinkACK(context.Context, *HandleDownlinkACKRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleDownlinkACK not implemented")
}
func (*UnimplementedApplicationServerServiceServer) HandleGatewayStats(context.Context, *HandleGatewayStatsRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleGatewayStats not implemented")
}
func (*UnimplementedApplicationServerServiceServer) HandleTxAck(context.Context, *HandleTxAckRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleTxAck not implemented")
}
func (*UnimplementedApplicationServerServiceServer) SetDeviceStatus(context.Context, *SetDeviceStatusRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeviceStatus not implemented")
}
func (*UnimplementedApplicationServerServiceServer) SetDeviceLocation(context.Context, *SetDeviceLocationRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeviceLocation not implemented")
}
func (*UnimplementedApplicationServerServiceServer) GetDevicesSummary(context.Context, *GetDevicesSummaryRequest) (*GetDevicesSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevicesSummary not implemented")
}
func (*UnimplementedApplicationServerServiceServer) GetGatewaysSummary(context.Context, *GetGatewaysSummaryRequest) (*GetGatewaysSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGatewaysSummary not implemented")
}
func (*UnimplementedApplicationServerServiceServer) ListOrganisation(context.Context, *ListOrganizationRequest) (*ListOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganisation not implemented")
}
func (*UnimplementedApplicationServerServiceServer) GetOrgByDevEUI(context.Context, *GetOrgByDevEUIRequest) (*GetOrgByDevEUIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgByDevEUI not implemented")
}
func (*UnimplementedApplicationServerServiceServer) GetOrgIDByGwID(context.Context, *GetOrgIDByGwIDRequest) (*GetOrgByDevEUIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgIDByGwID not implemented")
}
func (*UnimplementedApplicationServerServiceServer) GetDeviceAppSKey(context.Context, *GetOrgByDevEUIRequest) (*GetDeviceAppSKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceAppSKey not implemented")
}
func (*UnimplementedApplicationServerServiceServer) GetDeviceKeys(context.Context, *GetOrgByDevEUIRequest) (*GetDeviceKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceKeys not implemented")
}
func (*UnimplementedApplicationServerServiceServer) ReEncryptDeviceQueueItems(context.Context, *ReEncryptDeviceQueueItemsRequest) (*ReEncryptDeviceQueueItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReEncryptDeviceQueueItems not implemented")
}
func (*UnimplementedApplicationServerServiceServer) StreamGatewayTaskResult(ApplicationServerService_StreamGatewayTaskResultServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamGatewayTaskResult not implemented")
}
func (*UnimplementedApplicationServerServiceServer) GetDictionary(context.Context, *GetDictionaryRequest) (*GetDictionaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictionary not implemented")
}
func (*UnimplementedApplicationServerServiceServer) GetGWMetaData(context.Context, *empty.Empty) (*GetGWMetaDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGWMetaData not implemented")
}
func (*UnimplementedApplicationServerServiceServer) GetServiceProfile(context.Context, *GetServiceProfileRequest) (*GetServiceProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceProfile not implemented")
}
func (*UnimplementedApplicationServerServiceServer) CreateServiceProfile(context.Context, *CreateServiceProfileRequest) (*CreateServiceProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceProfile not implemented")
}
func (*UnimplementedApplicationServerServiceServer) UpdateSPonDevice(context.Context, *UpdateSPonDeviceRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSPonDevice not implemented")
}
func (*UnimplementedApplicationServerServiceServer) NewAppSKey(context.Context, *NewAppSKeyRequest) (*GetDeviceAppSKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewAppSKey not implemented")
}
func (*UnimplementedApplicationServerServiceServer) CheckJwt(context.Context, *CheckJwtRequest) (*CheckJwtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckJwt not implemented")
}

func RegisterApplicationServerServiceServer(s *grpc.Server, srv ApplicationServerServiceServer) {
	s.RegisterService(&_ApplicationServerService_serviceDesc, srv)
}

func _ApplicationServerService_HandleUplinkData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleUplinkDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).HandleUplinkData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/as.ApplicationServerService/HandleUplinkData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).HandleUplinkData(ctx, req.(*HandleUplinkDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_HandleProprietaryUplink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleProprietaryUplinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).HandleProprietaryUplink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/as.ApplicationServerService/HandleProprietaryUplink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).HandleProprietaryUplink(ctx, req.(*HandleProprietaryUplinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_HandleError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).HandleError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/as.ApplicationServerService/HandleError",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).HandleError(ctx, req.(*HandleErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_HandleDownlinkACK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleDownlinkACKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).HandleDownlinkACK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/as.ApplicationServerService/HandleDownlinkACK",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).HandleDownlinkACK(ctx, req.(*HandleDownlinkACKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_HandleGatewayStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleGatewayStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).HandleGatewayStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/as.ApplicationServerService/HandleGatewayStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).HandleGatewayStats(ctx, req.(*HandleGatewayStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_HandleTxAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleTxAckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).HandleTxAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/as.ApplicationServerService/HandleTxAck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).HandleTxAck(ctx, req.(*HandleTxAckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_SetDeviceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeviceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).SetDeviceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/as.ApplicationServerService/SetDeviceStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).SetDeviceStatus(ctx, req.(*SetDeviceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_SetDeviceLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeviceLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).SetDeviceLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/as.ApplicationServerService/SetDeviceLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).SetDeviceLocation(ctx, req.(*SetDeviceLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_GetDevicesSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDevicesSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).GetDevicesSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/as.ApplicationServerService/GetDevicesSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).GetDevicesSummary(ctx, req.(*GetDevicesSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_GetGatewaysSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewaysSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).GetGatewaysSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/as.ApplicationServerService/GetGatewaysSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).GetGatewaysSummary(ctx, req.(*GetGatewaysSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_ListOrganisation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).ListOrganisation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/as.ApplicationServerService/ListOrganisation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).ListOrganisation(ctx, req.(*ListOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_GetOrgByDevEUI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgByDevEUIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).GetOrgByDevEUI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/as.ApplicationServerService/GetOrgByDevEUI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).GetOrgByDevEUI(ctx, req.(*GetOrgByDevEUIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_GetOrgIDByGwID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgIDByGwIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).GetOrgIDByGwID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/as.ApplicationServerService/GetOrgIDByGwID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).GetOrgIDByGwID(ctx, req.(*GetOrgIDByGwIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_GetDeviceAppSKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgByDevEUIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).GetDeviceAppSKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/as.ApplicationServerService/GetDeviceAppSKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).GetDeviceAppSKey(ctx, req.(*GetOrgByDevEUIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_GetDeviceKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgByDevEUIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).GetDeviceKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/as.ApplicationServerService/GetDeviceKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).GetDeviceKeys(ctx, req.(*GetOrgByDevEUIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_ReEncryptDeviceQueueItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReEncryptDeviceQueueItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).ReEncryptDeviceQueueItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/as.ApplicationServerService/ReEncryptDeviceQueueItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).ReEncryptDeviceQueueItems(ctx, req.(*ReEncryptDeviceQueueItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_StreamGatewayTaskResult_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApplicationServerServiceServer).StreamGatewayTaskResult(&applicationServerServiceStreamGatewayTaskResultServer{stream})
}

type ApplicationServerService_StreamGatewayTaskResultServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*GatewayTaskResult, error)
	grpc.ServerStream
}

type applicationServerServiceStreamGatewayTaskResultServer struct {
	grpc.ServerStream
}

func (x *applicationServerServiceStreamGatewayTaskResultServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *applicationServerServiceStreamGatewayTaskResultServer) Recv() (*GatewayTaskResult, error) {
	m := new(GatewayTaskResult)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ApplicationServerService_GetDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictionaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).GetDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/as.ApplicationServerService/GetDictionary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).GetDictionary(ctx, req.(*GetDictionaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_GetGWMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).GetGWMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/as.ApplicationServerService/GetGWMetaData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).GetGWMetaData(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_GetServiceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).GetServiceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/as.ApplicationServerService/GetServiceProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).GetServiceProfile(ctx, req.(*GetServiceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_CreateServiceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).CreateServiceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/as.ApplicationServerService/CreateServiceProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).CreateServiceProfile(ctx, req.(*CreateServiceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_UpdateSPonDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSPonDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).UpdateSPonDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/as.ApplicationServerService/UpdateSPonDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).UpdateSPonDevice(ctx, req.(*UpdateSPonDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_NewAppSKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAppSKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).NewAppSKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/as.ApplicationServerService/NewAppSKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).NewAppSKey(ctx, req.(*NewAppSKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_CheckJwt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckJwtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).CheckJwt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/as.ApplicationServerService/CheckJwt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).CheckJwt(ctx, req.(*CheckJwtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ApplicationServerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "as.ApplicationServerService",
	HandlerType: (*ApplicationServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleUplinkData",
			Handler:    _ApplicationServerService_HandleUplinkData_Handler,
		},
		{
			MethodName: "HandleProprietaryUplink",
			Handler:    _ApplicationServerService_HandleProprietaryUplink_Handler,
		},
		{
			MethodName: "HandleError",
			Handler:    _ApplicationServerService_HandleError_Handler,
		},
		{
			MethodName: "HandleDownlinkACK",
			Handler:    _ApplicationServerService_HandleDownlinkACK_Handler,
		},
		{
			MethodName: "HandleGatewayStats",
			Handler:    _ApplicationServerService_HandleGatewayStats_Handler,
		},
		{
			MethodName: "HandleTxAck",
			Handler:    _ApplicationServerService_HandleTxAck_Handler,
		},
		{
			MethodName: "SetDeviceStatus",
			Handler:    _ApplicationServerService_SetDeviceStatus_Handler,
		},
		{
			MethodName: "SetDeviceLocation",
			Handler:    _ApplicationServerService_SetDeviceLocation_Handler,
		},
		{
			MethodName: "GetDevicesSummary",
			Handler:    _ApplicationServerService_GetDevicesSummary_Handler,
		},
		{
			MethodName: "GetGatewaysSummary",
			Handler:    _ApplicationServerService_GetGatewaysSummary_Handler,
		},
		{
			MethodName: "ListOrganisation",
			Handler:    _ApplicationServerService_ListOrganisation_Handler,
		},
		{
			MethodName: "GetOrgByDevEUI",
			Handler:    _ApplicationServerService_GetOrgByDevEUI_Handler,
		},
		{
			MethodName: "GetOrgIDByGwID",
			Handler:    _ApplicationServerService_GetOrgIDByGwID_Handler,
		},
		{
			MethodName: "GetDeviceAppSKey",
			Handler:    _ApplicationServerService_GetDeviceAppSKey_Handler,
		},
		{
			MethodName: "GetDeviceKeys",
			Handler:    _ApplicationServerService_GetDeviceKeys_Handler,
		},
		{
			MethodName: "ReEncryptDeviceQueueItems",
			Handler:    _ApplicationServerService_ReEncryptDeviceQueueItems_Handler,
		},
		{
			MethodName: "GetDictionary",
			Handler:    _ApplicationServerService_GetDictionary_Handler,
		},
		{
			MethodName: "GetGWMetaData",
			Handler:    _ApplicationServerService_GetGWMetaData_Handler,
		},
		{
			MethodName: "GetServiceProfile",
			Handler:    _ApplicationServerService_GetServiceProfile_Handler,
		},
		{
			MethodName: "CreateServiceProfile",
			Handler:    _ApplicationServerService_CreateServiceProfile_Handler,
		},
		{
			MethodName: "UpdateSPonDevice",
			Handler:    _ApplicationServerService_UpdateSPonDevice_Handler,
		},
		{
			MethodName: "NewAppSKey",
			Handler:    _ApplicationServerService_NewAppSKey_Handler,
		},
		{
			MethodName: "CheckJwt",
			Handler:    _ApplicationServerService_CheckJwt_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamGatewayTaskResult",
			Handler:       _ApplicationServerService_StreamGatewayTaskResult_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "as/as.proto",
}
