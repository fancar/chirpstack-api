// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: as/as.proto

package as

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ApplicationServerService_HandleUplinkData_FullMethodName          = "/as.ApplicationServerService/HandleUplinkData"
	ApplicationServerService_HandleProprietaryUplink_FullMethodName   = "/as.ApplicationServerService/HandleProprietaryUplink"
	ApplicationServerService_HandleError_FullMethodName               = "/as.ApplicationServerService/HandleError"
	ApplicationServerService_HandleDownlinkACK_FullMethodName         = "/as.ApplicationServerService/HandleDownlinkACK"
	ApplicationServerService_HandleGatewayStats_FullMethodName        = "/as.ApplicationServerService/HandleGatewayStats"
	ApplicationServerService_HandleTxAck_FullMethodName               = "/as.ApplicationServerService/HandleTxAck"
	ApplicationServerService_SetDeviceStatus_FullMethodName           = "/as.ApplicationServerService/SetDeviceStatus"
	ApplicationServerService_SetDeviceLocation_FullMethodName         = "/as.ApplicationServerService/SetDeviceLocation"
	ApplicationServerService_GetDevicesSummary_FullMethodName         = "/as.ApplicationServerService/GetDevicesSummary"
	ApplicationServerService_GetGatewaysSummary_FullMethodName        = "/as.ApplicationServerService/GetGatewaysSummary"
	ApplicationServerService_ListOrganisation_FullMethodName          = "/as.ApplicationServerService/ListOrganisation"
	ApplicationServerService_GetOrgByDevEUI_FullMethodName            = "/as.ApplicationServerService/GetOrgByDevEUI"
	ApplicationServerService_GetOrgIDByGwID_FullMethodName            = "/as.ApplicationServerService/GetOrgIDByGwID"
	ApplicationServerService_GetDeviceAppSKey_FullMethodName          = "/as.ApplicationServerService/GetDeviceAppSKey"
	ApplicationServerService_GetDeviceKeys_FullMethodName             = "/as.ApplicationServerService/GetDeviceKeys"
	ApplicationServerService_ReEncryptDeviceQueueItems_FullMethodName = "/as.ApplicationServerService/ReEncryptDeviceQueueItems"
	ApplicationServerService_StreamGatewayTaskResult_FullMethodName   = "/as.ApplicationServerService/StreamGatewayTaskResult"
	ApplicationServerService_GetDictionary_FullMethodName             = "/as.ApplicationServerService/GetDictionary"
	ApplicationServerService_GetGWMetaData_FullMethodName             = "/as.ApplicationServerService/GetGWMetaData"
	ApplicationServerService_GetServiceProfile_FullMethodName         = "/as.ApplicationServerService/GetServiceProfile"
	ApplicationServerService_CreateServiceProfile_FullMethodName      = "/as.ApplicationServerService/CreateServiceProfile"
	ApplicationServerService_UpdateSPonDevice_FullMethodName          = "/as.ApplicationServerService/UpdateSPonDevice"
	ApplicationServerService_NewAppSKey_FullMethodName                = "/as.ApplicationServerService/NewAppSKey"
	ApplicationServerService_CheckJwt_FullMethodName                  = "/as.ApplicationServerService/CheckJwt"
)

// ApplicationServerServiceClient is the client API for ApplicationServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationServerServiceClient interface {
	// HandleUplinkData handles uplink data received from an end-device.
	HandleUplinkData(ctx context.Context, in *HandleUplinkDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// HandleProprietaryUplink handles proprietary uplink payloads.
	HandleProprietaryUplink(ctx context.Context, in *HandleProprietaryUplinkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// HandleError handles an error message.
	HandleError(ctx context.Context, in *HandleErrorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// HandleDownlinkACK handles a downlink ACK or nACK response.
	HandleDownlinkACK(ctx context.Context, in *HandleDownlinkACKRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// HandleGatewayStats handles the given gateway stats.
	HandleGatewayStats(ctx context.Context, in *HandleGatewayStatsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// HandleTXACK handles the TX acknowledgement.
	HandleTxAck(ctx context.Context, in *HandleTxAckRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// SetDeviceStatus updates the device-status for a device.
	SetDeviceStatus(ctx context.Context, in *SetDeviceStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// SetDeviceLocation updates the device-location for a device.
	SetDeviceLocation(ctx context.Context, in *SetDeviceLocationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// SetDeviceLocation updates the device-location for a device.
	GetDevicesSummary(ctx context.Context, in *GetDevicesSummaryRequest, opts ...grpc.CallOption) (*GetDevicesSummaryResponse, error)
	// SetDeviceLocation updates the device-location for a device.
	GetGatewaysSummary(ctx context.Context, in *GetGatewaysSummaryRequest, opts ...grpc.CallOption) (*GetGatewaysSummaryResponse, error)
	// SetDeviceLocation updates the device-location for a device.
	ListOrganisation(ctx context.Context, in *ListOrganizationRequest, opts ...grpc.CallOption) (*ListOrganizationResponse, error)
	// GetOrgByDevEUI returns organization id by devEUI. Modification.
	GetOrgByDevEUI(ctx context.Context, in *GetOrgByDevEUIRequest, opts ...grpc.CallOption) (*GetOrgByDevEUIResponse, error)
	// GetOrgIDByGwID returns organization id by gwID. Modification.
	GetOrgIDByGwID(ctx context.Context, in *GetOrgIDByGwIDRequest, opts ...grpc.CallOption) (*GetOrgByDevEUIResponse, error)
	// GetDeviceAppSKey returns AES128Key by devEUI. Modification.
	GetDeviceAppSKey(ctx context.Context, in *GetOrgByDevEUIRequest, opts ...grpc.CallOption) (*GetDeviceAppSKeyResponse, error)
	// GetDeviceKeys returns NwkKey,AppKey by devEUI. Modification.
	GetDeviceKeys(ctx context.Context, in *GetOrgByDevEUIRequest, opts ...grpc.CallOption) (*GetDeviceKeysResponse, error)
	// ReEncryptDeviceQueueItems requests the application-server to re-encrypt
	// the given payload items using the new parameters. This request is
	// for example triggered when the associated frame-counter of a downlink
	// payload will be used by a mac-layer only payload, e.g. when the NS has
	// mac-commands (or ACKs) to send to the device and combining this with
	// an application-layer payload would exceed the max. payload size.
	// Note there is no requirement that the number of returned items must be
	// equal to the number of requested items.
	ReEncryptDeviceQueueItems(ctx context.Context, in *ReEncryptDeviceQueueItemsRequest, opts ...grpc.CallOption) (*ReEncryptDeviceQueueItemsResponse, error)
	// StreamGatewayTaskResult stream ExecCmd results from gateway to save into as-db
	StreamGatewayTaskResult(ctx context.Context, opts ...grpc.CallOption) (ApplicationServerService_StreamGatewayTaskResultClient, error)
	// GetDictionary returns list of dictionary by the type. Modification.
	GetDictionary(ctx context.Context, in *GetDictionaryRequest, opts ...grpc.CallOption) (*GetDictionaryResponse, error)
	// GetGWMetaData returns a map with last metadata for the gw
	GetGWMetaData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetGWMetaDataResponse, error)
	// GetServiceProfile (TEMP for ADR MIGRATE) returns sp from as-database (local only)
	GetServiceProfile(ctx context.Context, in *GetServiceProfileRequest, opts ...grpc.CallOption) (*GetServiceProfileResponse, error)
	// CreateServiceProfile (TEMP for ADR MIGRATE) creates service profile in as local db.
	CreateServiceProfile(ctx context.Context, in *CreateServiceProfileRequest, opts ...grpc.CallOption) (*CreateServiceProfileResponse, error)
	// UpdateSPonDevice (TEMP for ADR MIGRATE) update SP for device in local db.
	UpdateSPonDevice(ctx context.Context, in *UpdateSPonDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// NewAppSKey returns and saves AppSKey (AES128Key) according to join_server config (if kek is enabled). Modification.
	NewAppSKey(ctx context.Context, in *NewAppSKeyRequest, opts ...grpc.CallOption) (*GetDeviceAppSKeyResponse, error)
	// CheckJwt checks if the JWT recieved is valid
	CheckJwt(ctx context.Context, in *CheckJwtRequest, opts ...grpc.CallOption) (*CheckJwtResponse, error)
}

type applicationServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationServerServiceClient(cc grpc.ClientConnInterface) ApplicationServerServiceClient {
	return &applicationServerServiceClient{cc}
}

func (c *applicationServerServiceClient) HandleUplinkData(ctx context.Context, in *HandleUplinkDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationServerService_HandleUplinkData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) HandleProprietaryUplink(ctx context.Context, in *HandleProprietaryUplinkRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationServerService_HandleProprietaryUplink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) HandleError(ctx context.Context, in *HandleErrorRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationServerService_HandleError_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) HandleDownlinkACK(ctx context.Context, in *HandleDownlinkACKRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationServerService_HandleDownlinkACK_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) HandleGatewayStats(ctx context.Context, in *HandleGatewayStatsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationServerService_HandleGatewayStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) HandleTxAck(ctx context.Context, in *HandleTxAckRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationServerService_HandleTxAck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) SetDeviceStatus(ctx context.Context, in *SetDeviceStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationServerService_SetDeviceStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) SetDeviceLocation(ctx context.Context, in *SetDeviceLocationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationServerService_SetDeviceLocation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) GetDevicesSummary(ctx context.Context, in *GetDevicesSummaryRequest, opts ...grpc.CallOption) (*GetDevicesSummaryResponse, error) {
	out := new(GetDevicesSummaryResponse)
	err := c.cc.Invoke(ctx, ApplicationServerService_GetDevicesSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) GetGatewaysSummary(ctx context.Context, in *GetGatewaysSummaryRequest, opts ...grpc.CallOption) (*GetGatewaysSummaryResponse, error) {
	out := new(GetGatewaysSummaryResponse)
	err := c.cc.Invoke(ctx, ApplicationServerService_GetGatewaysSummary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) ListOrganisation(ctx context.Context, in *ListOrganizationRequest, opts ...grpc.CallOption) (*ListOrganizationResponse, error) {
	out := new(ListOrganizationResponse)
	err := c.cc.Invoke(ctx, ApplicationServerService_ListOrganisation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) GetOrgByDevEUI(ctx context.Context, in *GetOrgByDevEUIRequest, opts ...grpc.CallOption) (*GetOrgByDevEUIResponse, error) {
	out := new(GetOrgByDevEUIResponse)
	err := c.cc.Invoke(ctx, ApplicationServerService_GetOrgByDevEUI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) GetOrgIDByGwID(ctx context.Context, in *GetOrgIDByGwIDRequest, opts ...grpc.CallOption) (*GetOrgByDevEUIResponse, error) {
	out := new(GetOrgByDevEUIResponse)
	err := c.cc.Invoke(ctx, ApplicationServerService_GetOrgIDByGwID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) GetDeviceAppSKey(ctx context.Context, in *GetOrgByDevEUIRequest, opts ...grpc.CallOption) (*GetDeviceAppSKeyResponse, error) {
	out := new(GetDeviceAppSKeyResponse)
	err := c.cc.Invoke(ctx, ApplicationServerService_GetDeviceAppSKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) GetDeviceKeys(ctx context.Context, in *GetOrgByDevEUIRequest, opts ...grpc.CallOption) (*GetDeviceKeysResponse, error) {
	out := new(GetDeviceKeysResponse)
	err := c.cc.Invoke(ctx, ApplicationServerService_GetDeviceKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) ReEncryptDeviceQueueItems(ctx context.Context, in *ReEncryptDeviceQueueItemsRequest, opts ...grpc.CallOption) (*ReEncryptDeviceQueueItemsResponse, error) {
	out := new(ReEncryptDeviceQueueItemsResponse)
	err := c.cc.Invoke(ctx, ApplicationServerService_ReEncryptDeviceQueueItems_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) StreamGatewayTaskResult(ctx context.Context, opts ...grpc.CallOption) (ApplicationServerService_StreamGatewayTaskResultClient, error) {
	stream, err := c.cc.NewStream(ctx, &ApplicationServerService_ServiceDesc.Streams[0], ApplicationServerService_StreamGatewayTaskResult_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &applicationServerServiceStreamGatewayTaskResultClient{stream}
	return x, nil
}

type ApplicationServerService_StreamGatewayTaskResultClient interface {
	Send(*GatewayTaskResult) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type applicationServerServiceStreamGatewayTaskResultClient struct {
	grpc.ClientStream
}

func (x *applicationServerServiceStreamGatewayTaskResultClient) Send(m *GatewayTaskResult) error {
	return x.ClientStream.SendMsg(m)
}

func (x *applicationServerServiceStreamGatewayTaskResultClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *applicationServerServiceClient) GetDictionary(ctx context.Context, in *GetDictionaryRequest, opts ...grpc.CallOption) (*GetDictionaryResponse, error) {
	out := new(GetDictionaryResponse)
	err := c.cc.Invoke(ctx, ApplicationServerService_GetDictionary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) GetGWMetaData(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetGWMetaDataResponse, error) {
	out := new(GetGWMetaDataResponse)
	err := c.cc.Invoke(ctx, ApplicationServerService_GetGWMetaData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) GetServiceProfile(ctx context.Context, in *GetServiceProfileRequest, opts ...grpc.CallOption) (*GetServiceProfileResponse, error) {
	out := new(GetServiceProfileResponse)
	err := c.cc.Invoke(ctx, ApplicationServerService_GetServiceProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) CreateServiceProfile(ctx context.Context, in *CreateServiceProfileRequest, opts ...grpc.CallOption) (*CreateServiceProfileResponse, error) {
	out := new(CreateServiceProfileResponse)
	err := c.cc.Invoke(ctx, ApplicationServerService_CreateServiceProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) UpdateSPonDevice(ctx context.Context, in *UpdateSPonDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApplicationServerService_UpdateSPonDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) NewAppSKey(ctx context.Context, in *NewAppSKeyRequest, opts ...grpc.CallOption) (*GetDeviceAppSKeyResponse, error) {
	out := new(GetDeviceAppSKeyResponse)
	err := c.cc.Invoke(ctx, ApplicationServerService_NewAppSKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServerServiceClient) CheckJwt(ctx context.Context, in *CheckJwtRequest, opts ...grpc.CallOption) (*CheckJwtResponse, error) {
	out := new(CheckJwtResponse)
	err := c.cc.Invoke(ctx, ApplicationServerService_CheckJwt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationServerServiceServer is the server API for ApplicationServerService service.
// All implementations must embed UnimplementedApplicationServerServiceServer
// for forward compatibility
type ApplicationServerServiceServer interface {
	// HandleUplinkData handles uplink data received from an end-device.
	HandleUplinkData(context.Context, *HandleUplinkDataRequest) (*emptypb.Empty, error)
	// HandleProprietaryUplink handles proprietary uplink payloads.
	HandleProprietaryUplink(context.Context, *HandleProprietaryUplinkRequest) (*emptypb.Empty, error)
	// HandleError handles an error message.
	HandleError(context.Context, *HandleErrorRequest) (*emptypb.Empty, error)
	// HandleDownlinkACK handles a downlink ACK or nACK response.
	HandleDownlinkACK(context.Context, *HandleDownlinkACKRequest) (*emptypb.Empty, error)
	// HandleGatewayStats handles the given gateway stats.
	HandleGatewayStats(context.Context, *HandleGatewayStatsRequest) (*emptypb.Empty, error)
	// HandleTXACK handles the TX acknowledgement.
	HandleTxAck(context.Context, *HandleTxAckRequest) (*emptypb.Empty, error)
	// SetDeviceStatus updates the device-status for a device.
	SetDeviceStatus(context.Context, *SetDeviceStatusRequest) (*emptypb.Empty, error)
	// SetDeviceLocation updates the device-location for a device.
	SetDeviceLocation(context.Context, *SetDeviceLocationRequest) (*emptypb.Empty, error)
	// SetDeviceLocation updates the device-location for a device.
	GetDevicesSummary(context.Context, *GetDevicesSummaryRequest) (*GetDevicesSummaryResponse, error)
	// SetDeviceLocation updates the device-location for a device.
	GetGatewaysSummary(context.Context, *GetGatewaysSummaryRequest) (*GetGatewaysSummaryResponse, error)
	// SetDeviceLocation updates the device-location for a device.
	ListOrganisation(context.Context, *ListOrganizationRequest) (*ListOrganizationResponse, error)
	// GetOrgByDevEUI returns organization id by devEUI. Modification.
	GetOrgByDevEUI(context.Context, *GetOrgByDevEUIRequest) (*GetOrgByDevEUIResponse, error)
	// GetOrgIDByGwID returns organization id by gwID. Modification.
	GetOrgIDByGwID(context.Context, *GetOrgIDByGwIDRequest) (*GetOrgByDevEUIResponse, error)
	// GetDeviceAppSKey returns AES128Key by devEUI. Modification.
	GetDeviceAppSKey(context.Context, *GetOrgByDevEUIRequest) (*GetDeviceAppSKeyResponse, error)
	// GetDeviceKeys returns NwkKey,AppKey by devEUI. Modification.
	GetDeviceKeys(context.Context, *GetOrgByDevEUIRequest) (*GetDeviceKeysResponse, error)
	// ReEncryptDeviceQueueItems requests the application-server to re-encrypt
	// the given payload items using the new parameters. This request is
	// for example triggered when the associated frame-counter of a downlink
	// payload will be used by a mac-layer only payload, e.g. when the NS has
	// mac-commands (or ACKs) to send to the device and combining this with
	// an application-layer payload would exceed the max. payload size.
	// Note there is no requirement that the number of returned items must be
	// equal to the number of requested items.
	ReEncryptDeviceQueueItems(context.Context, *ReEncryptDeviceQueueItemsRequest) (*ReEncryptDeviceQueueItemsResponse, error)
	// StreamGatewayTaskResult stream ExecCmd results from gateway to save into as-db
	StreamGatewayTaskResult(ApplicationServerService_StreamGatewayTaskResultServer) error
	// GetDictionary returns list of dictionary by the type. Modification.
	GetDictionary(context.Context, *GetDictionaryRequest) (*GetDictionaryResponse, error)
	// GetGWMetaData returns a map with last metadata for the gw
	GetGWMetaData(context.Context, *emptypb.Empty) (*GetGWMetaDataResponse, error)
	// GetServiceProfile (TEMP for ADR MIGRATE) returns sp from as-database (local only)
	GetServiceProfile(context.Context, *GetServiceProfileRequest) (*GetServiceProfileResponse, error)
	// CreateServiceProfile (TEMP for ADR MIGRATE) creates service profile in as local db.
	CreateServiceProfile(context.Context, *CreateServiceProfileRequest) (*CreateServiceProfileResponse, error)
	// UpdateSPonDevice (TEMP for ADR MIGRATE) update SP for device in local db.
	UpdateSPonDevice(context.Context, *UpdateSPonDeviceRequest) (*emptypb.Empty, error)
	// NewAppSKey returns and saves AppSKey (AES128Key) according to join_server config (if kek is enabled). Modification.
	NewAppSKey(context.Context, *NewAppSKeyRequest) (*GetDeviceAppSKeyResponse, error)
	// CheckJwt checks if the JWT recieved is valid
	CheckJwt(context.Context, *CheckJwtRequest) (*CheckJwtResponse, error)
	mustEmbedUnimplementedApplicationServerServiceServer()
}

// UnimplementedApplicationServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApplicationServerServiceServer struct {
}

func (UnimplementedApplicationServerServiceServer) HandleUplinkData(context.Context, *HandleUplinkDataRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleUplinkData not implemented")
}
func (UnimplementedApplicationServerServiceServer) HandleProprietaryUplink(context.Context, *HandleProprietaryUplinkRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleProprietaryUplink not implemented")
}
func (UnimplementedApplicationServerServiceServer) HandleError(context.Context, *HandleErrorRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleError not implemented")
}
func (UnimplementedApplicationServerServiceServer) HandleDownlinkACK(context.Context, *HandleDownlinkACKRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleDownlinkACK not implemented")
}
func (UnimplementedApplicationServerServiceServer) HandleGatewayStats(context.Context, *HandleGatewayStatsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleGatewayStats not implemented")
}
func (UnimplementedApplicationServerServiceServer) HandleTxAck(context.Context, *HandleTxAckRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleTxAck not implemented")
}
func (UnimplementedApplicationServerServiceServer) SetDeviceStatus(context.Context, *SetDeviceStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeviceStatus not implemented")
}
func (UnimplementedApplicationServerServiceServer) SetDeviceLocation(context.Context, *SetDeviceLocationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeviceLocation not implemented")
}
func (UnimplementedApplicationServerServiceServer) GetDevicesSummary(context.Context, *GetDevicesSummaryRequest) (*GetDevicesSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevicesSummary not implemented")
}
func (UnimplementedApplicationServerServiceServer) GetGatewaysSummary(context.Context, *GetGatewaysSummaryRequest) (*GetGatewaysSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGatewaysSummary not implemented")
}
func (UnimplementedApplicationServerServiceServer) ListOrganisation(context.Context, *ListOrganizationRequest) (*ListOrganizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrganisation not implemented")
}
func (UnimplementedApplicationServerServiceServer) GetOrgByDevEUI(context.Context, *GetOrgByDevEUIRequest) (*GetOrgByDevEUIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgByDevEUI not implemented")
}
func (UnimplementedApplicationServerServiceServer) GetOrgIDByGwID(context.Context, *GetOrgIDByGwIDRequest) (*GetOrgByDevEUIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrgIDByGwID not implemented")
}
func (UnimplementedApplicationServerServiceServer) GetDeviceAppSKey(context.Context, *GetOrgByDevEUIRequest) (*GetDeviceAppSKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceAppSKey not implemented")
}
func (UnimplementedApplicationServerServiceServer) GetDeviceKeys(context.Context, *GetOrgByDevEUIRequest) (*GetDeviceKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceKeys not implemented")
}
func (UnimplementedApplicationServerServiceServer) ReEncryptDeviceQueueItems(context.Context, *ReEncryptDeviceQueueItemsRequest) (*ReEncryptDeviceQueueItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReEncryptDeviceQueueItems not implemented")
}
func (UnimplementedApplicationServerServiceServer) StreamGatewayTaskResult(ApplicationServerService_StreamGatewayTaskResultServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamGatewayTaskResult not implemented")
}
func (UnimplementedApplicationServerServiceServer) GetDictionary(context.Context, *GetDictionaryRequest) (*GetDictionaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDictionary not implemented")
}
func (UnimplementedApplicationServerServiceServer) GetGWMetaData(context.Context, *emptypb.Empty) (*GetGWMetaDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGWMetaData not implemented")
}
func (UnimplementedApplicationServerServiceServer) GetServiceProfile(context.Context, *GetServiceProfileRequest) (*GetServiceProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceProfile not implemented")
}
func (UnimplementedApplicationServerServiceServer) CreateServiceProfile(context.Context, *CreateServiceProfileRequest) (*CreateServiceProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceProfile not implemented")
}
func (UnimplementedApplicationServerServiceServer) UpdateSPonDevice(context.Context, *UpdateSPonDeviceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSPonDevice not implemented")
}
func (UnimplementedApplicationServerServiceServer) NewAppSKey(context.Context, *NewAppSKeyRequest) (*GetDeviceAppSKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewAppSKey not implemented")
}
func (UnimplementedApplicationServerServiceServer) CheckJwt(context.Context, *CheckJwtRequest) (*CheckJwtResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckJwt not implemented")
}
func (UnimplementedApplicationServerServiceServer) mustEmbedUnimplementedApplicationServerServiceServer() {
}

// UnsafeApplicationServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationServerServiceServer will
// result in compilation errors.
type UnsafeApplicationServerServiceServer interface {
	mustEmbedUnimplementedApplicationServerServiceServer()
}

func RegisterApplicationServerServiceServer(s grpc.ServiceRegistrar, srv ApplicationServerServiceServer) {
	s.RegisterService(&ApplicationServerService_ServiceDesc, srv)
}

func _ApplicationServerService_HandleUplinkData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleUplinkDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).HandleUplinkData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationServerService_HandleUplinkData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).HandleUplinkData(ctx, req.(*HandleUplinkDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_HandleProprietaryUplink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleProprietaryUplinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).HandleProprietaryUplink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationServerService_HandleProprietaryUplink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).HandleProprietaryUplink(ctx, req.(*HandleProprietaryUplinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_HandleError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).HandleError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationServerService_HandleError_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).HandleError(ctx, req.(*HandleErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_HandleDownlinkACK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleDownlinkACKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).HandleDownlinkACK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationServerService_HandleDownlinkACK_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).HandleDownlinkACK(ctx, req.(*HandleDownlinkACKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_HandleGatewayStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleGatewayStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).HandleGatewayStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationServerService_HandleGatewayStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).HandleGatewayStats(ctx, req.(*HandleGatewayStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_HandleTxAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HandleTxAckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).HandleTxAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationServerService_HandleTxAck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).HandleTxAck(ctx, req.(*HandleTxAckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_SetDeviceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeviceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).SetDeviceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationServerService_SetDeviceStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).SetDeviceStatus(ctx, req.(*SetDeviceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_SetDeviceLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeviceLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).SetDeviceLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationServerService_SetDeviceLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).SetDeviceLocation(ctx, req.(*SetDeviceLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_GetDevicesSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDevicesSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).GetDevicesSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationServerService_GetDevicesSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).GetDevicesSummary(ctx, req.(*GetDevicesSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_GetGatewaysSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewaysSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).GetGatewaysSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationServerService_GetGatewaysSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).GetGatewaysSummary(ctx, req.(*GetGatewaysSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_ListOrganisation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrganizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).ListOrganisation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationServerService_ListOrganisation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).ListOrganisation(ctx, req.(*ListOrganizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_GetOrgByDevEUI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgByDevEUIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).GetOrgByDevEUI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationServerService_GetOrgByDevEUI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).GetOrgByDevEUI(ctx, req.(*GetOrgByDevEUIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_GetOrgIDByGwID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgIDByGwIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).GetOrgIDByGwID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationServerService_GetOrgIDByGwID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).GetOrgIDByGwID(ctx, req.(*GetOrgIDByGwIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_GetDeviceAppSKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgByDevEUIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).GetDeviceAppSKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationServerService_GetDeviceAppSKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).GetDeviceAppSKey(ctx, req.(*GetOrgByDevEUIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_GetDeviceKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOrgByDevEUIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).GetDeviceKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationServerService_GetDeviceKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).GetDeviceKeys(ctx, req.(*GetOrgByDevEUIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_ReEncryptDeviceQueueItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReEncryptDeviceQueueItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).ReEncryptDeviceQueueItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationServerService_ReEncryptDeviceQueueItems_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).ReEncryptDeviceQueueItems(ctx, req.(*ReEncryptDeviceQueueItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_StreamGatewayTaskResult_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApplicationServerServiceServer).StreamGatewayTaskResult(&applicationServerServiceStreamGatewayTaskResultServer{stream})
}

type ApplicationServerService_StreamGatewayTaskResultServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*GatewayTaskResult, error)
	grpc.ServerStream
}

type applicationServerServiceStreamGatewayTaskResultServer struct {
	grpc.ServerStream
}

func (x *applicationServerServiceStreamGatewayTaskResultServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *applicationServerServiceStreamGatewayTaskResultServer) Recv() (*GatewayTaskResult, error) {
	m := new(GatewayTaskResult)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ApplicationServerService_GetDictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDictionaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).GetDictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationServerService_GetDictionary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).GetDictionary(ctx, req.(*GetDictionaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_GetGWMetaData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).GetGWMetaData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationServerService_GetGWMetaData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).GetGWMetaData(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_GetServiceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).GetServiceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationServerService_GetServiceProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).GetServiceProfile(ctx, req.(*GetServiceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_CreateServiceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).CreateServiceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationServerService_CreateServiceProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).CreateServiceProfile(ctx, req.(*CreateServiceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_UpdateSPonDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSPonDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).UpdateSPonDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationServerService_UpdateSPonDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).UpdateSPonDevice(ctx, req.(*UpdateSPonDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_NewAppSKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAppSKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).NewAppSKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationServerService_NewAppSKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).NewAppSKey(ctx, req.(*NewAppSKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationServerService_CheckJwt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckJwtRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServerServiceServer).CheckJwt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApplicationServerService_CheckJwt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServerServiceServer).CheckJwt(ctx, req.(*CheckJwtRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApplicationServerService_ServiceDesc is the grpc.ServiceDesc for ApplicationServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApplicationServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "as.ApplicationServerService",
	HandlerType: (*ApplicationServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HandleUplinkData",
			Handler:    _ApplicationServerService_HandleUplinkData_Handler,
		},
		{
			MethodName: "HandleProprietaryUplink",
			Handler:    _ApplicationServerService_HandleProprietaryUplink_Handler,
		},
		{
			MethodName: "HandleError",
			Handler:    _ApplicationServerService_HandleError_Handler,
		},
		{
			MethodName: "HandleDownlinkACK",
			Handler:    _ApplicationServerService_HandleDownlinkACK_Handler,
		},
		{
			MethodName: "HandleGatewayStats",
			Handler:    _ApplicationServerService_HandleGatewayStats_Handler,
		},
		{
			MethodName: "HandleTxAck",
			Handler:    _ApplicationServerService_HandleTxAck_Handler,
		},
		{
			MethodName: "SetDeviceStatus",
			Handler:    _ApplicationServerService_SetDeviceStatus_Handler,
		},
		{
			MethodName: "SetDeviceLocation",
			Handler:    _ApplicationServerService_SetDeviceLocation_Handler,
		},
		{
			MethodName: "GetDevicesSummary",
			Handler:    _ApplicationServerService_GetDevicesSummary_Handler,
		},
		{
			MethodName: "GetGatewaysSummary",
			Handler:    _ApplicationServerService_GetGatewaysSummary_Handler,
		},
		{
			MethodName: "ListOrganisation",
			Handler:    _ApplicationServerService_ListOrganisation_Handler,
		},
		{
			MethodName: "GetOrgByDevEUI",
			Handler:    _ApplicationServerService_GetOrgByDevEUI_Handler,
		},
		{
			MethodName: "GetOrgIDByGwID",
			Handler:    _ApplicationServerService_GetOrgIDByGwID_Handler,
		},
		{
			MethodName: "GetDeviceAppSKey",
			Handler:    _ApplicationServerService_GetDeviceAppSKey_Handler,
		},
		{
			MethodName: "GetDeviceKeys",
			Handler:    _ApplicationServerService_GetDeviceKeys_Handler,
		},
		{
			MethodName: "ReEncryptDeviceQueueItems",
			Handler:    _ApplicationServerService_ReEncryptDeviceQueueItems_Handler,
		},
		{
			MethodName: "GetDictionary",
			Handler:    _ApplicationServerService_GetDictionary_Handler,
		},
		{
			MethodName: "GetGWMetaData",
			Handler:    _ApplicationServerService_GetGWMetaData_Handler,
		},
		{
			MethodName: "GetServiceProfile",
			Handler:    _ApplicationServerService_GetServiceProfile_Handler,
		},
		{
			MethodName: "CreateServiceProfile",
			Handler:    _ApplicationServerService_CreateServiceProfile_Handler,
		},
		{
			MethodName: "UpdateSPonDevice",
			Handler:    _ApplicationServerService_UpdateSPonDevice_Handler,
		},
		{
			MethodName: "NewAppSKey",
			Handler:    _ApplicationServerService_NewAppSKey_Handler,
		},
		{
			MethodName: "CheckJwt",
			Handler:    _ApplicationServerService_CheckJwt_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamGatewayTaskResult",
			Handler:       _ApplicationServerService_StreamGatewayTaskResult_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "as/as.proto",
}
