// Code generated by protoc-gen-go. DO NOT EDIT.
// source: as/integration/integration.proto

package integration

import (
	fmt "fmt"
	common "github.com/brocaar/chirpstack-api/go/v3/common"
	gw "github.com/brocaar/chirpstack-api/go/v3/gw"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ErrorType int32

const (
	// Unknown type.
	ErrorType_UNKNOWN ErrorType = 0
	// Error related to the downlink payload size.
	// Usually seen when the payload exceeded the maximum allowed payload size.
	ErrorType_DOWNLINK_PAYLOAD_SIZE ErrorType = 1
	// Error related to the downlink frame-counter.
	// Usually seen when the frame-counter has already been used.
	ErrorType_DOWNLINK_FCNT ErrorType = 2
	// Uplink codec error.
	ErrorType_UPLINK_CODEC ErrorType = 3
	// Downlink codec error.
	ErrorType_DOWNLINK_CODEC ErrorType = 4
	// OTAA error.
	ErrorType_OTAA ErrorType = 5
	// Uplink frame-counter was reset.
	ErrorType_UPLINK_FCNT_RESET ErrorType = 6
	// Uplink MIC error.
	ErrorType_UPLINK_MIC ErrorType = 7
	// Uplink frame-counter retransmission.
	ErrorType_UPLINK_FCNT_RETRANSMISSION ErrorType = 8
	// Downlink gateway error.
	ErrorType_DOWNLINK_GATEWAY ErrorType = 9
)

var ErrorType_name = map[int32]string{
	0: "UNKNOWN",
	1: "DOWNLINK_PAYLOAD_SIZE",
	2: "DOWNLINK_FCNT",
	3: "UPLINK_CODEC",
	4: "DOWNLINK_CODEC",
	5: "OTAA",
	6: "UPLINK_FCNT_RESET",
	7: "UPLINK_MIC",
	8: "UPLINK_FCNT_RETRANSMISSION",
	9: "DOWNLINK_GATEWAY",
}

var ErrorType_value = map[string]int32{
	"UNKNOWN":                    0,
	"DOWNLINK_PAYLOAD_SIZE":      1,
	"DOWNLINK_FCNT":              2,
	"UPLINK_CODEC":               3,
	"DOWNLINK_CODEC":             4,
	"OTAA":                       5,
	"UPLINK_FCNT_RESET":          6,
	"UPLINK_MIC":                 7,
	"UPLINK_FCNT_RETRANSMISSION": 8,
	"DOWNLINK_GATEWAY":           9,
}

func (x ErrorType) String() string {
	return proto.EnumName(ErrorType_name, int32(x))
}

func (ErrorType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5ba82681be587591, []int{0}
}

type LartechDeliveryStatus int32

const (
	LartechDeliveryStatus_ACCEPTED       LartechDeliveryStatus = 0
	LartechDeliveryStatus_REJECTED       LartechDeliveryStatus = 1
	LartechDeliveryStatus_ON_AIR         LartechDeliveryStatus = 2
	LartechDeliveryStatus_LOST           LartechDeliveryStatus = 3
	LartechDeliveryStatus_DELIVERED      LartechDeliveryStatus = 4
	LartechDeliveryStatus_ACCESS_DENIED  LartechDeliveryStatus = 5
	LartechDeliveryStatus_INTERNAL_ERROR LartechDeliveryStatus = 6
	LartechDeliveryStatus_CANCELLED      LartechDeliveryStatus = 7
)

var LartechDeliveryStatus_name = map[int32]string{
	0: "ACCEPTED",
	1: "REJECTED",
	2: "ON_AIR",
	3: "LOST",
	4: "DELIVERED",
	5: "ACCESS_DENIED",
	6: "INTERNAL_ERROR",
	7: "CANCELLED",
}

var LartechDeliveryStatus_value = map[string]int32{
	"ACCEPTED":       0,
	"REJECTED":       1,
	"ON_AIR":         2,
	"LOST":           3,
	"DELIVERED":      4,
	"ACCESS_DENIED":  5,
	"INTERNAL_ERROR": 6,
	"CANCELLED":      7,
}

func (x LartechDeliveryStatus) String() string {
	return proto.EnumName(LartechDeliveryStatus_name, int32(x))
}

func (LartechDeliveryStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5ba82681be587591, []int{1}
}

// UplinkEvent is the message sent when an uplink payload has been received.
type UplinkEvent struct {
	// Application ID.
	ApplicationId uint64 `protobuf:"varint,1,opt,name=application_id,json=applicationID,proto3" json:"application_id,omitempty"`
	// Application name.
	ApplicationName string `protobuf:"bytes,2,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
	// Device name.
	DeviceName string `protobuf:"bytes,3,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// Device EUI.
	DevEui []byte `protobuf:"bytes,4,opt,name=dev_eui,json=devEUI,proto3" json:"dev_eui,omitempty"`
	// Receiving gateway RX info.
	RxInfo []*gw.UplinkRXInfo `protobuf:"bytes,5,rep,name=rx_info,json=rxInfo,proto3" json:"rx_info,omitempty"`
	// TX info.
	TxInfo *gw.UplinkTXInfo `protobuf:"bytes,6,opt,name=tx_info,json=txInfo,proto3" json:"tx_info,omitempty"`
	// Device has ADR bit set.
	Adr bool `protobuf:"varint,7,opt,name=adr,proto3" json:"adr,omitempty"`
	// Data-rate.
	Dr uint32 `protobuf:"varint,8,opt,name=dr,proto3" json:"dr,omitempty"`
	// Frame counter.
	FCnt uint32 `protobuf:"varint,9,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	// Frame port.
	FPort uint32 `protobuf:"varint,10,opt,name=f_port,json=fPort,proto3" json:"f_port,omitempty"`
	// FRMPayload data.
	Data []byte `protobuf:"bytes,11,opt,name=data,proto3" json:"data,omitempty"`
	// JSON string containing the decoded object.
	// Note that this is only set when a codec is configured in the Device Profile.
	ObjectJson string `protobuf:"bytes,12,opt,name=object_json,json=objectJSON,proto3" json:"object_json,omitempty"`
	// User-defined device tags.
	Tags map[string]string `protobuf:"bytes,13,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Uplink was of type confirmed.
	ConfirmedUplink bool `protobuf:"varint,14,opt,name=confirmed_uplink,json=confirmedUplink,proto3" json:"confirmed_uplink,omitempty"`
	// Device address.
	DevAddr []byte `protobuf:"bytes,15,opt,name=dev_addr,json=devAddr,proto3" json:"dev_addr,omitempty"`
	// mic for legacy. actility users. Modification
	Mic []byte `protobuf:"bytes,16,opt,name=mic,proto3" json:"mic,omitempty"`
	// true if packer late for more than 2min. Modification
	Late bool `protobuf:"varint,17,opt,name=late,proto3" json:"late,omitempty"`
	// time frame(s) recieved. Can be gps\fts\by server for packet with best SNR. Modification
	Time *timestamp.Timestamp `protobuf:"bytes,18,opt,name=time,proto3" json:"time,omitempty"`
	// Published at timestamp.
	PublishedAt *timestamp.Timestamp `protobuf:"bytes,19,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	// Device Profile UUID as string
	DeviceProfileId string `protobuf:"bytes,20,opt,name=device_profile_id,json=deviceProfileID,proto3" json:"device_profile_id,omitempty"`
	// Device Profile name
	DeviceProfileName string `protobuf:"bytes,21,opt,name=device_profile_name,json=deviceProfileName,proto3" json:"device_profile_name,omitempty"`
	// Application ID list. The param is using by global integrations only
	Applications         []uint64 `protobuf:"varint,22,rep,packed,name=applications,proto3" json:"applications,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UplinkEvent) Reset()         { *m = UplinkEvent{} }
func (m *UplinkEvent) String() string { return proto.CompactTextString(m) }
func (*UplinkEvent) ProtoMessage()    {}
func (*UplinkEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ba82681be587591, []int{0}
}

func (m *UplinkEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UplinkEvent.Unmarshal(m, b)
}
func (m *UplinkEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UplinkEvent.Marshal(b, m, deterministic)
}
func (m *UplinkEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UplinkEvent.Merge(m, src)
}
func (m *UplinkEvent) XXX_Size() int {
	return xxx_messageInfo_UplinkEvent.Size(m)
}
func (m *UplinkEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_UplinkEvent.DiscardUnknown(m)
}

var xxx_messageInfo_UplinkEvent proto.InternalMessageInfo

func (m *UplinkEvent) GetApplicationId() uint64 {
	if m != nil {
		return m.ApplicationId
	}
	return 0
}

func (m *UplinkEvent) GetApplicationName() string {
	if m != nil {
		return m.ApplicationName
	}
	return ""
}

func (m *UplinkEvent) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *UplinkEvent) GetDevEui() []byte {
	if m != nil {
		return m.DevEui
	}
	return nil
}

func (m *UplinkEvent) GetRxInfo() []*gw.UplinkRXInfo {
	if m != nil {
		return m.RxInfo
	}
	return nil
}

func (m *UplinkEvent) GetTxInfo() *gw.UplinkTXInfo {
	if m != nil {
		return m.TxInfo
	}
	return nil
}

func (m *UplinkEvent) GetAdr() bool {
	if m != nil {
		return m.Adr
	}
	return false
}

func (m *UplinkEvent) GetDr() uint32 {
	if m != nil {
		return m.Dr
	}
	return 0
}

func (m *UplinkEvent) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

func (m *UplinkEvent) GetFPort() uint32 {
	if m != nil {
		return m.FPort
	}
	return 0
}

func (m *UplinkEvent) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *UplinkEvent) GetObjectJson() string {
	if m != nil {
		return m.ObjectJson
	}
	return ""
}

func (m *UplinkEvent) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *UplinkEvent) GetConfirmedUplink() bool {
	if m != nil {
		return m.ConfirmedUplink
	}
	return false
}

func (m *UplinkEvent) GetDevAddr() []byte {
	if m != nil {
		return m.DevAddr
	}
	return nil
}

func (m *UplinkEvent) GetMic() []byte {
	if m != nil {
		return m.Mic
	}
	return nil
}

func (m *UplinkEvent) GetLate() bool {
	if m != nil {
		return m.Late
	}
	return false
}

func (m *UplinkEvent) GetTime() *timestamp.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *UplinkEvent) GetPublishedAt() *timestamp.Timestamp {
	if m != nil {
		return m.PublishedAt
	}
	return nil
}

func (m *UplinkEvent) GetDeviceProfileId() string {
	if m != nil {
		return m.DeviceProfileId
	}
	return ""
}

func (m *UplinkEvent) GetDeviceProfileName() string {
	if m != nil {
		return m.DeviceProfileName
	}
	return ""
}

func (m *UplinkEvent) GetApplications() []uint64 {
	if m != nil {
		return m.Applications
	}
	return nil
}

// JoinEvent is the message sent when a device joined the network.
// Note that this is only sent after the first received uplink after the
// device (re)activation.
type JoinEvent struct {
	// Application ID.
	ApplicationId uint64 `protobuf:"varint,1,opt,name=application_id,json=applicationID,proto3" json:"application_id,omitempty"`
	// Application name.
	ApplicationName string `protobuf:"bytes,2,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
	// Device name.
	DeviceName string `protobuf:"bytes,3,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// Device EUI.
	DevEui []byte `protobuf:"bytes,4,opt,name=dev_eui,json=devEUI,proto3" json:"dev_eui,omitempty"`
	// Device address.
	DevAddr []byte `protobuf:"bytes,5,opt,name=dev_addr,json=devAddr,proto3" json:"dev_addr,omitempty"`
	// Receiving gateway RX info.
	RxInfo []*gw.UplinkRXInfo `protobuf:"bytes,6,rep,name=rx_info,json=rxInfo,proto3" json:"rx_info,omitempty"`
	// TX info.
	TxInfo *gw.UplinkTXInfo `protobuf:"bytes,7,opt,name=tx_info,json=txInfo,proto3" json:"tx_info,omitempty"`
	// Data-rate.
	Dr uint32 `protobuf:"varint,8,opt,name=dr,proto3" json:"dr,omitempty"`
	// User-defined device tags.
	Tags map[string]string `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Published at timestamp.
	PublishedAt *timestamp.Timestamp `protobuf:"bytes,10,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	// Application ID list. The param is using by global integrations only
	Applications         []uint64 `protobuf:"varint,11,rep,packed,name=applications,proto3" json:"applications,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinEvent) Reset()         { *m = JoinEvent{} }
func (m *JoinEvent) String() string { return proto.CompactTextString(m) }
func (*JoinEvent) ProtoMessage()    {}
func (*JoinEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ba82681be587591, []int{1}
}

func (m *JoinEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinEvent.Unmarshal(m, b)
}
func (m *JoinEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinEvent.Marshal(b, m, deterministic)
}
func (m *JoinEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinEvent.Merge(m, src)
}
func (m *JoinEvent) XXX_Size() int {
	return xxx_messageInfo_JoinEvent.Size(m)
}
func (m *JoinEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinEvent.DiscardUnknown(m)
}

var xxx_messageInfo_JoinEvent proto.InternalMessageInfo

func (m *JoinEvent) GetApplicationId() uint64 {
	if m != nil {
		return m.ApplicationId
	}
	return 0
}

func (m *JoinEvent) GetApplicationName() string {
	if m != nil {
		return m.ApplicationName
	}
	return ""
}

func (m *JoinEvent) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *JoinEvent) GetDevEui() []byte {
	if m != nil {
		return m.DevEui
	}
	return nil
}

func (m *JoinEvent) GetDevAddr() []byte {
	if m != nil {
		return m.DevAddr
	}
	return nil
}

func (m *JoinEvent) GetRxInfo() []*gw.UplinkRXInfo {
	if m != nil {
		return m.RxInfo
	}
	return nil
}

func (m *JoinEvent) GetTxInfo() *gw.UplinkTXInfo {
	if m != nil {
		return m.TxInfo
	}
	return nil
}

func (m *JoinEvent) GetDr() uint32 {
	if m != nil {
		return m.Dr
	}
	return 0
}

func (m *JoinEvent) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *JoinEvent) GetPublishedAt() *timestamp.Timestamp {
	if m != nil {
		return m.PublishedAt
	}
	return nil
}

func (m *JoinEvent) GetApplications() []uint64 {
	if m != nil {
		return m.Applications
	}
	return nil
}

// AckEvent is the message sent when a confirmation on a confirmed downlink
// has been received -or- when the downlink timed out.
type AckEvent struct {
	// Application ID.
	ApplicationId uint64 `protobuf:"varint,1,opt,name=application_id,json=applicationID,proto3" json:"application_id,omitempty"`
	// Application name.
	ApplicationName string `protobuf:"bytes,2,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
	// Device name.
	DeviceName string `protobuf:"bytes,3,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// Device EUI.
	DevEui []byte `protobuf:"bytes,4,opt,name=dev_eui,json=devEUI,proto3" json:"dev_eui,omitempty"`
	// Frame was acknowledged.
	Acknowledged bool `protobuf:"varint,5,opt,name=acknowledged,proto3" json:"acknowledged,omitempty"`
	// Downlink frame counter to which the acknowledgement relates.
	FCnt uint32 `protobuf:"varint,6,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	// User-defined device tags.
	Tags map[string]string `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Published at timestamp.
	PublishedAt *timestamp.Timestamp `protobuf:"bytes,8,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	// optional. the id was generated on client's side to control tx
	MessageId string `protobuf:"bytes,9,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// Application ID list. The param is using by global integrations only
	Applications         []uint64 `protobuf:"varint,10,rep,packed,name=applications,proto3" json:"applications,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AckEvent) Reset()         { *m = AckEvent{} }
func (m *AckEvent) String() string { return proto.CompactTextString(m) }
func (*AckEvent) ProtoMessage()    {}
func (*AckEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ba82681be587591, []int{2}
}

func (m *AckEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AckEvent.Unmarshal(m, b)
}
func (m *AckEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AckEvent.Marshal(b, m, deterministic)
}
func (m *AckEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckEvent.Merge(m, src)
}
func (m *AckEvent) XXX_Size() int {
	return xxx_messageInfo_AckEvent.Size(m)
}
func (m *AckEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_AckEvent.DiscardUnknown(m)
}

var xxx_messageInfo_AckEvent proto.InternalMessageInfo

func (m *AckEvent) GetApplicationId() uint64 {
	if m != nil {
		return m.ApplicationId
	}
	return 0
}

func (m *AckEvent) GetApplicationName() string {
	if m != nil {
		return m.ApplicationName
	}
	return ""
}

func (m *AckEvent) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *AckEvent) GetDevEui() []byte {
	if m != nil {
		return m.DevEui
	}
	return nil
}

func (m *AckEvent) GetAcknowledged() bool {
	if m != nil {
		return m.Acknowledged
	}
	return false
}

func (m *AckEvent) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

func (m *AckEvent) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *AckEvent) GetPublishedAt() *timestamp.Timestamp {
	if m != nil {
		return m.PublishedAt
	}
	return nil
}

func (m *AckEvent) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *AckEvent) GetApplications() []uint64 {
	if m != nil {
		return m.Applications
	}
	return nil
}

// TxAckEvent is the message sent when a downlink was acknowledged by the gateway
// for transmission. As a downlink can be scheduled in the future, this event
// does not confirm that the message has already been transmitted.
type TxAckEvent struct {
	// Application ID.
	ApplicationId uint64 `protobuf:"varint,1,opt,name=application_id,json=applicationID,proto3" json:"application_id,omitempty"`
	// Application name.
	ApplicationName string `protobuf:"bytes,2,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
	// Device name.
	DeviceName string `protobuf:"bytes,3,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// Device EUI.
	DevEui []byte `protobuf:"bytes,4,opt,name=dev_eui,json=devEUI,proto3" json:"dev_eui,omitempty"`
	// Downlink frame-counter.
	FCnt uint32 `protobuf:"varint,5,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	// User-defined device tags.
	Tags map[string]string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Gateway ID.
	GatewayId []byte `protobuf:"bytes,7,opt,name=gateway_id,json=gatewayID,proto3" json:"gateway_id,omitempty"`
	// TX info.
	TxInfo *gw.DownlinkTXInfo `protobuf:"bytes,8,opt,name=tx_info,json=txInfo,proto3" json:"tx_info,omitempty"`
	// Published at timestamp.
	PublishedAt *timestamp.Timestamp `protobuf:"bytes,9,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	// optional. the id was generated on client's side to control tx
	MessageId string `protobuf:"bytes,10,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// Application ID list. The param is using by global integrations only
	Applications         []uint64 `protobuf:"varint,11,rep,packed,name=applications,proto3" json:"applications,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxAckEvent) Reset()         { *m = TxAckEvent{} }
func (m *TxAckEvent) String() string { return proto.CompactTextString(m) }
func (*TxAckEvent) ProtoMessage()    {}
func (*TxAckEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ba82681be587591, []int{3}
}

func (m *TxAckEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TxAckEvent.Unmarshal(m, b)
}
func (m *TxAckEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TxAckEvent.Marshal(b, m, deterministic)
}
func (m *TxAckEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxAckEvent.Merge(m, src)
}
func (m *TxAckEvent) XXX_Size() int {
	return xxx_messageInfo_TxAckEvent.Size(m)
}
func (m *TxAckEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_TxAckEvent.DiscardUnknown(m)
}

var xxx_messageInfo_TxAckEvent proto.InternalMessageInfo

func (m *TxAckEvent) GetApplicationId() uint64 {
	if m != nil {
		return m.ApplicationId
	}
	return 0
}

func (m *TxAckEvent) GetApplicationName() string {
	if m != nil {
		return m.ApplicationName
	}
	return ""
}

func (m *TxAckEvent) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *TxAckEvent) GetDevEui() []byte {
	if m != nil {
		return m.DevEui
	}
	return nil
}

func (m *TxAckEvent) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

func (m *TxAckEvent) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *TxAckEvent) GetGatewayId() []byte {
	if m != nil {
		return m.GatewayId
	}
	return nil
}

func (m *TxAckEvent) GetTxInfo() *gw.DownlinkTXInfo {
	if m != nil {
		return m.TxInfo
	}
	return nil
}

func (m *TxAckEvent) GetPublishedAt() *timestamp.Timestamp {
	if m != nil {
		return m.PublishedAt
	}
	return nil
}

func (m *TxAckEvent) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *TxAckEvent) GetApplications() []uint64 {
	if m != nil {
		return m.Applications
	}
	return nil
}

// ErrorEvent is the message sent when an error occurred.
type ErrorEvent struct {
	// Application ID.
	ApplicationId uint64 `protobuf:"varint,1,opt,name=application_id,json=applicationID,proto3" json:"application_id,omitempty"`
	// Application name.
	ApplicationName string `protobuf:"bytes,2,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
	// Device name.
	DeviceName string `protobuf:"bytes,3,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// Device EUI.
	DevEui []byte `protobuf:"bytes,4,opt,name=dev_eui,json=devEUI,proto3" json:"dev_eui,omitempty"`
	// Error type.
	Type ErrorType `protobuf:"varint,5,opt,name=type,proto3,enum=integration.ErrorType" json:"type,omitempty"`
	// Error message.
	Error string `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
	// Downlink frame-counter (in case the downlink is related to a scheduled downlink).
	FCnt uint32 `protobuf:"varint,7,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	// User-defined device tags.
	Tags map[string]string `protobuf:"bytes,8,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Published at timestamp.
	PublishedAt *timestamp.Timestamp `protobuf:"bytes,9,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	// Application ID list. The param is using by global integrations only
	Applications         []uint64 `protobuf:"varint,10,rep,packed,name=applications,proto3" json:"applications,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ErrorEvent) Reset()         { *m = ErrorEvent{} }
func (m *ErrorEvent) String() string { return proto.CompactTextString(m) }
func (*ErrorEvent) ProtoMessage()    {}
func (*ErrorEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ba82681be587591, []int{4}
}

func (m *ErrorEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ErrorEvent.Unmarshal(m, b)
}
func (m *ErrorEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ErrorEvent.Marshal(b, m, deterministic)
}
func (m *ErrorEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ErrorEvent.Merge(m, src)
}
func (m *ErrorEvent) XXX_Size() int {
	return xxx_messageInfo_ErrorEvent.Size(m)
}
func (m *ErrorEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_ErrorEvent.DiscardUnknown(m)
}

var xxx_messageInfo_ErrorEvent proto.InternalMessageInfo

func (m *ErrorEvent) GetApplicationId() uint64 {
	if m != nil {
		return m.ApplicationId
	}
	return 0
}

func (m *ErrorEvent) GetApplicationName() string {
	if m != nil {
		return m.ApplicationName
	}
	return ""
}

func (m *ErrorEvent) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *ErrorEvent) GetDevEui() []byte {
	if m != nil {
		return m.DevEui
	}
	return nil
}

func (m *ErrorEvent) GetType() ErrorType {
	if m != nil {
		return m.Type
	}
	return ErrorType_UNKNOWN
}

func (m *ErrorEvent) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *ErrorEvent) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

func (m *ErrorEvent) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *ErrorEvent) GetPublishedAt() *timestamp.Timestamp {
	if m != nil {
		return m.PublishedAt
	}
	return nil
}

func (m *ErrorEvent) GetApplications() []uint64 {
	if m != nil {
		return m.Applications
	}
	return nil
}

// StatusEvent is the message sent when a device-status mac-command was sent
// by the device.
type StatusEvent struct {
	// Application ID.
	ApplicationId uint64 `protobuf:"varint,1,opt,name=application_id,json=applicationID,proto3" json:"application_id,omitempty"`
	// Application name.
	ApplicationName string `protobuf:"bytes,2,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
	// Device name.
	DeviceName string `protobuf:"bytes,3,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// Device EUI.
	DevEui []byte `protobuf:"bytes,4,opt,name=dev_eui,json=devEUI,proto3" json:"dev_eui,omitempty"`
	// The demodulation signal-to-noise ratio in dB for the last successfully
	// received device-status request by the Network Server.
	Margin int32 `protobuf:"varint,5,opt,name=margin,proto3" json:"margin,omitempty"`
	// Device is connected to an external power source.
	ExternalPowerSource bool `protobuf:"varint,6,opt,name=external_power_source,json=externalPowerSource,proto3" json:"external_power_source,omitempty"`
	// Battery level is not available.
	BatteryLevelUnavailable bool `protobuf:"varint,7,opt,name=battery_level_unavailable,json=batteryLevelUnavailable,proto3" json:"battery_level_unavailable,omitempty"`
	// Battery level.
	BatteryLevel float32 `protobuf:"fixed32,8,opt,name=battery_level,json=batteryLevel,proto3" json:"battery_level,omitempty"`
	// User-defined device tags.
	Tags map[string]string `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Published at timestamp.
	PublishedAt *timestamp.Timestamp `protobuf:"bytes,10,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	// Application ID list. The param is using by global integrations only
	Applications         []uint64 `protobuf:"varint,11,rep,packed,name=applications,proto3" json:"applications,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusEvent) Reset()         { *m = StatusEvent{} }
func (m *StatusEvent) String() string { return proto.CompactTextString(m) }
func (*StatusEvent) ProtoMessage()    {}
func (*StatusEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ba82681be587591, []int{5}
}

func (m *StatusEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusEvent.Unmarshal(m, b)
}
func (m *StatusEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusEvent.Marshal(b, m, deterministic)
}
func (m *StatusEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusEvent.Merge(m, src)
}
func (m *StatusEvent) XXX_Size() int {
	return xxx_messageInfo_StatusEvent.Size(m)
}
func (m *StatusEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusEvent.DiscardUnknown(m)
}

var xxx_messageInfo_StatusEvent proto.InternalMessageInfo

func (m *StatusEvent) GetApplicationId() uint64 {
	if m != nil {
		return m.ApplicationId
	}
	return 0
}

func (m *StatusEvent) GetApplicationName() string {
	if m != nil {
		return m.ApplicationName
	}
	return ""
}

func (m *StatusEvent) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *StatusEvent) GetDevEui() []byte {
	if m != nil {
		return m.DevEui
	}
	return nil
}

func (m *StatusEvent) GetMargin() int32 {
	if m != nil {
		return m.Margin
	}
	return 0
}

func (m *StatusEvent) GetExternalPowerSource() bool {
	if m != nil {
		return m.ExternalPowerSource
	}
	return false
}

func (m *StatusEvent) GetBatteryLevelUnavailable() bool {
	if m != nil {
		return m.BatteryLevelUnavailable
	}
	return false
}

func (m *StatusEvent) GetBatteryLevel() float32 {
	if m != nil {
		return m.BatteryLevel
	}
	return 0
}

func (m *StatusEvent) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *StatusEvent) GetPublishedAt() *timestamp.Timestamp {
	if m != nil {
		return m.PublishedAt
	}
	return nil
}

func (m *StatusEvent) GetApplications() []uint64 {
	if m != nil {
		return m.Applications
	}
	return nil
}

// LocationEvent is the message sent when a geolocation resolve was returned.
type LocationEvent struct {
	// Application ID.
	ApplicationId uint64 `protobuf:"varint,1,opt,name=application_id,json=applicationID,proto3" json:"application_id,omitempty"`
	// Application name.
	ApplicationName string `protobuf:"bytes,2,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
	// Device name.
	DeviceName string `protobuf:"bytes,3,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// Device EUI.
	DevEui []byte `protobuf:"bytes,4,opt,name=dev_eui,json=devEUI,proto3" json:"dev_eui,omitempty"`
	// Location.
	Location *common.Location `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	// User-defined device tags.
	Tags map[string]string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Uplink IDs used for geolocation.
	// This is set in case the geolocation is based on the uplink meta-data.
	UplinkIds [][]byte `protobuf:"bytes,7,rep,name=uplink_ids,json=uplinkIDs,proto3" json:"uplink_ids,omitempty"`
	// Frame counter (in case the geolocation is based on the payload).
	// This is set in case the geolocation is based on the uplink payload content.
	FCnt uint32 `protobuf:"varint,8,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	// Published at timestamp.
	PublishedAt *timestamp.Timestamp `protobuf:"bytes,9,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	// Application ID list. The param is using by global integrations only
	Applications         []uint64 `protobuf:"varint,10,rep,packed,name=applications,proto3" json:"applications,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LocationEvent) Reset()         { *m = LocationEvent{} }
func (m *LocationEvent) String() string { return proto.CompactTextString(m) }
func (*LocationEvent) ProtoMessage()    {}
func (*LocationEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ba82681be587591, []int{6}
}

func (m *LocationEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LocationEvent.Unmarshal(m, b)
}
func (m *LocationEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LocationEvent.Marshal(b, m, deterministic)
}
func (m *LocationEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LocationEvent.Merge(m, src)
}
func (m *LocationEvent) XXX_Size() int {
	return xxx_messageInfo_LocationEvent.Size(m)
}
func (m *LocationEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_LocationEvent.DiscardUnknown(m)
}

var xxx_messageInfo_LocationEvent proto.InternalMessageInfo

func (m *LocationEvent) GetApplicationId() uint64 {
	if m != nil {
		return m.ApplicationId
	}
	return 0
}

func (m *LocationEvent) GetApplicationName() string {
	if m != nil {
		return m.ApplicationName
	}
	return ""
}

func (m *LocationEvent) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *LocationEvent) GetDevEui() []byte {
	if m != nil {
		return m.DevEui
	}
	return nil
}

func (m *LocationEvent) GetLocation() *common.Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *LocationEvent) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *LocationEvent) GetUplinkIds() [][]byte {
	if m != nil {
		return m.UplinkIds
	}
	return nil
}

func (m *LocationEvent) GetFCnt() uint32 {
	if m != nil {
		return m.FCnt
	}
	return 0
}

func (m *LocationEvent) GetPublishedAt() *timestamp.Timestamp {
	if m != nil {
		return m.PublishedAt
	}
	return nil
}

func (m *LocationEvent) GetApplications() []uint64 {
	if m != nil {
		return m.Applications
	}
	return nil
}

// IntegrationEvent is the message that can be sent by an integration.
// It allows for sending events which are provided by an external integration
// which are "not native" to ChirpStack.
type IntegrationEvent struct {
	// Application ID.
	ApplicationId uint64 `protobuf:"varint,1,opt,name=application_id,json=applicationID,proto3" json:"application_id,omitempty"`
	// Application name.
	ApplicationName string `protobuf:"bytes,2,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
	// Device name.
	DeviceName string `protobuf:"bytes,3,opt,name=device_name,json=deviceName,proto3" json:"device_name,omitempty"`
	// Device EUI.
	DevEui []byte `protobuf:"bytes,4,opt,name=dev_eui,json=devEUI,proto3" json:"dev_eui,omitempty"`
	// User-defined device tags.
	Tags map[string]string `protobuf:"bytes,5,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Integration name.
	IntegrationName string `protobuf:"bytes,6,opt,name=integration_name,json=integrationName,proto3" json:"integration_name,omitempty"`
	// Event type.
	EventType string `protobuf:"bytes,7,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"`
	// JSON string containing the event object.
	ObjectJson string `protobuf:"bytes,8,opt,name=object_json,json=objectJSON,proto3" json:"object_json,omitempty"`
	// Published at timestamp.
	PublishedAt *timestamp.Timestamp `protobuf:"bytes,9,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	// Application ID list. The param is using by global integrations only
	Applications         []uint64 `protobuf:"varint,10,rep,packed,name=applications,proto3" json:"applications,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IntegrationEvent) Reset()         { *m = IntegrationEvent{} }
func (m *IntegrationEvent) String() string { return proto.CompactTextString(m) }
func (*IntegrationEvent) ProtoMessage()    {}
func (*IntegrationEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ba82681be587591, []int{7}
}

func (m *IntegrationEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IntegrationEvent.Unmarshal(m, b)
}
func (m *IntegrationEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IntegrationEvent.Marshal(b, m, deterministic)
}
func (m *IntegrationEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntegrationEvent.Merge(m, src)
}
func (m *IntegrationEvent) XXX_Size() int {
	return xxx_messageInfo_IntegrationEvent.Size(m)
}
func (m *IntegrationEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_IntegrationEvent.DiscardUnknown(m)
}

var xxx_messageInfo_IntegrationEvent proto.InternalMessageInfo

func (m *IntegrationEvent) GetApplicationId() uint64 {
	if m != nil {
		return m.ApplicationId
	}
	return 0
}

func (m *IntegrationEvent) GetApplicationName() string {
	if m != nil {
		return m.ApplicationName
	}
	return ""
}

func (m *IntegrationEvent) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

func (m *IntegrationEvent) GetDevEui() []byte {
	if m != nil {
		return m.DevEui
	}
	return nil
}

func (m *IntegrationEvent) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *IntegrationEvent) GetIntegrationName() string {
	if m != nil {
		return m.IntegrationName
	}
	return ""
}

func (m *IntegrationEvent) GetEventType() string {
	if m != nil {
		return m.EventType
	}
	return ""
}

func (m *IntegrationEvent) GetObjectJson() string {
	if m != nil {
		return m.ObjectJson
	}
	return ""
}

func (m *IntegrationEvent) GetPublishedAt() *timestamp.Timestamp {
	if m != nil {
		return m.PublishedAt
	}
	return nil
}

func (m *IntegrationEvent) GetApplications() []uint64 {
	if m != nil {
		return m.Applications
	}
	return nil
}

// Lartech Co LTD Custom format for passing data to Ernet.uplink topic
// UplinkEvent is the message sent when an uplink payload has been received.
type LartechUplinkEvent struct {
	MessageId    string `protobuf:"bytes,1,opt,name=messageId,proto3" json:"messageId,omitempty"`
	DevEui       string `protobuf:"bytes,2,opt,name=devEui,proto3" json:"devEui,omitempty"`
	GatewayEui   string `protobuf:"bytes,3,opt,name=gatewayEui,proto3" json:"gatewayEui,omitempty"`
	AppId        string `protobuf:"bytes,4,opt,name=appId,proto3" json:"appId,omitempty"`
	RxTime       int64  `protobuf:"varint,5,opt,name=rxTime,proto3" json:"rxTime,omitempty"`
	FrameCounter int32  `protobuf:"varint,6,opt,name=frameCounter,proto3" json:"frameCounter,omitempty"`
	Confirmed    bool   `protobuf:"varint,7,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	Frequency    int32  `protobuf:"varint,8,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// Types that are valid to be assigned to Modulation:
	//	*LartechUplinkEvent_LoraModulation
	//	*LartechUplinkEvent_FskModulation
	Modulation           isLartechUplinkEvent_Modulation `protobuf_oneof:"modulation"`
	Snr                  float32                         `protobuf:"fixed32,11,opt,name=snr,proto3" json:"snr,omitempty"`
	Rssi                 float32                         `protobuf:"fixed32,12,opt,name=rssi,proto3" json:"rssi,omitempty"`
	Fport                *wrappers.Int32Value            `protobuf:"bytes,13,opt,name=fport,proto3" json:"fport,omitempty"`
	FrmPayload           []byte                          `protobuf:"bytes,14,opt,name=frmPayload,proto3" json:"frmPayload,omitempty"`
	Owner                *wrappers.StringValue           `protobuf:"bytes,15,opt,name=owner,proto3" json:"owner,omitempty"`
	Stat                 *wrappers.Int32Value            `protobuf:"bytes,16,opt,name=stat,proto3" json:"stat,omitempty"`
	RfChain              *wrappers.Int32Value            `protobuf:"bytes,17,opt,name=rfChain,proto3" json:"rfChain,omitempty"`
	Size                 *wrappers.Int32Value            `protobuf:"bytes,18,opt,name=size,proto3" json:"size,omitempty"`
	Firmware             *wrappers.StringValue           `protobuf:"bytes,19,opt,name=firmware,proto3" json:"firmware,omitempty"`
	FirstMessage         *wrappers.BoolValue             `protobuf:"bytes,20,opt,name=firstMessage,proto3" json:"firstMessage,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *LartechUplinkEvent) Reset()         { *m = LartechUplinkEvent{} }
func (m *LartechUplinkEvent) String() string { return proto.CompactTextString(m) }
func (*LartechUplinkEvent) ProtoMessage()    {}
func (*LartechUplinkEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ba82681be587591, []int{8}
}

func (m *LartechUplinkEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LartechUplinkEvent.Unmarshal(m, b)
}
func (m *LartechUplinkEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LartechUplinkEvent.Marshal(b, m, deterministic)
}
func (m *LartechUplinkEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LartechUplinkEvent.Merge(m, src)
}
func (m *LartechUplinkEvent) XXX_Size() int {
	return xxx_messageInfo_LartechUplinkEvent.Size(m)
}
func (m *LartechUplinkEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_LartechUplinkEvent.DiscardUnknown(m)
}

var xxx_messageInfo_LartechUplinkEvent proto.InternalMessageInfo

func (m *LartechUplinkEvent) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *LartechUplinkEvent) GetDevEui() string {
	if m != nil {
		return m.DevEui
	}
	return ""
}

func (m *LartechUplinkEvent) GetGatewayEui() string {
	if m != nil {
		return m.GatewayEui
	}
	return ""
}

func (m *LartechUplinkEvent) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *LartechUplinkEvent) GetRxTime() int64 {
	if m != nil {
		return m.RxTime
	}
	return 0
}

func (m *LartechUplinkEvent) GetFrameCounter() int32 {
	if m != nil {
		return m.FrameCounter
	}
	return 0
}

func (m *LartechUplinkEvent) GetConfirmed() bool {
	if m != nil {
		return m.Confirmed
	}
	return false
}

func (m *LartechUplinkEvent) GetFrequency() int32 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

type isLartechUplinkEvent_Modulation interface {
	isLartechUplinkEvent_Modulation()
}

type LartechUplinkEvent_LoraModulation struct {
	LoraModulation *LoRaModulation `protobuf:"bytes,9,opt,name=loraModulation,proto3,oneof"`
}

type LartechUplinkEvent_FskModulation struct {
	FskModulation *FSKModulation `protobuf:"bytes,10,opt,name=fskModulation,proto3,oneof"`
}

func (*LartechUplinkEvent_LoraModulation) isLartechUplinkEvent_Modulation() {}

func (*LartechUplinkEvent_FskModulation) isLartechUplinkEvent_Modulation() {}

func (m *LartechUplinkEvent) GetModulation() isLartechUplinkEvent_Modulation {
	if m != nil {
		return m.Modulation
	}
	return nil
}

func (m *LartechUplinkEvent) GetLoraModulation() *LoRaModulation {
	if x, ok := m.GetModulation().(*LartechUplinkEvent_LoraModulation); ok {
		return x.LoraModulation
	}
	return nil
}

func (m *LartechUplinkEvent) GetFskModulation() *FSKModulation {
	if x, ok := m.GetModulation().(*LartechUplinkEvent_FskModulation); ok {
		return x.FskModulation
	}
	return nil
}

func (m *LartechUplinkEvent) GetSnr() float32 {
	if m != nil {
		return m.Snr
	}
	return 0
}

func (m *LartechUplinkEvent) GetRssi() float32 {
	if m != nil {
		return m.Rssi
	}
	return 0
}

func (m *LartechUplinkEvent) GetFport() *wrappers.Int32Value {
	if m != nil {
		return m.Fport
	}
	return nil
}

func (m *LartechUplinkEvent) GetFrmPayload() []byte {
	if m != nil {
		return m.FrmPayload
	}
	return nil
}

func (m *LartechUplinkEvent) GetOwner() *wrappers.StringValue {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *LartechUplinkEvent) GetStat() *wrappers.Int32Value {
	if m != nil {
		return m.Stat
	}
	return nil
}

func (m *LartechUplinkEvent) GetRfChain() *wrappers.Int32Value {
	if m != nil {
		return m.RfChain
	}
	return nil
}

func (m *LartechUplinkEvent) GetSize() *wrappers.Int32Value {
	if m != nil {
		return m.Size
	}
	return nil
}

func (m *LartechUplinkEvent) GetFirmware() *wrappers.StringValue {
	if m != nil {
		return m.Firmware
	}
	return nil
}

func (m *LartechUplinkEvent) GetFirstMessage() *wrappers.BoolValue {
	if m != nil {
		return m.FirstMessage
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*LartechUplinkEvent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*LartechUplinkEvent_LoraModulation)(nil),
		(*LartechUplinkEvent_FskModulation)(nil),
	}
}

// the soother is for  LartechUplinkEvent
type LoRaModulation struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoRaModulation) Reset()         { *m = LoRaModulation{} }
func (m *LoRaModulation) String() string { return proto.CompactTextString(m) }
func (*LoRaModulation) ProtoMessage()    {}
func (*LoRaModulation) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ba82681be587591, []int{9}
}

func (m *LoRaModulation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoRaModulation.Unmarshal(m, b)
}
func (m *LoRaModulation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoRaModulation.Marshal(b, m, deterministic)
}
func (m *LoRaModulation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoRaModulation.Merge(m, src)
}
func (m *LoRaModulation) XXX_Size() int {
	return xxx_messageInfo_LoRaModulation.Size(m)
}
func (m *LoRaModulation) XXX_DiscardUnknown() {
	xxx_messageInfo_LoRaModulation.DiscardUnknown(m)
}

var xxx_messageInfo_LoRaModulation proto.InternalMessageInfo

func (m *LoRaModulation) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// the soother is for LartechUplinkEvent
type FSKModulation struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FSKModulation) Reset()         { *m = FSKModulation{} }
func (m *FSKModulation) String() string { return proto.CompactTextString(m) }
func (*FSKModulation) ProtoMessage()    {}
func (*FSKModulation) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ba82681be587591, []int{10}
}

func (m *FSKModulation) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FSKModulation.Unmarshal(m, b)
}
func (m *FSKModulation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FSKModulation.Marshal(b, m, deterministic)
}
func (m *FSKModulation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FSKModulation.Merge(m, src)
}
func (m *FSKModulation) XXX_Size() int {
	return xxx_messageInfo_FSKModulation.Size(m)
}
func (m *FSKModulation) XXX_DiscardUnknown() {
	xxx_messageInfo_FSKModulation.DiscardUnknown(m)
}

var xxx_messageInfo_FSKModulation proto.InternalMessageInfo

func (m *FSKModulation) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// the soother is for LartechDownlink
type StatusRepliesMode struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StatusRepliesMode) Reset()         { *m = StatusRepliesMode{} }
func (m *StatusRepliesMode) String() string { return proto.CompactTextString(m) }
func (*StatusRepliesMode) ProtoMessage()    {}
func (*StatusRepliesMode) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ba82681be587591, []int{11}
}

func (m *StatusRepliesMode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StatusRepliesMode.Unmarshal(m, b)
}
func (m *StatusRepliesMode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StatusRepliesMode.Marshal(b, m, deterministic)
}
func (m *StatusRepliesMode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StatusRepliesMode.Merge(m, src)
}
func (m *StatusRepliesMode) XXX_Size() int {
	return xxx_messageInfo_StatusRepliesMode.Size(m)
}
func (m *StatusRepliesMode) XXX_DiscardUnknown() {
	xxx_messageInfo_StatusRepliesMode.DiscardUnknown(m)
}

var xxx_messageInfo_StatusRepliesMode proto.InternalMessageInfo

func (m *StatusRepliesMode) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// the soother is for LartechDownlink
type DownlinkType struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DownlinkType) Reset()         { *m = DownlinkType{} }
func (m *DownlinkType) String() string { return proto.CompactTextString(m) }
func (*DownlinkType) ProtoMessage()    {}
func (*DownlinkType) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ba82681be587591, []int{12}
}

func (m *DownlinkType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DownlinkType.Unmarshal(m, b)
}
func (m *DownlinkType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DownlinkType.Marshal(b, m, deterministic)
}
func (m *DownlinkType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownlinkType.Merge(m, src)
}
func (m *DownlinkType) XXX_Size() int {
	return xxx_messageInfo_DownlinkType.Size(m)
}
func (m *DownlinkType) XXX_DiscardUnknown() {
	xxx_messageInfo_DownlinkType.DiscardUnknown(m)
}

var xxx_messageInfo_DownlinkType proto.InternalMessageInfo

func (m *DownlinkType) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// the soother is for LartechDownlink. Orig backbone.types.RxWindow
type RxWindow struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RxWindow) Reset()         { *m = RxWindow{} }
func (m *RxWindow) String() string { return proto.CompactTextString(m) }
func (*RxWindow) ProtoMessage()    {}
func (*RxWindow) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ba82681be587591, []int{13}
}

func (m *RxWindow) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RxWindow.Unmarshal(m, b)
}
func (m *RxWindow) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RxWindow.Marshal(b, m, deterministic)
}
func (m *RxWindow) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RxWindow.Merge(m, src)
}
func (m *RxWindow) XXX_Size() int {
	return xxx_messageInfo_RxWindow.Size(m)
}
func (m *RxWindow) XXX_DiscardUnknown() {
	xxx_messageInfo_RxWindow.DiscardUnknown(m)
}

var xxx_messageInfo_RxWindow proto.InternalMessageInfo

func (m *RxWindow) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

// messages from Lartech Kafka
type LartechDownlink struct {
	MessageId            string                `protobuf:"bytes,1,opt,name=messageId,proto3" json:"messageId,omitempty"`
	DevEui               string                `protobuf:"bytes,2,opt,name=devEui,proto3" json:"devEui,omitempty"`
	AppId                string                `protobuf:"bytes,3,opt,name=appId,proto3" json:"appId,omitempty"`
	Retries              *wrappers.Int32Value  `protobuf:"bytes,4,opt,name=retries,proto3" json:"retries,omitempty"`
	Fport                *wrappers.Int32Value  `protobuf:"bytes,5,opt,name=fport,proto3" json:"fport,omitempty"`
	FrmPayloads          [][]byte              `protobuf:"bytes,6,rep,name=frmPayloads,proto3" json:"frmPayloads,omitempty"`
	EnableStatusReplies  bool                  `protobuf:"varint,7,opt,name=enableStatusReplies,proto3" json:"enableStatusReplies,omitempty"`
	RxWindowHint         *RxWindow             `protobuf:"bytes,8,opt,name=rxWindowHint,proto3" json:"rxWindowHint,omitempty"`
	Owner                *wrappers.StringValue `protobuf:"bytes,9,opt,name=owner,proto3" json:"owner,omitempty"`
	StatusRepliesModes   []*StatusRepliesMode  `protobuf:"bytes,10,rep,name=statusRepliesModes,proto3" json:"statusRepliesModes,omitempty"`
	AlreadySentChunks    *wrappers.Int32Value  `protobuf:"bytes,11,opt,name=alreadySentChunks,proto3" json:"alreadySentChunks,omitempty"`
	DownlinkType         *DownlinkType         `protobuf:"bytes,12,opt,name=downlinkType,proto3" json:"downlinkType,omitempty"`
	TimeZoneHours        *wrappers.Int32Value  `protobuf:"bytes,13,opt,name=timeZoneHours,proto3" json:"timeZoneHours,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *LartechDownlink) Reset()         { *m = LartechDownlink{} }
func (m *LartechDownlink) String() string { return proto.CompactTextString(m) }
func (*LartechDownlink) ProtoMessage()    {}
func (*LartechDownlink) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ba82681be587591, []int{14}
}

func (m *LartechDownlink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LartechDownlink.Unmarshal(m, b)
}
func (m *LartechDownlink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LartechDownlink.Marshal(b, m, deterministic)
}
func (m *LartechDownlink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LartechDownlink.Merge(m, src)
}
func (m *LartechDownlink) XXX_Size() int {
	return xxx_messageInfo_LartechDownlink.Size(m)
}
func (m *LartechDownlink) XXX_DiscardUnknown() {
	xxx_messageInfo_LartechDownlink.DiscardUnknown(m)
}

var xxx_messageInfo_LartechDownlink proto.InternalMessageInfo

func (m *LartechDownlink) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *LartechDownlink) GetDevEui() string {
	if m != nil {
		return m.DevEui
	}
	return ""
}

func (m *LartechDownlink) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *LartechDownlink) GetRetries() *wrappers.Int32Value {
	if m != nil {
		return m.Retries
	}
	return nil
}

func (m *LartechDownlink) GetFport() *wrappers.Int32Value {
	if m != nil {
		return m.Fport
	}
	return nil
}

func (m *LartechDownlink) GetFrmPayloads() [][]byte {
	if m != nil {
		return m.FrmPayloads
	}
	return nil
}

func (m *LartechDownlink) GetEnableStatusReplies() bool {
	if m != nil {
		return m.EnableStatusReplies
	}
	return false
}

func (m *LartechDownlink) GetRxWindowHint() *RxWindow {
	if m != nil {
		return m.RxWindowHint
	}
	return nil
}

func (m *LartechDownlink) GetOwner() *wrappers.StringValue {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *LartechDownlink) GetStatusRepliesModes() []*StatusRepliesMode {
	if m != nil {
		return m.StatusRepliesModes
	}
	return nil
}

func (m *LartechDownlink) GetAlreadySentChunks() *wrappers.Int32Value {
	if m != nil {
		return m.AlreadySentChunks
	}
	return nil
}

func (m *LartechDownlink) GetDownlinkType() *DownlinkType {
	if m != nil {
		return m.DownlinkType
	}
	return nil
}

func (m *LartechDownlink) GetTimeZoneHours() *wrappers.Int32Value {
	if m != nil {
		return m.TimeZoneHours
	}
	return nil
}

type LartechDownlinkMessageStatus struct {
	MessageId            string                `protobuf:"bytes,1,opt,name=messageId,proto3" json:"messageId,omitempty"`
	DevEui               string                `protobuf:"bytes,2,opt,name=devEui,proto3" json:"devEui,omitempty"`
	Status               LartechDeliveryStatus `protobuf:"varint,3,opt,name=status,proto3,enum=integration.LartechDeliveryStatus" json:"status,omitempty"`
	StatusDescription    *wrappers.StringValue `protobuf:"bytes,4,opt,name=statusDescription,proto3" json:"statusDescription,omitempty"`
	AppId                string                `protobuf:"bytes,5,opt,name=appId,proto3" json:"appId,omitempty"`
	Owner                *wrappers.StringValue `protobuf:"bytes,6,opt,name=owner,proto3" json:"owner,omitempty"`
	SentChunks           int32                 `protobuf:"varint,7,opt,name=sentChunks,proto3" json:"sentChunks,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *LartechDownlinkMessageStatus) Reset()         { *m = LartechDownlinkMessageStatus{} }
func (m *LartechDownlinkMessageStatus) String() string { return proto.CompactTextString(m) }
func (*LartechDownlinkMessageStatus) ProtoMessage()    {}
func (*LartechDownlinkMessageStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ba82681be587591, []int{15}
}

func (m *LartechDownlinkMessageStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LartechDownlinkMessageStatus.Unmarshal(m, b)
}
func (m *LartechDownlinkMessageStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LartechDownlinkMessageStatus.Marshal(b, m, deterministic)
}
func (m *LartechDownlinkMessageStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LartechDownlinkMessageStatus.Merge(m, src)
}
func (m *LartechDownlinkMessageStatus) XXX_Size() int {
	return xxx_messageInfo_LartechDownlinkMessageStatus.Size(m)
}
func (m *LartechDownlinkMessageStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_LartechDownlinkMessageStatus.DiscardUnknown(m)
}

var xxx_messageInfo_LartechDownlinkMessageStatus proto.InternalMessageInfo

func (m *LartechDownlinkMessageStatus) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *LartechDownlinkMessageStatus) GetDevEui() string {
	if m != nil {
		return m.DevEui
	}
	return ""
}

func (m *LartechDownlinkMessageStatus) GetStatus() LartechDeliveryStatus {
	if m != nil {
		return m.Status
	}
	return LartechDeliveryStatus_ACCEPTED
}

func (m *LartechDownlinkMessageStatus) GetStatusDescription() *wrappers.StringValue {
	if m != nil {
		return m.StatusDescription
	}
	return nil
}

func (m *LartechDownlinkMessageStatus) GetAppId() string {
	if m != nil {
		return m.AppId
	}
	return ""
}

func (m *LartechDownlinkMessageStatus) GetOwner() *wrappers.StringValue {
	if m != nil {
		return m.Owner
	}
	return nil
}

func (m *LartechDownlinkMessageStatus) GetSentChunks() int32 {
	if m != nil {
		return m.SentChunks
	}
	return 0
}

func init() {
	proto.RegisterEnum("integration.ErrorType", ErrorType_name, ErrorType_value)
	proto.RegisterEnum("integration.LartechDeliveryStatus", LartechDeliveryStatus_name, LartechDeliveryStatus_value)
	proto.RegisterType((*UplinkEvent)(nil), "integration.UplinkEvent")
	proto.RegisterMapType((map[string]string)(nil), "integration.UplinkEvent.TagsEntry")
	proto.RegisterType((*JoinEvent)(nil), "integration.JoinEvent")
	proto.RegisterMapType((map[string]string)(nil), "integration.JoinEvent.TagsEntry")
	proto.RegisterType((*AckEvent)(nil), "integration.AckEvent")
	proto.RegisterMapType((map[string]string)(nil), "integration.AckEvent.TagsEntry")
	proto.RegisterType((*TxAckEvent)(nil), "integration.TxAckEvent")
	proto.RegisterMapType((map[string]string)(nil), "integration.TxAckEvent.TagsEntry")
	proto.RegisterType((*ErrorEvent)(nil), "integration.ErrorEvent")
	proto.RegisterMapType((map[string]string)(nil), "integration.ErrorEvent.TagsEntry")
	proto.RegisterType((*StatusEvent)(nil), "integration.StatusEvent")
	proto.RegisterMapType((map[string]string)(nil), "integration.StatusEvent.TagsEntry")
	proto.RegisterType((*LocationEvent)(nil), "integration.LocationEvent")
	proto.RegisterMapType((map[string]string)(nil), "integration.LocationEvent.TagsEntry")
	proto.RegisterType((*IntegrationEvent)(nil), "integration.IntegrationEvent")
	proto.RegisterMapType((map[string]string)(nil), "integration.IntegrationEvent.TagsEntry")
	proto.RegisterType((*LartechUplinkEvent)(nil), "integration.LartechUplinkEvent")
	proto.RegisterType((*LoRaModulation)(nil), "integration.LoRaModulation")
	proto.RegisterType((*FSKModulation)(nil), "integration.FSKModulation")
	proto.RegisterType((*StatusRepliesMode)(nil), "integration.StatusRepliesMode")
	proto.RegisterType((*DownlinkType)(nil), "integration.DownlinkType")
	proto.RegisterType((*RxWindow)(nil), "integration.RxWindow")
	proto.RegisterType((*LartechDownlink)(nil), "integration.LartechDownlink")
	proto.RegisterType((*LartechDownlinkMessageStatus)(nil), "integration.LartechDownlinkMessageStatus")
}

func init() {
	proto.RegisterFile("as/integration/integration.proto", fileDescriptor_5ba82681be587591)
}

var fileDescriptor_5ba82681be587591 = []byte{
	// 1988 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x59, 0xdf, 0x72, 0x1a, 0xc9,
	0xf5, 0x36, 0xff, 0xe1, 0x00, 0xf2, 0xa8, 0x65, 0x79, 0xb1, 0x7e, 0xb6, 0xcc, 0x4f, 0x9b, 0x54,
	0xb4, 0x4e, 0x02, 0x89, 0x9c, 0xdd, 0x38, 0x4e, 0x25, 0x55, 0x18, 0x66, 0xe3, 0xb1, 0x11, 0xa8,
	0x1a, 0xb4, 0xce, 0xfa, 0x66, 0xaa, 0xc5, 0x34, 0x68, 0x56, 0xc3, 0xcc, 0xa4, 0xa7, 0x11, 0x62,
	0x1f, 0x22, 0x0f, 0x90, 0x17, 0xc8, 0x5b, 0x24, 0x55, 0xb9, 0xc8, 0x7d, 0x6a, 0xdf, 0x20, 0x97,
	0xc9, 0x4b, 0xa4, 0xba, 0x7b, 0x80, 0x19, 0xa0, 0x82, 0x76, 0xd7, 0x17, 0xca, 0x15, 0xd3, 0xa7,
	0xbf, 0xee, 0xe9, 0x73, 0xbe, 0xef, 0x9c, 0xe9, 0x6e, 0xa0, 0x4a, 0x82, 0xba, 0xed, 0x72, 0x3a,
	0x62, 0x84, 0xdb, 0x9e, 0x1b, 0x7d, 0xae, 0xf9, 0xcc, 0xe3, 0x1e, 0x2a, 0x46, 0x4c, 0x07, 0x7b,
	0x03, 0x6f, 0x3c, 0xf6, 0xdc, 0xba, 0xfa, 0x51, 0x88, 0x83, 0xa7, 0x23, 0xcf, 0x1b, 0x39, 0xb4,
	0x2e, 0x5b, 0x17, 0x93, 0x61, 0x9d, 0xdb, 0x63, 0x1a, 0x70, 0x32, 0xf6, 0x43, 0x40, 0x71, 0x34,
	0xad, 0x8f, 0xa6, 0x61, 0xe3, 0x70, 0x15, 0x3d, 0x65, 0xc4, 0xf7, 0x29, 0x0b, 0x54, 0xff, 0xd1,
	0x5f, 0xb2, 0x50, 0x3c, 0xf7, 0x1d, 0xdb, 0xbd, 0xd2, 0xaf, 0xa9, 0xcb, 0xd1, 0x0f, 0x61, 0x87,
	0xf8, 0xbe, 0x63, 0x0f, 0xe4, 0x0a, 0x4c, 0xdb, 0xaa, 0x24, 0xaa, 0x89, 0xe3, 0x34, 0x2e, 0x47,
	0xac, 0x46, 0x0b, 0x7d, 0x02, 0x5a, 0x14, 0xe6, 0x92, 0x31, 0xad, 0x24, 0xab, 0x89, 0xe3, 0x02,
	0xbe, 0x1f, 0xb1, 0x77, 0xc8, 0x98, 0xa2, 0xa7, 0x50, 0xb4, 0xe8, 0xb5, 0x3d, 0xa0, 0x0a, 0x95,
	0x92, 0x28, 0x50, 0x26, 0x09, 0xf8, 0x08, 0x72, 0x16, 0xbd, 0x36, 0xe9, 0xc4, 0xae, 0xa4, 0xab,
	0x89, 0xe3, 0x12, 0xce, 0x5a, 0xf4, 0x5a, 0x3f, 0x37, 0xd0, 0x27, 0x90, 0x63, 0x37, 0xa6, 0xed,
	0x0e, 0xbd, 0x4a, 0xa6, 0x9a, 0x3a, 0x2e, 0x9e, 0x68, 0xb5, 0xd1, 0xb4, 0xa6, 0x56, 0x8b, 0x7f,
	0x6f, 0xb8, 0x43, 0x0f, 0x67, 0xd9, 0x8d, 0xf8, 0x15, 0x50, 0x1e, 0x42, 0xb3, 0xd5, 0x44, 0x1c,
	0xda, 0x0f, 0xa1, 0x5c, 0x41, 0x35, 0x48, 0x11, 0x8b, 0x55, 0x72, 0xd5, 0xc4, 0x71, 0x1e, 0x8b,
	0x47, 0xb4, 0x03, 0x49, 0x8b, 0x55, 0xf2, 0xd5, 0xc4, 0x71, 0x19, 0x27, 0x2d, 0x86, 0xf6, 0x20,
	0x33, 0x34, 0x07, 0x2e, 0xaf, 0x14, 0xa4, 0x29, 0x3d, 0x6c, 0xba, 0x1c, 0xed, 0x43, 0x76, 0x68,
	0xfa, 0x1e, 0xe3, 0x15, 0x90, 0xd6, 0xcc, 0xf0, 0xcc, 0x63, 0x1c, 0x21, 0x48, 0x5b, 0x84, 0x93,
	0x4a, 0x51, 0xae, 0x5c, 0x3e, 0x0b, 0x8f, 0xbd, 0x8b, 0xaf, 0xe8, 0x80, 0x9b, 0x5f, 0x05, 0x9e,
	0x5b, 0x29, 0x29, 0x8f, 0x95, 0xe9, 0x4d, 0xaf, 0xdb, 0x41, 0x9f, 0x41, 0x9a, 0x93, 0x51, 0x50,
	0x29, 0x4b, 0xaf, 0x8e, 0x6a, 0x51, 0x19, 0x44, 0xc8, 0xa8, 0xf5, 0xc9, 0x28, 0xd0, 0x5d, 0xce,
	0x66, 0x58, 0xe2, 0x45, 0xd4, 0x07, 0x9e, 0x3b, 0xb4, 0xd9, 0x98, 0x5a, 0xe6, 0x44, 0x02, 0x2b,
	0x3b, 0xd2, 0x8f, 0xfb, 0x0b, 0xbb, 0x1a, 0x8f, 0x1e, 0x41, 0x5e, 0x04, 0x95, 0x58, 0x16, 0xab,
	0xdc, 0x97, 0x6b, 0x13, 0x41, 0x6e, 0x58, 0x16, 0x13, 0x01, 0x18, 0xdb, 0x83, 0x8a, 0x26, 0xad,
	0xe2, 0x51, 0x38, 0xe1, 0x10, 0x4e, 0x2b, 0xbb, 0x72, 0x2e, 0xf9, 0x8c, 0x6a, 0x90, 0x16, 0xc2,
	0xaa, 0x20, 0x19, 0xce, 0x83, 0x9a, 0xd2, 0x51, 0x6d, 0xae, 0xa3, 0x5a, 0x7f, 0xae, 0x3a, 0x2c,
	0x71, 0xe8, 0x37, 0x50, 0xf2, 0x27, 0x17, 0x8e, 0x1d, 0x5c, 0x52, 0xcb, 0x24, 0xbc, 0xb2, 0xb7,
	0x75, 0x5c, 0x71, 0x81, 0x6f, 0x70, 0xf4, 0x0c, 0x76, 0x43, 0x95, 0xf8, 0xcc, 0x1b, 0xda, 0x0e,
	0x15, 0xd2, 0x7b, 0xa0, 0x14, 0xa5, 0x3a, 0xce, 0x94, 0xdd, 0x68, 0xa1, 0x1a, 0xec, 0xad, 0x60,
	0xa5, 0xb2, 0xf6, 0x25, 0x7a, 0x37, 0x86, 0x96, 0x02, 0x3b, 0x82, 0x52, 0x44, 0x94, 0x41, 0xe5,
	0x61, 0x35, 0x75, 0x9c, 0xc6, 0x31, 0xdb, 0xc1, 0x2f, 0xa1, 0xb0, 0x88, 0xb6, 0x88, 0xd0, 0x15,
	0x9d, 0x49, 0xe5, 0x17, 0xb0, 0x78, 0x44, 0x0f, 0x20, 0x73, 0x4d, 0x9c, 0xc9, 0x5c, 0xe4, 0xaa,
	0xf1, 0x32, 0xf9, 0x22, 0x71, 0xf4, 0xaf, 0x14, 0x14, 0xde, 0x78, 0xb6, 0x7b, 0xf7, 0xd2, 0x27,
	0x2a, 0x81, 0x4c, 0x5c, 0x02, 0x91, 0xcc, 0xca, 0xde, 0x3e, 0xb3, 0x72, 0x5b, 0x32, 0x6b, 0x35,
	0x8f, 0x7e, 0x11, 0xca, 0xbc, 0x20, 0x5f, 0x51, 0x8d, 0xc9, 0x7c, 0x11, 0xb2, 0x35, 0x91, 0xaf,
	0x0a, 0x09, 0xbe, 0x9d, 0x90, 0x56, 0xc9, 0x2e, 0x7e, 0x48, 0xb2, 0xff, 0x9a, 0x82, 0x7c, 0x63,
	0x70, 0x07, 0x4b, 0xa5, 0xf0, 0x7a, 0x70, 0xe5, 0x7a, 0x53, 0x87, 0x5a, 0x23, 0x6a, 0x49, 0xbe,
	0xf3, 0x38, 0x66, 0x5b, 0x96, 0xb5, 0x6c, 0xa4, 0xac, 0x3d, 0x0f, 0x39, 0xca, 0x49, 0x8e, 0x9e,
	0xc6, 0x38, 0x9a, 0x7b, 0xba, 0x95, 0xa2, 0xfc, 0xb7, 0xa3, 0xe8, 0x09, 0xc0, 0x98, 0x06, 0x01,
	0x19, 0xc9, 0x24, 0x2f, 0x48, 0x2f, 0x0b, 0xa1, 0xc5, 0xb0, 0xd6, 0x18, 0x84, 0x0f, 0xc9, 0xe0,
	0xbf, 0x53, 0x00, 0xfd, 0x9b, 0x3b, 0xc9, 0xe1, 0x82, 0x9f, 0x4c, 0x84, 0x9f, 0x4f, 0x43, 0x7e,
	0x54, 0x9a, 0xfe, 0x7f, 0x8c, 0x9f, 0xa5, 0x1f, 0x6b, 0x0c, 0x3d, 0x01, 0x18, 0x11, 0x4e, 0xa7,
	0x64, 0x26, 0x7c, 0xca, 0xc9, 0xf7, 0x14, 0x42, 0x8b, 0xd1, 0x42, 0x3f, 0x5e, 0x26, 0xb5, 0xe2,
	0x0e, 0x89, 0xa4, 0x6e, 0x79, 0x53, 0x77, 0x43, 0x5a, 0xaf, 0xb2, 0x5d, 0xf8, 0x3e, 0x6c, 0xc3,
	0x36, 0xb6, 0x3f, 0x68, 0xbe, 0xfe, 0x2d, 0x05, 0xa0, 0x33, 0xe6, 0xb1, 0xbb, 0xc7, 0xf6, 0x33,
	0x48, 0xf3, 0x99, 0x4f, 0x25, 0xd9, 0x3b, 0x27, 0x0f, 0x63, 0xc4, 0xca, 0x25, 0xf7, 0x67, 0x3e,
	0xc5, 0x12, 0x23, 0x1c, 0xa4, 0xc2, 0x24, 0x33, 0xb7, 0x80, 0x55, 0x63, 0xa9, 0x97, 0xdc, 0x06,
	0xbd, 0xe4, 0x37, 0xe8, 0x65, 0x19, 0x89, 0xad, 0x19, 0x5d, 0xf8, 0x7e, 0x45, 0xf7, 0x83, 0xa6,
	0xec, 0x9f, 0xd2, 0x50, 0xec, 0x71, 0xc2, 0x27, 0xc1, 0xdd, 0x63, 0xf1, 0x21, 0x64, 0xc7, 0x84,
	0x8d, 0x6c, 0x57, 0xf2, 0x98, 0xc1, 0x61, 0x0b, 0x9d, 0xc0, 0x3e, 0xbd, 0xe1, 0x94, 0xb9, 0xc4,
	0x31, 0x7d, 0x6f, 0x4a, 0x99, 0x19, 0x78, 0x13, 0x36, 0xa0, 0x92, 0xc1, 0x3c, 0xde, 0x9b, 0x77,
	0x9e, 0x89, 0xbe, 0x9e, 0xec, 0x42, 0x2f, 0xe1, 0xd1, 0x05, 0xe1, 0x9c, 0xb2, 0x99, 0xe9, 0xd0,
	0x6b, 0xea, 0x98, 0x13, 0x97, 0x5c, 0x13, 0xdb, 0x21, 0x17, 0x0e, 0x0d, 0xb7, 0xab, 0x1f, 0x85,
	0x80, 0xb6, 0xe8, 0x3f, 0x5f, 0x76, 0xa3, 0x8f, 0xa1, 0x1c, 0x1b, 0x2b, 0xd3, 0x3a, 0x89, 0x4b,
	0x51, 0xfc, 0x62, 0xdb, 0x59, 0xd8, 0xb0, 0xed, 0x8c, 0x04, 0xf8, 0x7f, 0xea, 0x8b, 0xfc, 0x4d,
	0x0a, 0xca, 0x6d, 0x4f, 0x4d, 0x73, 0xf7, 0xe4, 0xf1, 0x13, 0xc8, 0x3b, 0xe1, 0xe2, 0xa4, 0x40,
	0xc4, 0xee, 0x29, 0x3c, 0xcc, 0xcd, 0x17, 0x8d, 0x17, 0x08, 0xf4, 0x22, 0x56, 0xeb, 0x7f, 0x10,
	0xe3, 0x27, 0xe6, 0xe3, 0xa6, 0x72, 0xaf, 0x8e, 0x03, 0xa6, 0x6d, 0xa9, 0x6f, 0x79, 0x09, 0x17,
	0x94, 0xc5, 0x68, 0x05, 0xcb, 0x4a, 0x91, 0x8f, 0x54, 0x8a, 0xbb, 0x9c, 0xf2, 0xff, 0x4c, 0x81,
	0x66, 0x2c, 0xbd, 0xbf, 0x7b, 0xc4, 0xfe, 0x3a, 0xa4, 0x4a, 0x9d, 0x4b, 0x7f, 0x14, 0xa3, 0x6a,
	0x75, 0xe1, 0x9b, 0x8e, 0x71, 0x11, 0xbc, 0x7a, 0xb7, 0xaa, 0xec, 0xf7, 0x23, 0x76, 0xb9, 0x80,
	0x27, 0x00, 0x54, 0xcc, 0x61, 0xca, 0x6f, 0x45, 0x4e, 0x7d, 0x3c, 0xa5, 0x45, 0x7c, 0x1e, 0x56,
	0x4f, 0x9a, 0xf9, 0xb5, 0x93, 0xe6, 0x5d, 0x26, 0xf9, 0x1f, 0x59, 0x40, 0x6d, 0xc2, 0x38, 0x1d,
	0x5c, 0x46, 0x6f, 0x20, 0x1e, 0xc3, 0x72, 0x77, 0x10, 0x4e, 0x14, 0xd9, 0x2e, 0x3c, 0x04, 0x49,
	0xc1, 0xc4, 0x0e, 0xe7, 0x0b, 0x5b, 0xe8, 0x70, 0xb1, 0xe1, 0x11, 0x7d, 0x21, 0x93, 0x4b, 0x8b,
	0x58, 0x06, 0xf1, 0x7d, 0xc3, 0x92, 0x3c, 0x16, 0xb0, 0x6a, 0x88, 0xd9, 0xd8, 0x8d, 0xf0, 0x5d,
	0x66, 0x67, 0x0a, 0x87, 0x2d, 0xe1, 0xf7, 0x90, 0x91, 0x31, 0x6d, 0x7a, 0x13, 0x97, 0x53, 0xf5,
	0xdd, 0xcd, 0xe0, 0x98, 0x4d, 0xac, 0x73, 0x71, 0xe8, 0x0e, 0xcb, 0xf3, 0xd2, 0x20, 0x7a, 0x87,
	0x8c, 0xfe, 0x61, 0x42, 0xdd, 0xc1, 0x4c, 0xf2, 0x92, 0xc1, 0x4b, 0x03, 0xd2, 0x61, 0xc7, 0xf1,
	0x18, 0x39, 0xf5, 0xac, 0x89, 0xa3, 0xaa, 0x83, 0x22, 0xe6, 0xff, 0x56, 0x72, 0x1e, 0x47, 0x20,
	0xaf, 0xef, 0xe1, 0x95, 0x41, 0xe8, 0x15, 0x94, 0x87, 0xc1, 0x55, 0x64, 0x96, 0x79, 0x65, 0x8e,
	0xce, 0xf2, 0x79, 0xef, 0x6d, 0x6c, 0x92, 0xf8, 0x10, 0xc1, 0x58, 0xe0, 0x32, 0x79, 0x7f, 0x91,
	0xc4, 0xe2, 0x11, 0x21, 0x48, 0xb3, 0x20, 0xb0, 0xe5, 0xbd, 0x45, 0x12, 0xcb, 0x67, 0xf4, 0x73,
	0xc8, 0x0c, 0xe5, 0xe5, 0x47, 0x39, 0x5c, 0xe7, 0xaa, 0x80, 0x0c, 0x97, 0x3f, 0x3f, 0xf9, 0x42,
	0x70, 0x8b, 0x15, 0x52, 0x30, 0x32, 0x64, 0xe3, 0x33, 0x32, 0x73, 0x3c, 0x62, 0xc9, 0x6b, 0x8a,
	0x12, 0x8e, 0x58, 0xd0, 0x09, 0x64, 0xbc, 0xa9, 0x4b, 0xd5, 0xf5, 0x44, 0xf1, 0xe4, 0xf1, 0xda,
	0x94, 0x3d, 0xce, 0x6c, 0x77, 0x14, 0xce, 0x29, 0xa1, 0xa8, 0x0e, 0xe9, 0x80, 0x13, 0x2e, 0xef,
	0x2e, 0xb6, 0xac, 0x42, 0x02, 0xd1, 0xa7, 0x90, 0x63, 0xc3, 0xe6, 0x25, 0xb1, 0x5d, 0x79, 0xb9,
	0xb1, 0x65, 0xcc, 0x1c, 0x2b, 0xdf, 0x63, 0x7f, 0x3d, 0xbf, 0xfc, 0xd8, 0xf2, 0x1e, 0xfb, 0x6b,
	0x8a, 0x5e, 0x40, 0x5e, 0x10, 0x3f, 0x25, 0x8c, 0x86, 0x37, 0x1f, 0xff, 0xdd, 0x9f, 0x05, 0x1a,
	0xfd, 0x16, 0x4a, 0x43, 0x9b, 0x05, 0xfc, 0x54, 0x49, 0x5c, 0xde, 0x79, 0x6c, 0xca, 0xd0, 0x57,
	0x9e, 0xe7, 0xa8, 0xb1, 0x31, 0xfc, 0xab, 0x12, 0xc0, 0x78, 0xc1, 0xe6, 0x51, 0x15, 0x76, 0xe2,
	0xaa, 0x11, 0x87, 0xf2, 0xb0, 0x52, 0x66, 0x70, 0xd2, 0xb6, 0x8e, 0x9e, 0x42, 0x39, 0xa6, 0x88,
	0x35, 0xc0, 0xc7, 0xb0, 0xab, 0x36, 0x03, 0x98, 0xfa, 0x8e, 0x4d, 0x83, 0x53, 0xcf, 0xa2, 0x6b,
	0xa0, 0x43, 0x28, 0x2d, 0x4e, 0x0b, 0xa2, 0x10, 0xad, 0xf6, 0x1f, 0x40, 0x1e, 0xdf, 0xbc, 0xb3,
	0x5d, 0xcb, 0x9b, 0xae, 0xf5, 0xfd, 0x39, 0x03, 0xf7, 0xc3, 0xbc, 0x9f, 0xcf, 0xf1, 0x1d, 0x93,
	0x7e, 0x91, 0xd4, 0xa9, 0x68, 0x52, 0x0b, 0xce, 0x29, 0x67, 0x36, 0x0d, 0x64, 0xb2, 0x6f, 0xe5,
	0x5c, 0x61, 0x97, 0x12, 0xcf, 0xdc, 0x5a, 0xe2, 0x55, 0x28, 0x2e, 0x05, 0xad, 0xbe, 0xdb, 0x25,
	0x1c, 0x35, 0xa1, 0x9f, 0xc1, 0x1e, 0x75, 0xc5, 0x0e, 0x2d, 0x16, 0xd2, 0xb0, 0x5c, 0x6c, 0xea,
	0x42, 0xbf, 0x82, 0x12, 0x0b, 0x23, 0xf7, 0xda, 0x76, 0xe7, 0x67, 0xeb, 0xfd, 0x58, 0x4a, 0xcf,
	0x43, 0x8b, 0x63, 0xd0, 0x65, 0x46, 0x15, 0x6e, 0x9f, 0x51, 0x1d, 0x40, 0xc1, 0x2a, 0xdb, 0xaa,
	0xce, 0x17, 0x4f, 0x0e, 0x37, 0xec, 0x10, 0x23, 0x30, 0xbc, 0x61, 0x24, 0x32, 0x60, 0x97, 0x38,
	0x8c, 0x12, 0x6b, 0xd6, 0xa3, 0x2e, 0x6f, 0x5e, 0x4e, 0xdc, 0xab, 0x40, 0x16, 0x97, 0x2d, 0x11,
	0x5d, 0x1f, 0x25, 0xbe, 0x5d, 0x56, 0x44, 0x63, 0xb2, 0x1e, 0x15, 0x4f, 0x1e, 0xc5, 0x16, 0x15,
	0x15, 0x21, 0x8e, 0xc1, 0x51, 0x03, 0xca, 0xdc, 0x1e, 0xd3, 0xf7, 0x9e, 0x4b, 0x5f, 0x7b, 0x13,
	0x16, 0xdc, 0xa6, 0x74, 0xc5, 0x47, 0x1c, 0xfd, 0x3d, 0x09, 0x8f, 0x57, 0x94, 0x1a, 0xa6, 0x9d,
	0x0a, 0xc6, 0x77, 0x94, 0xed, 0x4b, 0xc8, 0xaa, 0xc8, 0x49, 0xdd, 0xee, 0xac, 0xec, 0xc4, 0xe7,
	0x2f, 0xa4, 0x8e, 0x7d, 0x4d, 0xd9, 0x2c, 0x0c, 0x7b, 0x38, 0x02, 0xbd, 0x81, 0x5d, 0xf5, 0xd4,
	0xa2, 0xc1, 0x80, 0xd9, 0xbe, 0x2c, 0xfb, 0xe9, 0x5b, 0xf0, 0xbd, 0x3e, 0x6c, 0x99, 0x3e, 0x99,
	0x68, 0xfa, 0x2c, 0x54, 0x94, 0xbd, 0xbd, 0x8a, 0x0e, 0x01, 0x82, 0x25, 0xdd, 0x39, 0x99, 0xea,
	0x11, 0xcb, 0xb3, 0x6f, 0x12, 0x50, 0x58, 0x1c, 0x6a, 0x51, 0x11, 0x72, 0xe7, 0x9d, 0xb7, 0x9d,
	0xee, 0xbb, 0x8e, 0x76, 0x0f, 0x3d, 0x82, 0xfd, 0x56, 0xf7, 0x5d, 0xa7, 0x6d, 0x74, 0xde, 0x9a,
	0x67, 0x8d, 0x2f, 0xdb, 0xdd, 0x46, 0xcb, 0xec, 0x19, 0xef, 0x75, 0x2d, 0x81, 0x76, 0xa1, 0xbc,
	0xe8, 0xfa, 0xbc, 0xd9, 0xe9, 0x6b, 0x49, 0xa4, 0x41, 0xe9, 0xfc, 0x4c, 0x1a, 0x9a, 0xdd, 0x96,
	0xde, 0xd4, 0x52, 0x08, 0xc1, 0xce, 0x02, 0xa4, 0x6c, 0x69, 0x94, 0x87, 0x74, 0xb7, 0xdf, 0x68,
	0x68, 0x19, 0xb4, 0x0f, 0xbb, 0x21, 0x5e, 0x4c, 0x60, 0x62, 0xbd, 0xa7, 0xf7, 0xb5, 0x2c, 0xda,
	0x01, 0x08, 0xcd, 0xa7, 0x46, 0x53, 0xcb, 0xa1, 0x43, 0x38, 0x88, 0xc3, 0xfa, 0xb8, 0xd1, 0xe9,
	0x9d, 0x1a, 0xbd, 0x9e, 0xd1, 0xed, 0x68, 0x79, 0xf4, 0x00, 0xb4, 0xc5, 0x4b, 0x7e, 0xd7, 0xe8,
	0xeb, 0xef, 0x1a, 0x5f, 0x6a, 0x85, 0x67, 0x7f, 0x4c, 0xc0, 0xfe, 0x46, 0xb6, 0x50, 0x09, 0xf2,
	0x8d, 0x66, 0x53, 0x3f, 0xeb, 0xeb, 0x2d, 0xed, 0x9e, 0x68, 0x61, 0xfd, 0x8d, 0xde, 0x14, 0xad,
	0x04, 0x02, 0xc8, 0x76, 0x3b, 0x66, 0xc3, 0xc0, 0x5a, 0x52, 0x2c, 0xb4, 0xdd, 0xed, 0xf5, 0xb5,
	0x14, 0x2a, 0x43, 0xa1, 0xa5, 0xb7, 0x8d, 0x2f, 0x74, 0xac, 0xb7, 0xb4, 0xb4, 0x70, 0x5d, 0x4c,
	0xd0, 0xeb, 0x99, 0x2d, 0xbd, 0x63, 0xe8, 0x2d, 0x2d, 0x23, 0x1c, 0x35, 0x3a, 0x7d, 0x1d, 0x77,
	0x1a, 0x6d, 0x53, 0xc7, 0xb8, 0x8b, 0xb5, 0xac, 0x18, 0xd5, 0x6c, 0x74, 0x9a, 0x7a, 0xbb, 0xad,
	0xb7, 0xb4, 0xdc, 0x2b, 0x17, 0xaa, 0xb6, 0x57, 0x1b, 0x5c, 0xda, 0xcc, 0x0f, 0x38, 0x19, 0x5c,
	0xd5, 0x88, 0x6f, 0xd7, 0x48, 0x10, 0x95, 0xd7, 0xab, 0xe8, 0xbe, 0xfa, 0x4c, 0x50, 0x7a, 0x96,
	0x78, 0xff, 0xd9, 0xc8, 0xe6, 0x97, 0x93, 0x0b, 0x71, 0x34, 0xa9, 0x5f, 0x30, 0x6f, 0x40, 0x08,
	0xab, 0x2f, 0x67, 0xf9, 0x29, 0xf1, 0xed, 0xfa, 0xc8, 0xab, 0x5f, 0x3f, 0xaf, 0xc7, 0xff, 0xbe,
	0xba, 0xc8, 0x4a, 0x4d, 0x3c, 0xff, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb0, 0x75, 0x8b, 0xca,
	0xd7, 0x1a, 0x00, 0x00,
}
