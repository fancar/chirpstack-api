// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: ns/ns.proto

package ns

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NetworkServerService_CreateServiceProfile_FullMethodName                    = "/ns.NetworkServerService/CreateServiceProfile"
	NetworkServerService_GetServiceProfile_FullMethodName                       = "/ns.NetworkServerService/GetServiceProfile"
	NetworkServerService_UpdateServiceProfile_FullMethodName                    = "/ns.NetworkServerService/UpdateServiceProfile"
	NetworkServerService_DeleteServiceProfile_FullMethodName                    = "/ns.NetworkServerService/DeleteServiceProfile"
	NetworkServerService_CreateRoutingProfile_FullMethodName                    = "/ns.NetworkServerService/CreateRoutingProfile"
	NetworkServerService_GetRoutingProfile_FullMethodName                       = "/ns.NetworkServerService/GetRoutingProfile"
	NetworkServerService_UpdateRoutingProfile_FullMethodName                    = "/ns.NetworkServerService/UpdateRoutingProfile"
	NetworkServerService_DeleteRoutingProfile_FullMethodName                    = "/ns.NetworkServerService/DeleteRoutingProfile"
	NetworkServerService_CreateDeviceProfile_FullMethodName                     = "/ns.NetworkServerService/CreateDeviceProfile"
	NetworkServerService_GetDeviceProfile_FullMethodName                        = "/ns.NetworkServerService/GetDeviceProfile"
	NetworkServerService_UpdateDeviceProfile_FullMethodName                     = "/ns.NetworkServerService/UpdateDeviceProfile"
	NetworkServerService_DeleteDeviceProfile_FullMethodName                     = "/ns.NetworkServerService/DeleteDeviceProfile"
	NetworkServerService_CreateDevice_FullMethodName                            = "/ns.NetworkServerService/CreateDevice"
	NetworkServerService_GetDevice_FullMethodName                               = "/ns.NetworkServerService/GetDevice"
	NetworkServerService_UpdateDevice_FullMethodName                            = "/ns.NetworkServerService/UpdateDevice"
	NetworkServerService_DeleteDevice_FullMethodName                            = "/ns.NetworkServerService/DeleteDevice"
	NetworkServerService_ActivateDevice_FullMethodName                          = "/ns.NetworkServerService/ActivateDevice"
	NetworkServerService_DeactivateDevice_FullMethodName                        = "/ns.NetworkServerService/DeactivateDevice"
	NetworkServerService_GetDeviceActivation_FullMethodName                     = "/ns.NetworkServerService/GetDeviceActivation"
	NetworkServerService_CreateDeviceQueueItem_FullMethodName                   = "/ns.NetworkServerService/CreateDeviceQueueItem"
	NetworkServerService_FlushDeviceQueueForDevEUI_FullMethodName               = "/ns.NetworkServerService/FlushDeviceQueueForDevEUI"
	NetworkServerService_GetDeviceQueueItemsForDevEUI_FullMethodName            = "/ns.NetworkServerService/GetDeviceQueueItemsForDevEUI"
	NetworkServerService_GetNextDownlinkFCntForDevEUI_FullMethodName            = "/ns.NetworkServerService/GetNextDownlinkFCntForDevEUI"
	NetworkServerService_GetRandomDevAddr_FullMethodName                        = "/ns.NetworkServerService/GetRandomDevAddr"
	NetworkServerService_CreateMACCommandQueueItem_FullMethodName               = "/ns.NetworkServerService/CreateMACCommandQueueItem"
	NetworkServerService_SendProprietaryPayload_FullMethodName                  = "/ns.NetworkServerService/SendProprietaryPayload"
	NetworkServerService_CreateGateway_FullMethodName                           = "/ns.NetworkServerService/CreateGateway"
	NetworkServerService_GetGateway_FullMethodName                              = "/ns.NetworkServerService/GetGateway"
	NetworkServerService_UpdateGateway_FullMethodName                           = "/ns.NetworkServerService/UpdateGateway"
	NetworkServerService_DeleteGateway_FullMethodName                           = "/ns.NetworkServerService/DeleteGateway"
	NetworkServerService_GenerateGatewayClientCertificate_FullMethodName        = "/ns.NetworkServerService/GenerateGatewayClientCertificate"
	NetworkServerService_CreateGatewayProfile_FullMethodName                    = "/ns.NetworkServerService/CreateGatewayProfile"
	NetworkServerService_GetGatewayProfile_FullMethodName                       = "/ns.NetworkServerService/GetGatewayProfile"
	NetworkServerService_UpdateGatewayProfile_FullMethodName                    = "/ns.NetworkServerService/UpdateGatewayProfile"
	NetworkServerService_DeleteGatewayProfile_FullMethodName                    = "/ns.NetworkServerService/DeleteGatewayProfile"
	NetworkServerService_GetGatewayStats_FullMethodName                         = "/ns.NetworkServerService/GetGatewayStats"
	NetworkServerService_StreamFrameLogsForGateway_FullMethodName               = "/ns.NetworkServerService/StreamFrameLogsForGateway"
	NetworkServerService_StreamFrameLogsForDevice_FullMethodName                = "/ns.NetworkServerService/StreamFrameLogsForDevice"
	NetworkServerService_CreateMulticastGroup_FullMethodName                    = "/ns.NetworkServerService/CreateMulticastGroup"
	NetworkServerService_GetMulticastGroup_FullMethodName                       = "/ns.NetworkServerService/GetMulticastGroup"
	NetworkServerService_UpdateMulticastGroup_FullMethodName                    = "/ns.NetworkServerService/UpdateMulticastGroup"
	NetworkServerService_DeleteMulticastGroup_FullMethodName                    = "/ns.NetworkServerService/DeleteMulticastGroup"
	NetworkServerService_AddDeviceToMulticastGroup_FullMethodName               = "/ns.NetworkServerService/AddDeviceToMulticastGroup"
	NetworkServerService_RemoveDeviceFromMulticastGroup_FullMethodName          = "/ns.NetworkServerService/RemoveDeviceFromMulticastGroup"
	NetworkServerService_EnqueueMulticastQueueItem_FullMethodName               = "/ns.NetworkServerService/EnqueueMulticastQueueItem"
	NetworkServerService_FlushMulticastQueueForMulticastGroup_FullMethodName    = "/ns.NetworkServerService/FlushMulticastQueueForMulticastGroup"
	NetworkServerService_GetMulticastQueueItemsForMulticastGroup_FullMethodName = "/ns.NetworkServerService/GetMulticastQueueItemsForMulticastGroup"
	NetworkServerService_GetVersion_FullMethodName                              = "/ns.NetworkServerService/GetVersion"
	NetworkServerService_GetADRAlgorithms_FullMethodName                        = "/ns.NetworkServerService/GetADRAlgorithms"
	NetworkServerService_GetDeviceForExport_FullMethodName                      = "/ns.NetworkServerService/GetDeviceForExport"
	NetworkServerService_ClearDeviceNonces_FullMethodName                       = "/ns.NetworkServerService/ClearDeviceNonces"
	NetworkServerService_CountGateways_FullMethodName                           = "/ns.NetworkServerService/CountGateways"
)

// NetworkServerServiceClient is the client API for NetworkServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetworkServerServiceClient interface {
	// CreateServiceProfile creates the given service-profile.
	CreateServiceProfile(ctx context.Context, in *CreateServiceProfileRequest, opts ...grpc.CallOption) (*CreateServiceProfileResponse, error)
	// GetServiceProfile returns the service-profile matching the given id.
	GetServiceProfile(ctx context.Context, in *GetServiceProfileRequest, opts ...grpc.CallOption) (*GetServiceProfileResponse, error)
	// UpdateServiceProfile updates the given service-profile.
	UpdateServiceProfile(ctx context.Context, in *UpdateServiceProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteServiceProfile deletes the service-profile matching the given id.
	DeleteServiceProfile(ctx context.Context, in *DeleteServiceProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateRoutingProfile creates the given routing-profile.
	CreateRoutingProfile(ctx context.Context, in *CreateRoutingProfileRequest, opts ...grpc.CallOption) (*CreateRoutingProfileResponse, error)
	// GetRoutingProfile returns the routing-profile matching the given id.
	GetRoutingProfile(ctx context.Context, in *GetRoutingProfileRequest, opts ...grpc.CallOption) (*GetRoutingProfileResponse, error)
	// UpdateRoutingProfile updates the given routing-profile.
	UpdateRoutingProfile(ctx context.Context, in *UpdateRoutingProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteRoutingProfile deletes the routing-profile matching the given id.
	DeleteRoutingProfile(ctx context.Context, in *DeleteRoutingProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateDeviceProfile creates the given device-profile.
	CreateDeviceProfile(ctx context.Context, in *CreateDeviceProfileRequest, opts ...grpc.CallOption) (*CreateDeviceProfileResponse, error)
	// GetDeviceProfile returns the device-profile matching the given id.
	GetDeviceProfile(ctx context.Context, in *GetDeviceProfileRequest, opts ...grpc.CallOption) (*GetDeviceProfileResponse, error)
	// UpdateDeviceProfile updates the given device-profile.
	UpdateDeviceProfile(ctx context.Context, in *UpdateDeviceProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteDeviceProfile deletes the device-profile matching the given id.
	DeleteDeviceProfile(ctx context.Context, in *DeleteDeviceProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateDevice creates the given device.
	CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetDevice returns the device matching the given DevEUI.
	GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error)
	// UpdateDevice updates the given device.
	UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteDevice deletes the device matching the given DevEUI.
	DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// ActivateDevice activates a device (ABP).
	ActivateDevice(ctx context.Context, in *ActivateDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeactivateDevice de-activates a device.
	DeactivateDevice(ctx context.Context, in *DeactivateDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetDeviceActivation returns the device activation details.
	GetDeviceActivation(ctx context.Context, in *GetDeviceActivationRequest, opts ...grpc.CallOption) (*GetDeviceActivationResponse, error)
	// CreateDeviceQueueItem creates the given device-queue item.
	CreateDeviceQueueItem(ctx context.Context, in *CreateDeviceQueueItemRequest, opts ...grpc.CallOption) (*FCntInResponse, error)
	// FlushDeviceQueueForDevEUI flushes the device-queue for the given DevEUI.
	FlushDeviceQueueForDevEUI(ctx context.Context, in *FlushDeviceQueueForDevEUIRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetDeviceQueueItemsForDevEUI returns all device-queue items for the given DevEUI.
	GetDeviceQueueItemsForDevEUI(ctx context.Context, in *GetDeviceQueueItemsForDevEUIRequest, opts ...grpc.CallOption) (*GetDeviceQueueItemsForDevEUIResponse, error)
	// GetNextDownlinkFCntForDevEUI returns the next FCnt that must be used.
	// This also takes device-queue items for the given DevEUI into consideration.
	// deprecated. As encryption had been moved to NS
	GetNextDownlinkFCntForDevEUI(ctx context.Context, in *GetNextDownlinkFCntForDevEUIRequest, opts ...grpc.CallOption) (*GetNextDownlinkFCntForDevEUIResponse, error)
	// GetRandomDevAddr returns a random DevAddr taking the NwkID prefix into account.
	GetRandomDevAddr(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRandomDevAddrResponse, error)
	// CreateMACCommandQueueItem adds the downlink mac-command to the queue.
	CreateMACCommandQueueItem(ctx context.Context, in *CreateMACCommandQueueItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// SendProprietaryPayload send a payload using the 'Proprietary' LoRaWAN message-type.
	SendProprietaryPayload(ctx context.Context, in *SendProprietaryPayloadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CreateGateway creates the given gateway.
	CreateGateway(ctx context.Context, in *CreateGatewayRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetGateway returns data for a particular gateway.
	GetGateway(ctx context.Context, in *GetGatewayRequest, opts ...grpc.CallOption) (*GetGatewayResponse, error)
	// UpdateGateway updates an existing gateway.
	UpdateGateway(ctx context.Context, in *UpdateGatewayRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteGateway deletes a gateway.
	DeleteGateway(ctx context.Context, in *DeleteGatewayRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GenerateGatewayClientCertificate returns TLS certificate gateway authentication / authorization.
	// This endpoint can ony be used when ChirpStack Network Server is configured with a gateway
	// CA certificate and key, which is used for signing the TLS certificate. The returned TLS
	// certificate will have the Gateway ID as Common Name.
	GenerateGatewayClientCertificate(ctx context.Context, in *GenerateGatewayClientCertificateRequest, opts ...grpc.CallOption) (*GenerateGatewayClientCertificateResponse, error)
	// CreateGatewayProfile creates the given gateway-profile.
	CreateGatewayProfile(ctx context.Context, in *CreateGatewayProfileRequest, opts ...grpc.CallOption) (*CreateGatewayProfileResponse, error)
	// GetGatewayProfile returns the gateway-profile given an id.
	GetGatewayProfile(ctx context.Context, in *GetGatewayProfileRequest, opts ...grpc.CallOption) (*GetGatewayProfileResponse, error)
	// UpdateGatewayProfile updates the given gateway-profile.
	UpdateGatewayProfile(ctx context.Context, in *UpdateGatewayProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteGatewayProfile deletes the gateway-profile matching a given id.
	DeleteGatewayProfile(ctx context.Context, in *DeleteGatewayProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetGatewayStats returns stats of an existing gateway.
	// Deprecated (stats are forwarded to Application Server API).
	GetGatewayStats(ctx context.Context, in *GetGatewayStatsRequest, opts ...grpc.CallOption) (*GetGatewayStatsResponse, error)
	// StreamFrameLogsForGateway returns a stream of frames seen by the given gateway.
	StreamFrameLogsForGateway(ctx context.Context, in *StreamFrameLogsForGatewayRequest, opts ...grpc.CallOption) (NetworkServerService_StreamFrameLogsForGatewayClient, error)
	// StreamFrameLogsForDevice returns a stream of frames seen by the given device.
	StreamFrameLogsForDevice(ctx context.Context, in *StreamFrameLogsForDeviceRequest, opts ...grpc.CallOption) (NetworkServerService_StreamFrameLogsForDeviceClient, error)
	// CreateMulticastGroup creates the given multicast-group.
	CreateMulticastGroup(ctx context.Context, in *CreateMulticastGroupRequest, opts ...grpc.CallOption) (*CreateMulticastGroupResponse, error)
	// GetMulticastGroup returns the multicast-group given an id.
	GetMulticastGroup(ctx context.Context, in *GetMulticastGroupRequest, opts ...grpc.CallOption) (*GetMulticastGroupResponse, error)
	// UpdateMulticastGroup updates the given multicast-group.
	UpdateMulticastGroup(ctx context.Context, in *UpdateMulticastGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// DeleteMulticastGroup deletes a multicast-group given an id.
	DeleteMulticastGroup(ctx context.Context, in *DeleteMulticastGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// AddDeviceToMulticastGroup adds the given device to the given multicast-group.
	AddDeviceToMulticastGroup(ctx context.Context, in *AddDeviceToMulticastGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// RemoveDeviceFromMulticastGroup removes the given device from the given multicast-group.
	RemoveDeviceFromMulticastGroup(ctx context.Context, in *RemoveDeviceFromMulticastGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// EnqueueMulticastQueueItem enqueues the given multicast queue-item and
	// increments the frame-counter after enqueueing.
	EnqueueMulticastQueueItem(ctx context.Context, in *EnqueueMulticastQueueItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// FlushMulticastQueueForMulticastGroup flushes the multicast device-queue given a multicast-group id.
	FlushMulticastQueueForMulticastGroup(ctx context.Context, in *FlushMulticastQueueForMulticastGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// GetMulticastQueueItemsForMulticastGroup returns the queue-items given a multicast-group id.
	GetMulticastQueueItemsForMulticastGroup(ctx context.Context, in *GetMulticastQueueItemsForMulticastGroupRequest, opts ...grpc.CallOption) (*GetMulticastQueueItemsForMulticastGroupResponse, error)
	// GetVersion returns the ChirpStack Network Server version.
	GetVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetVersionResponse, error)
	// GetADRAlgorithms returns the available ADR algorithms.
	GetADRAlgorithms(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetADRAlgorithmsResponse, error)
	// GetDeviceForExport gets device for export purps
	GetDeviceForExport(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*GetDeviceForExportResponse, error)
	// ClearDeviceNonces deletes the device older activation records for the given DevEUI.
	//   - These are clear older DevNonce records from device activation records
	//   - These clears all DevNonce records but keeps latest 20 records for maintain device activation status
	ClearDeviceNonces(ctx context.Context, in *ClearDeviceNoncesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// CountGateways returns gw counts by gateway_profile use
	CountGateways(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CountGatewaysResponse, error)
}

type networkServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNetworkServerServiceClient(cc grpc.ClientConnInterface) NetworkServerServiceClient {
	return &networkServerServiceClient{cc}
}

func (c *networkServerServiceClient) CreateServiceProfile(ctx context.Context, in *CreateServiceProfileRequest, opts ...grpc.CallOption) (*CreateServiceProfileResponse, error) {
	out := new(CreateServiceProfileResponse)
	err := c.cc.Invoke(ctx, NetworkServerService_CreateServiceProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) GetServiceProfile(ctx context.Context, in *GetServiceProfileRequest, opts ...grpc.CallOption) (*GetServiceProfileResponse, error) {
	out := new(GetServiceProfileResponse)
	err := c.cc.Invoke(ctx, NetworkServerService_GetServiceProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) UpdateServiceProfile(ctx context.Context, in *UpdateServiceProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NetworkServerService_UpdateServiceProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) DeleteServiceProfile(ctx context.Context, in *DeleteServiceProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NetworkServerService_DeleteServiceProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) CreateRoutingProfile(ctx context.Context, in *CreateRoutingProfileRequest, opts ...grpc.CallOption) (*CreateRoutingProfileResponse, error) {
	out := new(CreateRoutingProfileResponse)
	err := c.cc.Invoke(ctx, NetworkServerService_CreateRoutingProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) GetRoutingProfile(ctx context.Context, in *GetRoutingProfileRequest, opts ...grpc.CallOption) (*GetRoutingProfileResponse, error) {
	out := new(GetRoutingProfileResponse)
	err := c.cc.Invoke(ctx, NetworkServerService_GetRoutingProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) UpdateRoutingProfile(ctx context.Context, in *UpdateRoutingProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NetworkServerService_UpdateRoutingProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) DeleteRoutingProfile(ctx context.Context, in *DeleteRoutingProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NetworkServerService_DeleteRoutingProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) CreateDeviceProfile(ctx context.Context, in *CreateDeviceProfileRequest, opts ...grpc.CallOption) (*CreateDeviceProfileResponse, error) {
	out := new(CreateDeviceProfileResponse)
	err := c.cc.Invoke(ctx, NetworkServerService_CreateDeviceProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) GetDeviceProfile(ctx context.Context, in *GetDeviceProfileRequest, opts ...grpc.CallOption) (*GetDeviceProfileResponse, error) {
	out := new(GetDeviceProfileResponse)
	err := c.cc.Invoke(ctx, NetworkServerService_GetDeviceProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) UpdateDeviceProfile(ctx context.Context, in *UpdateDeviceProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NetworkServerService_UpdateDeviceProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) DeleteDeviceProfile(ctx context.Context, in *DeleteDeviceProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NetworkServerService_DeleteDeviceProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) CreateDevice(ctx context.Context, in *CreateDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NetworkServerService_CreateDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error) {
	out := new(GetDeviceResponse)
	err := c.cc.Invoke(ctx, NetworkServerService_GetDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) UpdateDevice(ctx context.Context, in *UpdateDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NetworkServerService_UpdateDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) DeleteDevice(ctx context.Context, in *DeleteDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NetworkServerService_DeleteDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) ActivateDevice(ctx context.Context, in *ActivateDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NetworkServerService_ActivateDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) DeactivateDevice(ctx context.Context, in *DeactivateDeviceRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NetworkServerService_DeactivateDevice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) GetDeviceActivation(ctx context.Context, in *GetDeviceActivationRequest, opts ...grpc.CallOption) (*GetDeviceActivationResponse, error) {
	out := new(GetDeviceActivationResponse)
	err := c.cc.Invoke(ctx, NetworkServerService_GetDeviceActivation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) CreateDeviceQueueItem(ctx context.Context, in *CreateDeviceQueueItemRequest, opts ...grpc.CallOption) (*FCntInResponse, error) {
	out := new(FCntInResponse)
	err := c.cc.Invoke(ctx, NetworkServerService_CreateDeviceQueueItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) FlushDeviceQueueForDevEUI(ctx context.Context, in *FlushDeviceQueueForDevEUIRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NetworkServerService_FlushDeviceQueueForDevEUI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) GetDeviceQueueItemsForDevEUI(ctx context.Context, in *GetDeviceQueueItemsForDevEUIRequest, opts ...grpc.CallOption) (*GetDeviceQueueItemsForDevEUIResponse, error) {
	out := new(GetDeviceQueueItemsForDevEUIResponse)
	err := c.cc.Invoke(ctx, NetworkServerService_GetDeviceQueueItemsForDevEUI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) GetNextDownlinkFCntForDevEUI(ctx context.Context, in *GetNextDownlinkFCntForDevEUIRequest, opts ...grpc.CallOption) (*GetNextDownlinkFCntForDevEUIResponse, error) {
	out := new(GetNextDownlinkFCntForDevEUIResponse)
	err := c.cc.Invoke(ctx, NetworkServerService_GetNextDownlinkFCntForDevEUI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) GetRandomDevAddr(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRandomDevAddrResponse, error) {
	out := new(GetRandomDevAddrResponse)
	err := c.cc.Invoke(ctx, NetworkServerService_GetRandomDevAddr_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) CreateMACCommandQueueItem(ctx context.Context, in *CreateMACCommandQueueItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NetworkServerService_CreateMACCommandQueueItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) SendProprietaryPayload(ctx context.Context, in *SendProprietaryPayloadRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NetworkServerService_SendProprietaryPayload_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) CreateGateway(ctx context.Context, in *CreateGatewayRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NetworkServerService_CreateGateway_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) GetGateway(ctx context.Context, in *GetGatewayRequest, opts ...grpc.CallOption) (*GetGatewayResponse, error) {
	out := new(GetGatewayResponse)
	err := c.cc.Invoke(ctx, NetworkServerService_GetGateway_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) UpdateGateway(ctx context.Context, in *UpdateGatewayRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NetworkServerService_UpdateGateway_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) DeleteGateway(ctx context.Context, in *DeleteGatewayRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NetworkServerService_DeleteGateway_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) GenerateGatewayClientCertificate(ctx context.Context, in *GenerateGatewayClientCertificateRequest, opts ...grpc.CallOption) (*GenerateGatewayClientCertificateResponse, error) {
	out := new(GenerateGatewayClientCertificateResponse)
	err := c.cc.Invoke(ctx, NetworkServerService_GenerateGatewayClientCertificate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) CreateGatewayProfile(ctx context.Context, in *CreateGatewayProfileRequest, opts ...grpc.CallOption) (*CreateGatewayProfileResponse, error) {
	out := new(CreateGatewayProfileResponse)
	err := c.cc.Invoke(ctx, NetworkServerService_CreateGatewayProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) GetGatewayProfile(ctx context.Context, in *GetGatewayProfileRequest, opts ...grpc.CallOption) (*GetGatewayProfileResponse, error) {
	out := new(GetGatewayProfileResponse)
	err := c.cc.Invoke(ctx, NetworkServerService_GetGatewayProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) UpdateGatewayProfile(ctx context.Context, in *UpdateGatewayProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NetworkServerService_UpdateGatewayProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) DeleteGatewayProfile(ctx context.Context, in *DeleteGatewayProfileRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NetworkServerService_DeleteGatewayProfile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) GetGatewayStats(ctx context.Context, in *GetGatewayStatsRequest, opts ...grpc.CallOption) (*GetGatewayStatsResponse, error) {
	out := new(GetGatewayStatsResponse)
	err := c.cc.Invoke(ctx, NetworkServerService_GetGatewayStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) StreamFrameLogsForGateway(ctx context.Context, in *StreamFrameLogsForGatewayRequest, opts ...grpc.CallOption) (NetworkServerService_StreamFrameLogsForGatewayClient, error) {
	stream, err := c.cc.NewStream(ctx, &NetworkServerService_ServiceDesc.Streams[0], NetworkServerService_StreamFrameLogsForGateway_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &networkServerServiceStreamFrameLogsForGatewayClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkServerService_StreamFrameLogsForGatewayClient interface {
	Recv() (*StreamFrameLogsForGatewayResponse, error)
	grpc.ClientStream
}

type networkServerServiceStreamFrameLogsForGatewayClient struct {
	grpc.ClientStream
}

func (x *networkServerServiceStreamFrameLogsForGatewayClient) Recv() (*StreamFrameLogsForGatewayResponse, error) {
	m := new(StreamFrameLogsForGatewayResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkServerServiceClient) StreamFrameLogsForDevice(ctx context.Context, in *StreamFrameLogsForDeviceRequest, opts ...grpc.CallOption) (NetworkServerService_StreamFrameLogsForDeviceClient, error) {
	stream, err := c.cc.NewStream(ctx, &NetworkServerService_ServiceDesc.Streams[1], NetworkServerService_StreamFrameLogsForDevice_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &networkServerServiceStreamFrameLogsForDeviceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type NetworkServerService_StreamFrameLogsForDeviceClient interface {
	Recv() (*StreamFrameLogsForDeviceResponse, error)
	grpc.ClientStream
}

type networkServerServiceStreamFrameLogsForDeviceClient struct {
	grpc.ClientStream
}

func (x *networkServerServiceStreamFrameLogsForDeviceClient) Recv() (*StreamFrameLogsForDeviceResponse, error) {
	m := new(StreamFrameLogsForDeviceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *networkServerServiceClient) CreateMulticastGroup(ctx context.Context, in *CreateMulticastGroupRequest, opts ...grpc.CallOption) (*CreateMulticastGroupResponse, error) {
	out := new(CreateMulticastGroupResponse)
	err := c.cc.Invoke(ctx, NetworkServerService_CreateMulticastGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) GetMulticastGroup(ctx context.Context, in *GetMulticastGroupRequest, opts ...grpc.CallOption) (*GetMulticastGroupResponse, error) {
	out := new(GetMulticastGroupResponse)
	err := c.cc.Invoke(ctx, NetworkServerService_GetMulticastGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) UpdateMulticastGroup(ctx context.Context, in *UpdateMulticastGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NetworkServerService_UpdateMulticastGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) DeleteMulticastGroup(ctx context.Context, in *DeleteMulticastGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NetworkServerService_DeleteMulticastGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) AddDeviceToMulticastGroup(ctx context.Context, in *AddDeviceToMulticastGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NetworkServerService_AddDeviceToMulticastGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) RemoveDeviceFromMulticastGroup(ctx context.Context, in *RemoveDeviceFromMulticastGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NetworkServerService_RemoveDeviceFromMulticastGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) EnqueueMulticastQueueItem(ctx context.Context, in *EnqueueMulticastQueueItemRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NetworkServerService_EnqueueMulticastQueueItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) FlushMulticastQueueForMulticastGroup(ctx context.Context, in *FlushMulticastQueueForMulticastGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NetworkServerService_FlushMulticastQueueForMulticastGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) GetMulticastQueueItemsForMulticastGroup(ctx context.Context, in *GetMulticastQueueItemsForMulticastGroupRequest, opts ...grpc.CallOption) (*GetMulticastQueueItemsForMulticastGroupResponse, error) {
	out := new(GetMulticastQueueItemsForMulticastGroupResponse)
	err := c.cc.Invoke(ctx, NetworkServerService_GetMulticastQueueItemsForMulticastGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) GetVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, NetworkServerService_GetVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) GetADRAlgorithms(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetADRAlgorithmsResponse, error) {
	out := new(GetADRAlgorithmsResponse)
	err := c.cc.Invoke(ctx, NetworkServerService_GetADRAlgorithms_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) GetDeviceForExport(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*GetDeviceForExportResponse, error) {
	out := new(GetDeviceForExportResponse)
	err := c.cc.Invoke(ctx, NetworkServerService_GetDeviceForExport_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) ClearDeviceNonces(ctx context.Context, in *ClearDeviceNoncesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NetworkServerService_ClearDeviceNonces_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *networkServerServiceClient) CountGateways(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CountGatewaysResponse, error) {
	out := new(CountGatewaysResponse)
	err := c.cc.Invoke(ctx, NetworkServerService_CountGateways_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServerServiceServer is the server API for NetworkServerService service.
// All implementations must embed UnimplementedNetworkServerServiceServer
// for forward compatibility
type NetworkServerServiceServer interface {
	// CreateServiceProfile creates the given service-profile.
	CreateServiceProfile(context.Context, *CreateServiceProfileRequest) (*CreateServiceProfileResponse, error)
	// GetServiceProfile returns the service-profile matching the given id.
	GetServiceProfile(context.Context, *GetServiceProfileRequest) (*GetServiceProfileResponse, error)
	// UpdateServiceProfile updates the given service-profile.
	UpdateServiceProfile(context.Context, *UpdateServiceProfileRequest) (*emptypb.Empty, error)
	// DeleteServiceProfile deletes the service-profile matching the given id.
	DeleteServiceProfile(context.Context, *DeleteServiceProfileRequest) (*emptypb.Empty, error)
	// CreateRoutingProfile creates the given routing-profile.
	CreateRoutingProfile(context.Context, *CreateRoutingProfileRequest) (*CreateRoutingProfileResponse, error)
	// GetRoutingProfile returns the routing-profile matching the given id.
	GetRoutingProfile(context.Context, *GetRoutingProfileRequest) (*GetRoutingProfileResponse, error)
	// UpdateRoutingProfile updates the given routing-profile.
	UpdateRoutingProfile(context.Context, *UpdateRoutingProfileRequest) (*emptypb.Empty, error)
	// DeleteRoutingProfile deletes the routing-profile matching the given id.
	DeleteRoutingProfile(context.Context, *DeleteRoutingProfileRequest) (*emptypb.Empty, error)
	// CreateDeviceProfile creates the given device-profile.
	CreateDeviceProfile(context.Context, *CreateDeviceProfileRequest) (*CreateDeviceProfileResponse, error)
	// GetDeviceProfile returns the device-profile matching the given id.
	GetDeviceProfile(context.Context, *GetDeviceProfileRequest) (*GetDeviceProfileResponse, error)
	// UpdateDeviceProfile updates the given device-profile.
	UpdateDeviceProfile(context.Context, *UpdateDeviceProfileRequest) (*emptypb.Empty, error)
	// DeleteDeviceProfile deletes the device-profile matching the given id.
	DeleteDeviceProfile(context.Context, *DeleteDeviceProfileRequest) (*emptypb.Empty, error)
	// CreateDevice creates the given device.
	CreateDevice(context.Context, *CreateDeviceRequest) (*emptypb.Empty, error)
	// GetDevice returns the device matching the given DevEUI.
	GetDevice(context.Context, *GetDeviceRequest) (*GetDeviceResponse, error)
	// UpdateDevice updates the given device.
	UpdateDevice(context.Context, *UpdateDeviceRequest) (*emptypb.Empty, error)
	// DeleteDevice deletes the device matching the given DevEUI.
	DeleteDevice(context.Context, *DeleteDeviceRequest) (*emptypb.Empty, error)
	// ActivateDevice activates a device (ABP).
	ActivateDevice(context.Context, *ActivateDeviceRequest) (*emptypb.Empty, error)
	// DeactivateDevice de-activates a device.
	DeactivateDevice(context.Context, *DeactivateDeviceRequest) (*emptypb.Empty, error)
	// GetDeviceActivation returns the device activation details.
	GetDeviceActivation(context.Context, *GetDeviceActivationRequest) (*GetDeviceActivationResponse, error)
	// CreateDeviceQueueItem creates the given device-queue item.
	CreateDeviceQueueItem(context.Context, *CreateDeviceQueueItemRequest) (*FCntInResponse, error)
	// FlushDeviceQueueForDevEUI flushes the device-queue for the given DevEUI.
	FlushDeviceQueueForDevEUI(context.Context, *FlushDeviceQueueForDevEUIRequest) (*emptypb.Empty, error)
	// GetDeviceQueueItemsForDevEUI returns all device-queue items for the given DevEUI.
	GetDeviceQueueItemsForDevEUI(context.Context, *GetDeviceQueueItemsForDevEUIRequest) (*GetDeviceQueueItemsForDevEUIResponse, error)
	// GetNextDownlinkFCntForDevEUI returns the next FCnt that must be used.
	// This also takes device-queue items for the given DevEUI into consideration.
	// deprecated. As encryption had been moved to NS
	GetNextDownlinkFCntForDevEUI(context.Context, *GetNextDownlinkFCntForDevEUIRequest) (*GetNextDownlinkFCntForDevEUIResponse, error)
	// GetRandomDevAddr returns a random DevAddr taking the NwkID prefix into account.
	GetRandomDevAddr(context.Context, *emptypb.Empty) (*GetRandomDevAddrResponse, error)
	// CreateMACCommandQueueItem adds the downlink mac-command to the queue.
	CreateMACCommandQueueItem(context.Context, *CreateMACCommandQueueItemRequest) (*emptypb.Empty, error)
	// SendProprietaryPayload send a payload using the 'Proprietary' LoRaWAN message-type.
	SendProprietaryPayload(context.Context, *SendProprietaryPayloadRequest) (*emptypb.Empty, error)
	// CreateGateway creates the given gateway.
	CreateGateway(context.Context, *CreateGatewayRequest) (*emptypb.Empty, error)
	// GetGateway returns data for a particular gateway.
	GetGateway(context.Context, *GetGatewayRequest) (*GetGatewayResponse, error)
	// UpdateGateway updates an existing gateway.
	UpdateGateway(context.Context, *UpdateGatewayRequest) (*emptypb.Empty, error)
	// DeleteGateway deletes a gateway.
	DeleteGateway(context.Context, *DeleteGatewayRequest) (*emptypb.Empty, error)
	// GenerateGatewayClientCertificate returns TLS certificate gateway authentication / authorization.
	// This endpoint can ony be used when ChirpStack Network Server is configured with a gateway
	// CA certificate and key, which is used for signing the TLS certificate. The returned TLS
	// certificate will have the Gateway ID as Common Name.
	GenerateGatewayClientCertificate(context.Context, *GenerateGatewayClientCertificateRequest) (*GenerateGatewayClientCertificateResponse, error)
	// CreateGatewayProfile creates the given gateway-profile.
	CreateGatewayProfile(context.Context, *CreateGatewayProfileRequest) (*CreateGatewayProfileResponse, error)
	// GetGatewayProfile returns the gateway-profile given an id.
	GetGatewayProfile(context.Context, *GetGatewayProfileRequest) (*GetGatewayProfileResponse, error)
	// UpdateGatewayProfile updates the given gateway-profile.
	UpdateGatewayProfile(context.Context, *UpdateGatewayProfileRequest) (*emptypb.Empty, error)
	// DeleteGatewayProfile deletes the gateway-profile matching a given id.
	DeleteGatewayProfile(context.Context, *DeleteGatewayProfileRequest) (*emptypb.Empty, error)
	// GetGatewayStats returns stats of an existing gateway.
	// Deprecated (stats are forwarded to Application Server API).
	GetGatewayStats(context.Context, *GetGatewayStatsRequest) (*GetGatewayStatsResponse, error)
	// StreamFrameLogsForGateway returns a stream of frames seen by the given gateway.
	StreamFrameLogsForGateway(*StreamFrameLogsForGatewayRequest, NetworkServerService_StreamFrameLogsForGatewayServer) error
	// StreamFrameLogsForDevice returns a stream of frames seen by the given device.
	StreamFrameLogsForDevice(*StreamFrameLogsForDeviceRequest, NetworkServerService_StreamFrameLogsForDeviceServer) error
	// CreateMulticastGroup creates the given multicast-group.
	CreateMulticastGroup(context.Context, *CreateMulticastGroupRequest) (*CreateMulticastGroupResponse, error)
	// GetMulticastGroup returns the multicast-group given an id.
	GetMulticastGroup(context.Context, *GetMulticastGroupRequest) (*GetMulticastGroupResponse, error)
	// UpdateMulticastGroup updates the given multicast-group.
	UpdateMulticastGroup(context.Context, *UpdateMulticastGroupRequest) (*emptypb.Empty, error)
	// DeleteMulticastGroup deletes a multicast-group given an id.
	DeleteMulticastGroup(context.Context, *DeleteMulticastGroupRequest) (*emptypb.Empty, error)
	// AddDeviceToMulticastGroup adds the given device to the given multicast-group.
	AddDeviceToMulticastGroup(context.Context, *AddDeviceToMulticastGroupRequest) (*emptypb.Empty, error)
	// RemoveDeviceFromMulticastGroup removes the given device from the given multicast-group.
	RemoveDeviceFromMulticastGroup(context.Context, *RemoveDeviceFromMulticastGroupRequest) (*emptypb.Empty, error)
	// EnqueueMulticastQueueItem enqueues the given multicast queue-item and
	// increments the frame-counter after enqueueing.
	EnqueueMulticastQueueItem(context.Context, *EnqueueMulticastQueueItemRequest) (*emptypb.Empty, error)
	// FlushMulticastQueueForMulticastGroup flushes the multicast device-queue given a multicast-group id.
	FlushMulticastQueueForMulticastGroup(context.Context, *FlushMulticastQueueForMulticastGroupRequest) (*emptypb.Empty, error)
	// GetMulticastQueueItemsForMulticastGroup returns the queue-items given a multicast-group id.
	GetMulticastQueueItemsForMulticastGroup(context.Context, *GetMulticastQueueItemsForMulticastGroupRequest) (*GetMulticastQueueItemsForMulticastGroupResponse, error)
	// GetVersion returns the ChirpStack Network Server version.
	GetVersion(context.Context, *emptypb.Empty) (*GetVersionResponse, error)
	// GetADRAlgorithms returns the available ADR algorithms.
	GetADRAlgorithms(context.Context, *emptypb.Empty) (*GetADRAlgorithmsResponse, error)
	// GetDeviceForExport gets device for export purps
	GetDeviceForExport(context.Context, *GetDeviceRequest) (*GetDeviceForExportResponse, error)
	// ClearDeviceNonces deletes the device older activation records for the given DevEUI.
	//   - These are clear older DevNonce records from device activation records
	//   - These clears all DevNonce records but keeps latest 20 records for maintain device activation status
	ClearDeviceNonces(context.Context, *ClearDeviceNoncesRequest) (*emptypb.Empty, error)
	// CountGateways returns gw counts by gateway_profile use
	CountGateways(context.Context, *emptypb.Empty) (*CountGatewaysResponse, error)
	mustEmbedUnimplementedNetworkServerServiceServer()
}

// UnimplementedNetworkServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNetworkServerServiceServer struct {
}

func (UnimplementedNetworkServerServiceServer) CreateServiceProfile(context.Context, *CreateServiceProfileRequest) (*CreateServiceProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceProfile not implemented")
}
func (UnimplementedNetworkServerServiceServer) GetServiceProfile(context.Context, *GetServiceProfileRequest) (*GetServiceProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceProfile not implemented")
}
func (UnimplementedNetworkServerServiceServer) UpdateServiceProfile(context.Context, *UpdateServiceProfileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateServiceProfile not implemented")
}
func (UnimplementedNetworkServerServiceServer) DeleteServiceProfile(context.Context, *DeleteServiceProfileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteServiceProfile not implemented")
}
func (UnimplementedNetworkServerServiceServer) CreateRoutingProfile(context.Context, *CreateRoutingProfileRequest) (*CreateRoutingProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoutingProfile not implemented")
}
func (UnimplementedNetworkServerServiceServer) GetRoutingProfile(context.Context, *GetRoutingProfileRequest) (*GetRoutingProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoutingProfile not implemented")
}
func (UnimplementedNetworkServerServiceServer) UpdateRoutingProfile(context.Context, *UpdateRoutingProfileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoutingProfile not implemented")
}
func (UnimplementedNetworkServerServiceServer) DeleteRoutingProfile(context.Context, *DeleteRoutingProfileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoutingProfile not implemented")
}
func (UnimplementedNetworkServerServiceServer) CreateDeviceProfile(context.Context, *CreateDeviceProfileRequest) (*CreateDeviceProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeviceProfile not implemented")
}
func (UnimplementedNetworkServerServiceServer) GetDeviceProfile(context.Context, *GetDeviceProfileRequest) (*GetDeviceProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceProfile not implemented")
}
func (UnimplementedNetworkServerServiceServer) UpdateDeviceProfile(context.Context, *UpdateDeviceProfileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeviceProfile not implemented")
}
func (UnimplementedNetworkServerServiceServer) DeleteDeviceProfile(context.Context, *DeleteDeviceProfileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeviceProfile not implemented")
}
func (UnimplementedNetworkServerServiceServer) CreateDevice(context.Context, *CreateDeviceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDevice not implemented")
}
func (UnimplementedNetworkServerServiceServer) GetDevice(context.Context, *GetDeviceRequest) (*GetDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (UnimplementedNetworkServerServiceServer) UpdateDevice(context.Context, *UpdateDeviceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}
func (UnimplementedNetworkServerServiceServer) DeleteDevice(context.Context, *DeleteDeviceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDevice not implemented")
}
func (UnimplementedNetworkServerServiceServer) ActivateDevice(context.Context, *ActivateDeviceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateDevice not implemented")
}
func (UnimplementedNetworkServerServiceServer) DeactivateDevice(context.Context, *DeactivateDeviceRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateDevice not implemented")
}
func (UnimplementedNetworkServerServiceServer) GetDeviceActivation(context.Context, *GetDeviceActivationRequest) (*GetDeviceActivationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceActivation not implemented")
}
func (UnimplementedNetworkServerServiceServer) CreateDeviceQueueItem(context.Context, *CreateDeviceQueueItemRequest) (*FCntInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDeviceQueueItem not implemented")
}
func (UnimplementedNetworkServerServiceServer) FlushDeviceQueueForDevEUI(context.Context, *FlushDeviceQueueForDevEUIRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlushDeviceQueueForDevEUI not implemented")
}
func (UnimplementedNetworkServerServiceServer) GetDeviceQueueItemsForDevEUI(context.Context, *GetDeviceQueueItemsForDevEUIRequest) (*GetDeviceQueueItemsForDevEUIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceQueueItemsForDevEUI not implemented")
}
func (UnimplementedNetworkServerServiceServer) GetNextDownlinkFCntForDevEUI(context.Context, *GetNextDownlinkFCntForDevEUIRequest) (*GetNextDownlinkFCntForDevEUIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextDownlinkFCntForDevEUI not implemented")
}
func (UnimplementedNetworkServerServiceServer) GetRandomDevAddr(context.Context, *emptypb.Empty) (*GetRandomDevAddrResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRandomDevAddr not implemented")
}
func (UnimplementedNetworkServerServiceServer) CreateMACCommandQueueItem(context.Context, *CreateMACCommandQueueItemRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMACCommandQueueItem not implemented")
}
func (UnimplementedNetworkServerServiceServer) SendProprietaryPayload(context.Context, *SendProprietaryPayloadRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendProprietaryPayload not implemented")
}
func (UnimplementedNetworkServerServiceServer) CreateGateway(context.Context, *CreateGatewayRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGateway not implemented")
}
func (UnimplementedNetworkServerServiceServer) GetGateway(context.Context, *GetGatewayRequest) (*GetGatewayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGateway not implemented")
}
func (UnimplementedNetworkServerServiceServer) UpdateGateway(context.Context, *UpdateGatewayRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGateway not implemented")
}
func (UnimplementedNetworkServerServiceServer) DeleteGateway(context.Context, *DeleteGatewayRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGateway not implemented")
}
func (UnimplementedNetworkServerServiceServer) GenerateGatewayClientCertificate(context.Context, *GenerateGatewayClientCertificateRequest) (*GenerateGatewayClientCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateGatewayClientCertificate not implemented")
}
func (UnimplementedNetworkServerServiceServer) CreateGatewayProfile(context.Context, *CreateGatewayProfileRequest) (*CreateGatewayProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGatewayProfile not implemented")
}
func (UnimplementedNetworkServerServiceServer) GetGatewayProfile(context.Context, *GetGatewayProfileRequest) (*GetGatewayProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGatewayProfile not implemented")
}
func (UnimplementedNetworkServerServiceServer) UpdateGatewayProfile(context.Context, *UpdateGatewayProfileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGatewayProfile not implemented")
}
func (UnimplementedNetworkServerServiceServer) DeleteGatewayProfile(context.Context, *DeleteGatewayProfileRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGatewayProfile not implemented")
}
func (UnimplementedNetworkServerServiceServer) GetGatewayStats(context.Context, *GetGatewayStatsRequest) (*GetGatewayStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGatewayStats not implemented")
}
func (UnimplementedNetworkServerServiceServer) StreamFrameLogsForGateway(*StreamFrameLogsForGatewayRequest, NetworkServerService_StreamFrameLogsForGatewayServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamFrameLogsForGateway not implemented")
}
func (UnimplementedNetworkServerServiceServer) StreamFrameLogsForDevice(*StreamFrameLogsForDeviceRequest, NetworkServerService_StreamFrameLogsForDeviceServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamFrameLogsForDevice not implemented")
}
func (UnimplementedNetworkServerServiceServer) CreateMulticastGroup(context.Context, *CreateMulticastGroupRequest) (*CreateMulticastGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMulticastGroup not implemented")
}
func (UnimplementedNetworkServerServiceServer) GetMulticastGroup(context.Context, *GetMulticastGroupRequest) (*GetMulticastGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMulticastGroup not implemented")
}
func (UnimplementedNetworkServerServiceServer) UpdateMulticastGroup(context.Context, *UpdateMulticastGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMulticastGroup not implemented")
}
func (UnimplementedNetworkServerServiceServer) DeleteMulticastGroup(context.Context, *DeleteMulticastGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMulticastGroup not implemented")
}
func (UnimplementedNetworkServerServiceServer) AddDeviceToMulticastGroup(context.Context, *AddDeviceToMulticastGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDeviceToMulticastGroup not implemented")
}
func (UnimplementedNetworkServerServiceServer) RemoveDeviceFromMulticastGroup(context.Context, *RemoveDeviceFromMulticastGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDeviceFromMulticastGroup not implemented")
}
func (UnimplementedNetworkServerServiceServer) EnqueueMulticastQueueItem(context.Context, *EnqueueMulticastQueueItemRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnqueueMulticastQueueItem not implemented")
}
func (UnimplementedNetworkServerServiceServer) FlushMulticastQueueForMulticastGroup(context.Context, *FlushMulticastQueueForMulticastGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlushMulticastQueueForMulticastGroup not implemented")
}
func (UnimplementedNetworkServerServiceServer) GetMulticastQueueItemsForMulticastGroup(context.Context, *GetMulticastQueueItemsForMulticastGroupRequest) (*GetMulticastQueueItemsForMulticastGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMulticastQueueItemsForMulticastGroup not implemented")
}
func (UnimplementedNetworkServerServiceServer) GetVersion(context.Context, *emptypb.Empty) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedNetworkServerServiceServer) GetADRAlgorithms(context.Context, *emptypb.Empty) (*GetADRAlgorithmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetADRAlgorithms not implemented")
}
func (UnimplementedNetworkServerServiceServer) GetDeviceForExport(context.Context, *GetDeviceRequest) (*GetDeviceForExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceForExport not implemented")
}
func (UnimplementedNetworkServerServiceServer) ClearDeviceNonces(context.Context, *ClearDeviceNoncesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearDeviceNonces not implemented")
}
func (UnimplementedNetworkServerServiceServer) CountGateways(context.Context, *emptypb.Empty) (*CountGatewaysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountGateways not implemented")
}
func (UnimplementedNetworkServerServiceServer) mustEmbedUnimplementedNetworkServerServiceServer() {}

// UnsafeNetworkServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetworkServerServiceServer will
// result in compilation errors.
type UnsafeNetworkServerServiceServer interface {
	mustEmbedUnimplementedNetworkServerServiceServer()
}

func RegisterNetworkServerServiceServer(s grpc.ServiceRegistrar, srv NetworkServerServiceServer) {
	s.RegisterService(&NetworkServerService_ServiceDesc, srv)
}

func _NetworkServerService_CreateServiceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).CreateServiceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_CreateServiceProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).CreateServiceProfile(ctx, req.(*CreateServiceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_GetServiceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).GetServiceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_GetServiceProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).GetServiceProfile(ctx, req.(*GetServiceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_UpdateServiceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateServiceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).UpdateServiceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_UpdateServiceProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).UpdateServiceProfile(ctx, req.(*UpdateServiceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_DeleteServiceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).DeleteServiceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_DeleteServiceProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).DeleteServiceProfile(ctx, req.(*DeleteServiceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_CreateRoutingProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoutingProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).CreateRoutingProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_CreateRoutingProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).CreateRoutingProfile(ctx, req.(*CreateRoutingProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_GetRoutingProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoutingProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).GetRoutingProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_GetRoutingProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).GetRoutingProfile(ctx, req.(*GetRoutingProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_UpdateRoutingProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoutingProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).UpdateRoutingProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_UpdateRoutingProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).UpdateRoutingProfile(ctx, req.(*UpdateRoutingProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_DeleteRoutingProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoutingProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).DeleteRoutingProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_DeleteRoutingProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).DeleteRoutingProfile(ctx, req.(*DeleteRoutingProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_CreateDeviceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).CreateDeviceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_CreateDeviceProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).CreateDeviceProfile(ctx, req.(*CreateDeviceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_GetDeviceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).GetDeviceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_GetDeviceProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).GetDeviceProfile(ctx, req.(*GetDeviceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_UpdateDeviceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).UpdateDeviceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_UpdateDeviceProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).UpdateDeviceProfile(ctx, req.(*UpdateDeviceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_DeleteDeviceProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).DeleteDeviceProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_DeleteDeviceProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).DeleteDeviceProfile(ctx, req.(*DeleteDeviceProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_CreateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).CreateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_CreateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).CreateDevice(ctx, req.(*CreateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_GetDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).GetDevice(ctx, req.(*GetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_UpdateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).UpdateDevice(ctx, req.(*UpdateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_DeleteDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).DeleteDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_DeleteDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).DeleteDevice(ctx, req.(*DeleteDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_ActivateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).ActivateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_ActivateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).ActivateDevice(ctx, req.(*ActivateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_DeactivateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).DeactivateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_DeactivateDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).DeactivateDevice(ctx, req.(*DeactivateDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_GetDeviceActivation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceActivationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).GetDeviceActivation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_GetDeviceActivation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).GetDeviceActivation(ctx, req.(*GetDeviceActivationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_CreateDeviceQueueItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeviceQueueItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).CreateDeviceQueueItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_CreateDeviceQueueItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).CreateDeviceQueueItem(ctx, req.(*CreateDeviceQueueItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_FlushDeviceQueueForDevEUI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushDeviceQueueForDevEUIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).FlushDeviceQueueForDevEUI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_FlushDeviceQueueForDevEUI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).FlushDeviceQueueForDevEUI(ctx, req.(*FlushDeviceQueueForDevEUIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_GetDeviceQueueItemsForDevEUI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceQueueItemsForDevEUIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).GetDeviceQueueItemsForDevEUI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_GetDeviceQueueItemsForDevEUI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).GetDeviceQueueItemsForDevEUI(ctx, req.(*GetDeviceQueueItemsForDevEUIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_GetNextDownlinkFCntForDevEUI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNextDownlinkFCntForDevEUIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).GetNextDownlinkFCntForDevEUI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_GetNextDownlinkFCntForDevEUI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).GetNextDownlinkFCntForDevEUI(ctx, req.(*GetNextDownlinkFCntForDevEUIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_GetRandomDevAddr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).GetRandomDevAddr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_GetRandomDevAddr_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).GetRandomDevAddr(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_CreateMACCommandQueueItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMACCommandQueueItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).CreateMACCommandQueueItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_CreateMACCommandQueueItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).CreateMACCommandQueueItem(ctx, req.(*CreateMACCommandQueueItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_SendProprietaryPayload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendProprietaryPayloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).SendProprietaryPayload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_SendProprietaryPayload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).SendProprietaryPayload(ctx, req.(*SendProprietaryPayloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_CreateGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).CreateGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_CreateGateway_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).CreateGateway(ctx, req.(*CreateGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_GetGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).GetGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_GetGateway_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).GetGateway(ctx, req.(*GetGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_UpdateGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).UpdateGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_UpdateGateway_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).UpdateGateway(ctx, req.(*UpdateGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_DeleteGateway_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGatewayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).DeleteGateway(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_DeleteGateway_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).DeleteGateway(ctx, req.(*DeleteGatewayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_GenerateGatewayClientCertificate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateGatewayClientCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).GenerateGatewayClientCertificate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_GenerateGatewayClientCertificate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).GenerateGatewayClientCertificate(ctx, req.(*GenerateGatewayClientCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_CreateGatewayProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGatewayProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).CreateGatewayProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_CreateGatewayProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).CreateGatewayProfile(ctx, req.(*CreateGatewayProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_GetGatewayProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).GetGatewayProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_GetGatewayProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).GetGatewayProfile(ctx, req.(*GetGatewayProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_UpdateGatewayProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGatewayProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).UpdateGatewayProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_UpdateGatewayProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).UpdateGatewayProfile(ctx, req.(*UpdateGatewayProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_DeleteGatewayProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGatewayProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).DeleteGatewayProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_DeleteGatewayProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).DeleteGatewayProfile(ctx, req.(*DeleteGatewayProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_GetGatewayStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGatewayStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).GetGatewayStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_GetGatewayStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).GetGatewayStats(ctx, req.(*GetGatewayStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_StreamFrameLogsForGateway_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamFrameLogsForGatewayRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkServerServiceServer).StreamFrameLogsForGateway(m, &networkServerServiceStreamFrameLogsForGatewayServer{stream})
}

type NetworkServerService_StreamFrameLogsForGatewayServer interface {
	Send(*StreamFrameLogsForGatewayResponse) error
	grpc.ServerStream
}

type networkServerServiceStreamFrameLogsForGatewayServer struct {
	grpc.ServerStream
}

func (x *networkServerServiceStreamFrameLogsForGatewayServer) Send(m *StreamFrameLogsForGatewayResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NetworkServerService_StreamFrameLogsForDevice_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamFrameLogsForDeviceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(NetworkServerServiceServer).StreamFrameLogsForDevice(m, &networkServerServiceStreamFrameLogsForDeviceServer{stream})
}

type NetworkServerService_StreamFrameLogsForDeviceServer interface {
	Send(*StreamFrameLogsForDeviceResponse) error
	grpc.ServerStream
}

type networkServerServiceStreamFrameLogsForDeviceServer struct {
	grpc.ServerStream
}

func (x *networkServerServiceStreamFrameLogsForDeviceServer) Send(m *StreamFrameLogsForDeviceResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _NetworkServerService_CreateMulticastGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMulticastGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).CreateMulticastGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_CreateMulticastGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).CreateMulticastGroup(ctx, req.(*CreateMulticastGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_GetMulticastGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMulticastGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).GetMulticastGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_GetMulticastGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).GetMulticastGroup(ctx, req.(*GetMulticastGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_UpdateMulticastGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMulticastGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).UpdateMulticastGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_UpdateMulticastGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).UpdateMulticastGroup(ctx, req.(*UpdateMulticastGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_DeleteMulticastGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMulticastGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).DeleteMulticastGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_DeleteMulticastGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).DeleteMulticastGroup(ctx, req.(*DeleteMulticastGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_AddDeviceToMulticastGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDeviceToMulticastGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).AddDeviceToMulticastGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_AddDeviceToMulticastGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).AddDeviceToMulticastGroup(ctx, req.(*AddDeviceToMulticastGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_RemoveDeviceFromMulticastGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveDeviceFromMulticastGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).RemoveDeviceFromMulticastGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_RemoveDeviceFromMulticastGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).RemoveDeviceFromMulticastGroup(ctx, req.(*RemoveDeviceFromMulticastGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_EnqueueMulticastQueueItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnqueueMulticastQueueItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).EnqueueMulticastQueueItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_EnqueueMulticastQueueItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).EnqueueMulticastQueueItem(ctx, req.(*EnqueueMulticastQueueItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_FlushMulticastQueueForMulticastGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushMulticastQueueForMulticastGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).FlushMulticastQueueForMulticastGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_FlushMulticastQueueForMulticastGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).FlushMulticastQueueForMulticastGroup(ctx, req.(*FlushMulticastQueueForMulticastGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_GetMulticastQueueItemsForMulticastGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMulticastQueueItemsForMulticastGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).GetMulticastQueueItemsForMulticastGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_GetMulticastQueueItemsForMulticastGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).GetMulticastQueueItemsForMulticastGroup(ctx, req.(*GetMulticastQueueItemsForMulticastGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_GetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).GetVersion(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_GetADRAlgorithms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).GetADRAlgorithms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_GetADRAlgorithms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).GetADRAlgorithms(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_GetDeviceForExport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).GetDeviceForExport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_GetDeviceForExport_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).GetDeviceForExport(ctx, req.(*GetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_ClearDeviceNonces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearDeviceNoncesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).ClearDeviceNonces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_ClearDeviceNonces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).ClearDeviceNonces(ctx, req.(*ClearDeviceNoncesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetworkServerService_CountGateways_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServerServiceServer).CountGateways(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetworkServerService_CountGateways_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServerServiceServer).CountGateways(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// NetworkServerService_ServiceDesc is the grpc.ServiceDesc for NetworkServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetworkServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ns.NetworkServerService",
	HandlerType: (*NetworkServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateServiceProfile",
			Handler:    _NetworkServerService_CreateServiceProfile_Handler,
		},
		{
			MethodName: "GetServiceProfile",
			Handler:    _NetworkServerService_GetServiceProfile_Handler,
		},
		{
			MethodName: "UpdateServiceProfile",
			Handler:    _NetworkServerService_UpdateServiceProfile_Handler,
		},
		{
			MethodName: "DeleteServiceProfile",
			Handler:    _NetworkServerService_DeleteServiceProfile_Handler,
		},
		{
			MethodName: "CreateRoutingProfile",
			Handler:    _NetworkServerService_CreateRoutingProfile_Handler,
		},
		{
			MethodName: "GetRoutingProfile",
			Handler:    _NetworkServerService_GetRoutingProfile_Handler,
		},
		{
			MethodName: "UpdateRoutingProfile",
			Handler:    _NetworkServerService_UpdateRoutingProfile_Handler,
		},
		{
			MethodName: "DeleteRoutingProfile",
			Handler:    _NetworkServerService_DeleteRoutingProfile_Handler,
		},
		{
			MethodName: "CreateDeviceProfile",
			Handler:    _NetworkServerService_CreateDeviceProfile_Handler,
		},
		{
			MethodName: "GetDeviceProfile",
			Handler:    _NetworkServerService_GetDeviceProfile_Handler,
		},
		{
			MethodName: "UpdateDeviceProfile",
			Handler:    _NetworkServerService_UpdateDeviceProfile_Handler,
		},
		{
			MethodName: "DeleteDeviceProfile",
			Handler:    _NetworkServerService_DeleteDeviceProfile_Handler,
		},
		{
			MethodName: "CreateDevice",
			Handler:    _NetworkServerService_CreateDevice_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _NetworkServerService_GetDevice_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _NetworkServerService_UpdateDevice_Handler,
		},
		{
			MethodName: "DeleteDevice",
			Handler:    _NetworkServerService_DeleteDevice_Handler,
		},
		{
			MethodName: "ActivateDevice",
			Handler:    _NetworkServerService_ActivateDevice_Handler,
		},
		{
			MethodName: "DeactivateDevice",
			Handler:    _NetworkServerService_DeactivateDevice_Handler,
		},
		{
			MethodName: "GetDeviceActivation",
			Handler:    _NetworkServerService_GetDeviceActivation_Handler,
		},
		{
			MethodName: "CreateDeviceQueueItem",
			Handler:    _NetworkServerService_CreateDeviceQueueItem_Handler,
		},
		{
			MethodName: "FlushDeviceQueueForDevEUI",
			Handler:    _NetworkServerService_FlushDeviceQueueForDevEUI_Handler,
		},
		{
			MethodName: "GetDeviceQueueItemsForDevEUI",
			Handler:    _NetworkServerService_GetDeviceQueueItemsForDevEUI_Handler,
		},
		{
			MethodName: "GetNextDownlinkFCntForDevEUI",
			Handler:    _NetworkServerService_GetNextDownlinkFCntForDevEUI_Handler,
		},
		{
			MethodName: "GetRandomDevAddr",
			Handler:    _NetworkServerService_GetRandomDevAddr_Handler,
		},
		{
			MethodName: "CreateMACCommandQueueItem",
			Handler:    _NetworkServerService_CreateMACCommandQueueItem_Handler,
		},
		{
			MethodName: "SendProprietaryPayload",
			Handler:    _NetworkServerService_SendProprietaryPayload_Handler,
		},
		{
			MethodName: "CreateGateway",
			Handler:    _NetworkServerService_CreateGateway_Handler,
		},
		{
			MethodName: "GetGateway",
			Handler:    _NetworkServerService_GetGateway_Handler,
		},
		{
			MethodName: "UpdateGateway",
			Handler:    _NetworkServerService_UpdateGateway_Handler,
		},
		{
			MethodName: "DeleteGateway",
			Handler:    _NetworkServerService_DeleteGateway_Handler,
		},
		{
			MethodName: "GenerateGatewayClientCertificate",
			Handler:    _NetworkServerService_GenerateGatewayClientCertificate_Handler,
		},
		{
			MethodName: "CreateGatewayProfile",
			Handler:    _NetworkServerService_CreateGatewayProfile_Handler,
		},
		{
			MethodName: "GetGatewayProfile",
			Handler:    _NetworkServerService_GetGatewayProfile_Handler,
		},
		{
			MethodName: "UpdateGatewayProfile",
			Handler:    _NetworkServerService_UpdateGatewayProfile_Handler,
		},
		{
			MethodName: "DeleteGatewayProfile",
			Handler:    _NetworkServerService_DeleteGatewayProfile_Handler,
		},
		{
			MethodName: "GetGatewayStats",
			Handler:    _NetworkServerService_GetGatewayStats_Handler,
		},
		{
			MethodName: "CreateMulticastGroup",
			Handler:    _NetworkServerService_CreateMulticastGroup_Handler,
		},
		{
			MethodName: "GetMulticastGroup",
			Handler:    _NetworkServerService_GetMulticastGroup_Handler,
		},
		{
			MethodName: "UpdateMulticastGroup",
			Handler:    _NetworkServerService_UpdateMulticastGroup_Handler,
		},
		{
			MethodName: "DeleteMulticastGroup",
			Handler:    _NetworkServerService_DeleteMulticastGroup_Handler,
		},
		{
			MethodName: "AddDeviceToMulticastGroup",
			Handler:    _NetworkServerService_AddDeviceToMulticastGroup_Handler,
		},
		{
			MethodName: "RemoveDeviceFromMulticastGroup",
			Handler:    _NetworkServerService_RemoveDeviceFromMulticastGroup_Handler,
		},
		{
			MethodName: "EnqueueMulticastQueueItem",
			Handler:    _NetworkServerService_EnqueueMulticastQueueItem_Handler,
		},
		{
			MethodName: "FlushMulticastQueueForMulticastGroup",
			Handler:    _NetworkServerService_FlushMulticastQueueForMulticastGroup_Handler,
		},
		{
			MethodName: "GetMulticastQueueItemsForMulticastGroup",
			Handler:    _NetworkServerService_GetMulticastQueueItemsForMulticastGroup_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _NetworkServerService_GetVersion_Handler,
		},
		{
			MethodName: "GetADRAlgorithms",
			Handler:    _NetworkServerService_GetADRAlgorithms_Handler,
		},
		{
			MethodName: "GetDeviceForExport",
			Handler:    _NetworkServerService_GetDeviceForExport_Handler,
		},
		{
			MethodName: "ClearDeviceNonces",
			Handler:    _NetworkServerService_ClearDeviceNonces_Handler,
		},
		{
			MethodName: "CountGateways",
			Handler:    _NetworkServerService_CountGateways_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamFrameLogsForGateway",
			Handler:       _NetworkServerService_StreamFrameLogsForGateway_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamFrameLogsForDevice",
			Handler:       _NetworkServerService_StreamFrameLogsForDevice_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ns/ns.proto",
}
