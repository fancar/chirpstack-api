// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: ns/profiles.proto

package ns

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RatePolicy int32

const (
	// Drop
	RatePolicy_Drop RatePolicy = 0
	// Mark
	RatePolicy_Mark RatePolicy = 1
)

// Enum value maps for RatePolicy.
var (
	RatePolicy_name = map[int32]string{
		0: "Drop",
		1: "Mark",
	}
	RatePolicy_value = map[string]int32{
		"Drop": 0,
		"Mark": 1,
	}
)

func (x RatePolicy) Enum() *RatePolicy {
	p := new(RatePolicy)
	*p = x
	return p
}

func (x RatePolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RatePolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_ns_profiles_proto_enumTypes[0].Descriptor()
}

func (RatePolicy) Type() protoreflect.EnumType {
	return &file_ns_profiles_proto_enumTypes[0]
}

func (x RatePolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RatePolicy.Descriptor instead.
func (RatePolicy) EnumDescriptor() ([]byte, []int) {
	return file_ns_profiles_proto_rawDescGZIP(), []int{0}
}

type RateUnit int32

const (
	// Per Hour
	RateUnit_Hour RateUnit = 0
	// Per Day
	RateUnit_Day RateUnit = 1
	// Per Week
	RateUnit_Week RateUnit = 2
	// Per Month
	RateUnit_Month RateUnit = 3
	// Per Year
	RateUnit_Year RateUnit = 4
)

// Enum value maps for RateUnit.
var (
	RateUnit_name = map[int32]string{
		0: "Hour",
		1: "Day",
		2: "Week",
		3: "Month",
		4: "Year",
	}
	RateUnit_value = map[string]int32{
		"Hour":  0,
		"Day":   1,
		"Week":  2,
		"Month": 3,
		"Year":  4,
	}
)

func (x RateUnit) Enum() *RateUnit {
	p := new(RateUnit)
	*p = x
	return p
}

func (x RateUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RateUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_ns_profiles_proto_enumTypes[1].Descriptor()
}

func (RateUnit) Type() protoreflect.EnumType {
	return &file_ns_profiles_proto_enumTypes[1]
}

func (x RateUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RateUnit.Descriptor instead.
func (RateUnit) EnumDescriptor() ([]byte, []int) {
	return file_ns_profiles_proto_rawDescGZIP(), []int{1}
}

type ServiceProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Service-profile ID.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Token bucket filling rate, including ACKs (packet/h).
	UlRate int32 `protobuf:"varint,2,opt,name=ul_rate,json=ulRate,proto3" json:"ul_rate,omitempty"`
	// Token bucket burst size.
	UlBucketSize uint32 `protobuf:"varint,3,opt,name=ul_bucket_size,json=ulBucketSize,proto3" json:"ul_bucket_size,omitempty"`
	// Drop or mark when exceeding ULRate.
	UlRatePolicy RatePolicy `protobuf:"varint,4,opt,name=ul_rate_policy,json=ulRatePolicy,proto3,enum=ns.RatePolicy" json:"ul_rate_policy,omitempty"`
	// Uplink rate unit (per hour, per day, per week, per month, per year)
	UlRateUnit RateUnit `protobuf:"varint,29,opt,name=ul_rate_unit,json=ulRateUnit,proto3,enum=ns.RateUnit" json:"ul_rate_unit,omitempty"`
	// Token bucket filling rate, including ACKs (packet/h).
	DlRate int32 `protobuf:"varint,5,opt,name=dl_rate,json=dlRate,proto3" json:"dl_rate,omitempty"`
	// Token bucket burst size.
	DlBucketSize uint32 `protobuf:"varint,6,opt,name=dl_bucket_size,json=dlBucketSize,proto3" json:"dl_bucket_size,omitempty"`
	// Drop or mark when exceeding DLRate.
	DlRatePolicy RatePolicy `protobuf:"varint,7,opt,name=dl_rate_policy,json=dlRatePolicy,proto3,enum=ns.RatePolicy" json:"dl_rate_policy,omitempty"`
	// Downlink rate unit (per hour, per day, per week, per month, per year)
	DlRateUnit RateUnit `protobuf:"varint,30,opt,name=dl_rate_unit,json=dlRateUnit,proto3,enum=ns.RateUnit" json:"dl_rate_unit,omitempty"`
	// GW metadata (RSSI, SNR, GW geoloc., etc.) are added to the packet sent to AS.
	AddGwMetadata bool `protobuf:"varint,8,opt,name=add_gw_metadata,json=addGwMetadata,proto3" json:"add_gw_metadata,omitempty"`
	// Frequency to initiate an End-Device status request (request/day).
	DevStatusReqFreq uint32 `protobuf:"varint,9,opt,name=dev_status_req_freq,json=devStatusReqFreq,proto3" json:"dev_status_req_freq,omitempty"`
	// Report End-Device battery level to AS.
	ReportDevStatusBattery bool `protobuf:"varint,10,opt,name=report_dev_status_battery,json=reportDevStatusBattery,proto3" json:"report_dev_status_battery,omitempty"`
	// Report End-Device margin to AS.
	ReportDevStatusMargin bool `protobuf:"varint,11,opt,name=report_dev_status_margin,json=reportDevStatusMargin,proto3" json:"report_dev_status_margin,omitempty"`
	// Minimum allowed data rate. Used for ADR.
	DrMin uint32 `protobuf:"varint,12,opt,name=dr_min,json=drMin,proto3" json:"dr_min,omitempty"`
	// Maximum allowed data rate. Used for ADR.
	DrMax uint32 `protobuf:"varint,13,opt,name=dr_max,json=drMax,proto3" json:"dr_max,omitempty"`
	// Channel mask. sNS does not have to obey (i.e., informative).
	ChannelMask []byte `protobuf:"bytes,14,opt,name=channel_mask,json=channelMask,proto3" json:"channel_mask,omitempty"`
	// Passive Roaming allowed.
	PrAllowed bool `protobuf:"varint,15,opt,name=pr_allowed,json=prAllowed,proto3" json:"pr_allowed,omitempty"`
	// Handover Roaming allowed.
	HrAllowed bool `protobuf:"varint,16,opt,name=hr_allowed,json=hrAllowed,proto3" json:"hr_allowed,omitempty"`
	// Roaming Activation allowed.
	RaAllowed bool `protobuf:"varint,17,opt,name=ra_allowed,json=raAllowed,proto3" json:"ra_allowed,omitempty"`
	// Enable network geolocation service.
	NwkGeoLoc bool `protobuf:"varint,18,opt,name=nwk_geo_loc,json=nwkGeoLoc,proto3" json:"nwk_geo_loc,omitempty"`
	// Target Packet Error Rate.
	TargetPer uint32 `protobuf:"varint,19,opt,name=target_per,json=targetPer,proto3" json:"target_per,omitempty"`
	// Minimum number of receiving GWs (informative).
	MinGwDiversity uint32 `protobuf:"varint,20,opt,name=min_gw_diversity,json=minGwDiversity,proto3" json:"min_gw_diversity,omitempty"`
	// Gateways under this service-profile are private.
	// This means that these gateways can only be used by devices under the
	// same service-profile.
	GwsPrivate bool `protobuf:"varint,21,opt,name=gws_private,json=gwsPrivate,proto3" json:"gws_private,omitempty"`
	// Service profile is disabled if true. UL DL packets droped and logged as DROP
	IsDisabled bool `protobuf:"varint,31,opt,name=is_disabled,json=isDisabled,proto3" json:"is_disabled,omitempty"`
	// ADR algorithm ID.
	// In case this is left blank, or is configured to a non-existing ADR
	// algorithm (plugin), then it falls back to 'default'.
	AdrAlgorithmId string `protobuf:"bytes,32,opt,name=adr_algorithm_id,json=adrAlgorithmId,proto3" json:"adr_algorithm_id,omitempty"`
	// Minimum TX power index that can't be overlaped by ADR.
	MinTxPowerIndex int32 `protobuf:"varint,33,opt,name=min_tx_power_index,json=minTxPowerIndex,proto3" json:"min_tx_power_index,omitempty"`
	// Maximum TX power index that can't be overlaped by ADR.
	// if adr=fixed - the value as fixed TxPowerIndex will be in use
	MaxTxPowerIndex int32 `protobuf:"varint,34,opt,name=max_tx_power_index,json=maxTxPowerIndex,proto3" json:"max_tx_power_index,omitempty"`
	// MAX NbTrans
	// the maximum number of transmissions.
	MaxNbTrans int32 `protobuf:"varint,35,opt,name=max_nb_trans,json=maxNbTrans,proto3" json:"max_nb_trans,omitempty"`
	// MIN NbTrans
	// the mininum number of transmissions.
	MinNbTrans int32 `protobuf:"varint,36,opt,name=min_nb_trans,json=minNbTrans,proto3" json:"min_nb_trans,omitempty"`
	// if true - allows processing confirmed uplinks
	AllowRxConfirmed bool `protobuf:"varint,37,opt,name=allow_rx_confirmed,json=allowRxConfirmed,proto3" json:"allow_rx_confirmed,omitempty"`
	// if true - allows processing unconfirmed downlinks
	AllowTxUnconfirmed bool `protobuf:"varint,38,opt,name=allow_tx_unconfirmed,json=allowTxUnconfirmed,proto3" json:"allow_tx_unconfirmed,omitempty"`
	// if true - allows processing confirmed downlinks
	AllowTxConfirmed bool `protobuf:"varint,39,opt,name=allow_tx_confirmed,json=allowTxConfirmed,proto3" json:"allow_tx_confirmed,omitempty"`
	// max size of downlink queue for devices that use the sp
	DlQueueMaxSize uint32 `protobuf:"varint,40,opt,name=dl_queue_max_size,json=dlQueueMaxSize,proto3" json:"dl_queue_max_size,omitempty"`
}

func (x *ServiceProfile) Reset() {
	*x = ServiceProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_profiles_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceProfile) ProtoMessage() {}

func (x *ServiceProfile) ProtoReflect() protoreflect.Message {
	mi := &file_ns_profiles_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceProfile.ProtoReflect.Descriptor instead.
func (*ServiceProfile) Descriptor() ([]byte, []int) {
	return file_ns_profiles_proto_rawDescGZIP(), []int{0}
}

func (x *ServiceProfile) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ServiceProfile) GetUlRate() int32 {
	if x != nil {
		return x.UlRate
	}
	return 0
}

func (x *ServiceProfile) GetUlBucketSize() uint32 {
	if x != nil {
		return x.UlBucketSize
	}
	return 0
}

func (x *ServiceProfile) GetUlRatePolicy() RatePolicy {
	if x != nil {
		return x.UlRatePolicy
	}
	return RatePolicy_Drop
}

func (x *ServiceProfile) GetUlRateUnit() RateUnit {
	if x != nil {
		return x.UlRateUnit
	}
	return RateUnit_Hour
}

func (x *ServiceProfile) GetDlRate() int32 {
	if x != nil {
		return x.DlRate
	}
	return 0
}

func (x *ServiceProfile) GetDlBucketSize() uint32 {
	if x != nil {
		return x.DlBucketSize
	}
	return 0
}

func (x *ServiceProfile) GetDlRatePolicy() RatePolicy {
	if x != nil {
		return x.DlRatePolicy
	}
	return RatePolicy_Drop
}

func (x *ServiceProfile) GetDlRateUnit() RateUnit {
	if x != nil {
		return x.DlRateUnit
	}
	return RateUnit_Hour
}

func (x *ServiceProfile) GetAddGwMetadata() bool {
	if x != nil {
		return x.AddGwMetadata
	}
	return false
}

func (x *ServiceProfile) GetDevStatusReqFreq() uint32 {
	if x != nil {
		return x.DevStatusReqFreq
	}
	return 0
}

func (x *ServiceProfile) GetReportDevStatusBattery() bool {
	if x != nil {
		return x.ReportDevStatusBattery
	}
	return false
}

func (x *ServiceProfile) GetReportDevStatusMargin() bool {
	if x != nil {
		return x.ReportDevStatusMargin
	}
	return false
}

func (x *ServiceProfile) GetDrMin() uint32 {
	if x != nil {
		return x.DrMin
	}
	return 0
}

func (x *ServiceProfile) GetDrMax() uint32 {
	if x != nil {
		return x.DrMax
	}
	return 0
}

func (x *ServiceProfile) GetChannelMask() []byte {
	if x != nil {
		return x.ChannelMask
	}
	return nil
}

func (x *ServiceProfile) GetPrAllowed() bool {
	if x != nil {
		return x.PrAllowed
	}
	return false
}

func (x *ServiceProfile) GetHrAllowed() bool {
	if x != nil {
		return x.HrAllowed
	}
	return false
}

func (x *ServiceProfile) GetRaAllowed() bool {
	if x != nil {
		return x.RaAllowed
	}
	return false
}

func (x *ServiceProfile) GetNwkGeoLoc() bool {
	if x != nil {
		return x.NwkGeoLoc
	}
	return false
}

func (x *ServiceProfile) GetTargetPer() uint32 {
	if x != nil {
		return x.TargetPer
	}
	return 0
}

func (x *ServiceProfile) GetMinGwDiversity() uint32 {
	if x != nil {
		return x.MinGwDiversity
	}
	return 0
}

func (x *ServiceProfile) GetGwsPrivate() bool {
	if x != nil {
		return x.GwsPrivate
	}
	return false
}

func (x *ServiceProfile) GetIsDisabled() bool {
	if x != nil {
		return x.IsDisabled
	}
	return false
}

func (x *ServiceProfile) GetAdrAlgorithmId() string {
	if x != nil {
		return x.AdrAlgorithmId
	}
	return ""
}

func (x *ServiceProfile) GetMinTxPowerIndex() int32 {
	if x != nil {
		return x.MinTxPowerIndex
	}
	return 0
}

func (x *ServiceProfile) GetMaxTxPowerIndex() int32 {
	if x != nil {
		return x.MaxTxPowerIndex
	}
	return 0
}

func (x *ServiceProfile) GetMaxNbTrans() int32 {
	if x != nil {
		return x.MaxNbTrans
	}
	return 0
}

func (x *ServiceProfile) GetMinNbTrans() int32 {
	if x != nil {
		return x.MinNbTrans
	}
	return 0
}

func (x *ServiceProfile) GetAllowRxConfirmed() bool {
	if x != nil {
		return x.AllowRxConfirmed
	}
	return false
}

func (x *ServiceProfile) GetAllowTxUnconfirmed() bool {
	if x != nil {
		return x.AllowTxUnconfirmed
	}
	return false
}

func (x *ServiceProfile) GetAllowTxConfirmed() bool {
	if x != nil {
		return x.AllowTxConfirmed
	}
	return false
}

func (x *ServiceProfile) GetDlQueueMaxSize() uint32 {
	if x != nil {
		return x.DlQueueMaxSize
	}
	return 0
}

type DeviceProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device-profile ID.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// End-Device supports Class B.
	SupportsClassB bool `protobuf:"varint,2,opt,name=supports_class_b,json=supportsClassB,proto3" json:"supports_class_b,omitempty"`
	// Maximum delay for the End-Device to answer a MAC request or a confirmed DL frame (mandatory if class B mode supported).
	ClassBTimeout uint32 `protobuf:"varint,3,opt,name=class_b_timeout,json=classBTimeout,proto3" json:"class_b_timeout,omitempty"`
	// Mandatory if class B mode supported.
	PingSlotPeriod uint32 `protobuf:"varint,4,opt,name=ping_slot_period,json=pingSlotPeriod,proto3" json:"ping_slot_period,omitempty"`
	// Mandatory if class B mode supported.
	PingSlotDr uint32 `protobuf:"varint,5,opt,name=ping_slot_dr,json=pingSlotDr,proto3" json:"ping_slot_dr,omitempty"`
	// Mandatory if class B mode supported.
	PingSlotFreq uint32 `protobuf:"varint,6,opt,name=ping_slot_freq,json=pingSlotFreq,proto3" json:"ping_slot_freq,omitempty"`
	// End-Device supports Class C.
	SupportsClassC bool `protobuf:"varint,7,opt,name=supports_class_c,json=supportsClassC,proto3" json:"supports_class_c,omitempty"`
	// Maximum delay for the End-Device to answer a MAC request or a confirmed DL frame (mandatory if class C mode supported).
	ClassCTimeout uint32 `protobuf:"varint,8,opt,name=class_c_timeout,json=classCTimeout,proto3" json:"class_c_timeout,omitempty"`
	// Version of the LoRaWAN supported by the End-Device.
	MacVersion string `protobuf:"bytes,9,opt,name=mac_version,json=macVersion,proto3" json:"mac_version,omitempty"`
	// Revision of the Regional Parameters document supported by the End-Device.
	RegParamsRevision string `protobuf:"bytes,10,opt,name=reg_params_revision,json=regParamsRevision,proto3" json:"reg_params_revision,omitempty"`
	// Class A RX1 delay (For ABP initialization  only! mandatory for ABP).
	RxDelay_1 uint32 `protobuf:"varint,11,opt,name=rx_delay_1,json=rxDelay1,proto3" json:"rx_delay_1,omitempty"`
	// RX1 data rate offset (For ABP initialization  only! mandatory for ABP).
	RxDrOffset_1 uint32 `protobuf:"varint,12,opt,name=rx_dr_offset_1,json=rxDrOffset1,proto3" json:"rx_dr_offset_1,omitempty"`
	// RX2 data rate (For ABP initialization  only! mandatory for ABP).
	RxDatarate_2 uint32 `protobuf:"varint,13,opt,name=rx_datarate_2,json=rxDatarate2,proto3" json:"rx_datarate_2,omitempty"`
	// RX2 channel frequency (For ABP initialization  only! mandatory for ABP).
	RxFreq_2 uint32 `protobuf:"varint,14,opt,name=rx_freq_2,json=rxFreq2,proto3" json:"rx_freq_2,omitempty"`
	// List of factory-preset frequencies (mandatory for ABP).
	FactoryPresetFreqs []uint32 `protobuf:"varint,15,rep,packed,name=factory_preset_freqs,json=factoryPresetFreqs,proto3" json:"factory_preset_freqs,omitempty"`
	// Deprecated. Moved to SP. Maximum EIRP supported by the End-Device.
	MaxEirp uint32 `protobuf:"varint,16,opt,name=max_eirp,json=maxEirp,proto3" json:"max_eirp,omitempty"`
	// Maximum duty cycle supported by the End-Device.
	MaxDutyCycle uint32 `protobuf:"varint,17,opt,name=max_duty_cycle,json=maxDutyCycle,proto3" json:"max_duty_cycle,omitempty"`
	// End-Device supports Join (OTAA) or not (ABP).
	SupportsJoin bool `protobuf:"varint,18,opt,name=supports_join,json=supportsJoin,proto3" json:"supports_join,omitempty"`
	// RF region name.
	RfRegion string `protobuf:"bytes,19,opt,name=rf_region,json=rfRegion,proto3" json:"rf_region,omitempty"`
	// End-Device uses 32bit FCnt (mandatory for LoRaWAN 1.0 End-Device).
	Supports_32BitFCnt bool `protobuf:"varint,20,opt,name=supports_32bit_f_cnt,json=supports32bitFCnt,proto3" json:"supports_32bit_f_cnt,omitempty"`
	// delay between the end of join request message
	// and start of RX1 window to recieve a Join Accept
	// default 5000ms
	JoinAcceptDelay_1 uint32 `protobuf:"varint,21,opt,name=join_accept_delay_1,json=joinAcceptDelay1,proto3" json:"join_accept_delay_1,omitempty"`
	// delay between the end of join request message
	// and start of RX2 window to recieve a Join Accept
	// default 6000ms
	JoinAcceptDelay_2 uint32 `protobuf:"varint,22,opt,name=join_accept_delay_2,json=joinAcceptDelay2,proto3" json:"join_accept_delay_2,omitempty"`
	// allow autoreset for low counters recieved
	// (for ABP devices only)
	FCntAutomaticReset bool                `protobuf:"varint,23,opt,name=f_cnt_automatic_reset,json=fCntAutomaticReset,proto3" json:"f_cnt_automatic_reset,omitempty"`
	CmdSwitches        []*MacCommandSwitch `protobuf:"bytes,24,rep,name=cmd_switches,json=cmdSwitches,proto3" json:"cmd_switches,omitempty"`
	// Deprecated. Moved to SP.
	// TODO: remove it
	AdrAlgorithmId string `protobuf:"bytes,25,opt,name=adr_algorithm_id,json=adrAlgorithmId,proto3" json:"adr_algorithm_id,omitempty"`
	// Class A RX1 delay. If not set (-1) - default value from NS cfg in use
	// RX2 delay will be +1s to the rx1_delay
	Rx1Delay int32 `protobuf:"varint,26,opt,name=rx1_delay,json=rx1Delay,proto3" json:"rx1_delay,omitempty"`
	// RX1 data rate offset. If not set (-1) - default value from NS cfg in use
	Rx1DrOffset int32 `protobuf:"varint,27,opt,name=rx1_dr_offset,json=rx1DrOffset,proto3" json:"rx1_dr_offset,omitempty"`
	// RX2 data rate. If not set (-1) - default value from NS cfg in use
	Rx2Datarate int32 `protobuf:"varint,28,opt,name=rx2_datarate,json=rx2Datarate,proto3" json:"rx2_datarate,omitempty"`
	// RX2 channel frequency. If not set (-1) - default value from NS cfg in use
	Rx2Freq int32 `protobuf:"varint,29,opt,name=rx2_freq,json=rx2Freq,proto3" json:"rx2_freq,omitempty"`
}

func (x *DeviceProfile) Reset() {
	*x = DeviceProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_profiles_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceProfile) ProtoMessage() {}

func (x *DeviceProfile) ProtoReflect() protoreflect.Message {
	mi := &file_ns_profiles_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceProfile.ProtoReflect.Descriptor instead.
func (*DeviceProfile) Descriptor() ([]byte, []int) {
	return file_ns_profiles_proto_rawDescGZIP(), []int{1}
}

func (x *DeviceProfile) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DeviceProfile) GetSupportsClassB() bool {
	if x != nil {
		return x.SupportsClassB
	}
	return false
}

func (x *DeviceProfile) GetClassBTimeout() uint32 {
	if x != nil {
		return x.ClassBTimeout
	}
	return 0
}

func (x *DeviceProfile) GetPingSlotPeriod() uint32 {
	if x != nil {
		return x.PingSlotPeriod
	}
	return 0
}

func (x *DeviceProfile) GetPingSlotDr() uint32 {
	if x != nil {
		return x.PingSlotDr
	}
	return 0
}

func (x *DeviceProfile) GetPingSlotFreq() uint32 {
	if x != nil {
		return x.PingSlotFreq
	}
	return 0
}

func (x *DeviceProfile) GetSupportsClassC() bool {
	if x != nil {
		return x.SupportsClassC
	}
	return false
}

func (x *DeviceProfile) GetClassCTimeout() uint32 {
	if x != nil {
		return x.ClassCTimeout
	}
	return 0
}

func (x *DeviceProfile) GetMacVersion() string {
	if x != nil {
		return x.MacVersion
	}
	return ""
}

func (x *DeviceProfile) GetRegParamsRevision() string {
	if x != nil {
		return x.RegParamsRevision
	}
	return ""
}

func (x *DeviceProfile) GetRxDelay_1() uint32 {
	if x != nil {
		return x.RxDelay_1
	}
	return 0
}

func (x *DeviceProfile) GetRxDrOffset_1() uint32 {
	if x != nil {
		return x.RxDrOffset_1
	}
	return 0
}

func (x *DeviceProfile) GetRxDatarate_2() uint32 {
	if x != nil {
		return x.RxDatarate_2
	}
	return 0
}

func (x *DeviceProfile) GetRxFreq_2() uint32 {
	if x != nil {
		return x.RxFreq_2
	}
	return 0
}

func (x *DeviceProfile) GetFactoryPresetFreqs() []uint32 {
	if x != nil {
		return x.FactoryPresetFreqs
	}
	return nil
}

func (x *DeviceProfile) GetMaxEirp() uint32 {
	if x != nil {
		return x.MaxEirp
	}
	return 0
}

func (x *DeviceProfile) GetMaxDutyCycle() uint32 {
	if x != nil {
		return x.MaxDutyCycle
	}
	return 0
}

func (x *DeviceProfile) GetSupportsJoin() bool {
	if x != nil {
		return x.SupportsJoin
	}
	return false
}

func (x *DeviceProfile) GetRfRegion() string {
	if x != nil {
		return x.RfRegion
	}
	return ""
}

func (x *DeviceProfile) GetSupports_32BitFCnt() bool {
	if x != nil {
		return x.Supports_32BitFCnt
	}
	return false
}

func (x *DeviceProfile) GetJoinAcceptDelay_1() uint32 {
	if x != nil {
		return x.JoinAcceptDelay_1
	}
	return 0
}

func (x *DeviceProfile) GetJoinAcceptDelay_2() uint32 {
	if x != nil {
		return x.JoinAcceptDelay_2
	}
	return 0
}

func (x *DeviceProfile) GetFCntAutomaticReset() bool {
	if x != nil {
		return x.FCntAutomaticReset
	}
	return false
}

func (x *DeviceProfile) GetCmdSwitches() []*MacCommandSwitch {
	if x != nil {
		return x.CmdSwitches
	}
	return nil
}

func (x *DeviceProfile) GetAdrAlgorithmId() string {
	if x != nil {
		return x.AdrAlgorithmId
	}
	return ""
}

func (x *DeviceProfile) GetRx1Delay() int32 {
	if x != nil {
		return x.Rx1Delay
	}
	return 0
}

func (x *DeviceProfile) GetRx1DrOffset() int32 {
	if x != nil {
		return x.Rx1DrOffset
	}
	return 0
}

func (x *DeviceProfile) GetRx2Datarate() int32 {
	if x != nil {
		return x.Rx2Datarate
	}
	return 0
}

func (x *DeviceProfile) GetRx2Freq() int32 {
	if x != nil {
		return x.Rx2Freq
	}
	return 0
}

type RoutingProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the routing profile.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Application-server ID.
	AsId string `protobuf:"bytes,2,opt,name=as_id,json=asId,proto3" json:"as_id,omitempty"`
	// CA certificate for connecting to the AS.
	CaCert string `protobuf:"bytes,3,opt,name=ca_cert,json=caCert,proto3" json:"ca_cert,omitempty"`
	// TLS certificate for connecting to the AS.
	TlsCert string `protobuf:"bytes,4,opt,name=tls_cert,json=tlsCert,proto3" json:"tls_cert,omitempty"`
	// TLS key for connecting to the AS.
	// Note: when retrieving the routing-profile, the tls_key is not returned
	// for security reasons. When updating the routing-profile, an empty tls_key
	// does not clear the certificate, unless the tls_cert is also left blank.
	TlsKey string `protobuf:"bytes,5,opt,name=tls_key,json=tlsKey,proto3" json:"tls_key,omitempty"`
}

func (x *RoutingProfile) Reset() {
	*x = RoutingProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_profiles_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutingProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingProfile) ProtoMessage() {}

func (x *RoutingProfile) ProtoReflect() protoreflect.Message {
	mi := &file_ns_profiles_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingProfile.ProtoReflect.Descriptor instead.
func (*RoutingProfile) Descriptor() ([]byte, []int) {
	return file_ns_profiles_proto_rawDescGZIP(), []int{2}
}

func (x *RoutingProfile) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RoutingProfile) GetAsId() string {
	if x != nil {
		return x.AsId
	}
	return ""
}

func (x *RoutingProfile) GetCaCert() string {
	if x != nil {
		return x.CaCert
	}
	return ""
}

func (x *RoutingProfile) GetTlsCert() string {
	if x != nil {
		return x.TlsCert
	}
	return ""
}

func (x *RoutingProfile) GetTlsKey() string {
	if x != nil {
		return x.TlsKey
	}
	return ""
}

type MacCommandSwitch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Command identifier (specified by the LoRaWAN specs).
	// see https://github.com/brocaar/lorawan/blob/master/mac_commands.go
	// for example 10 is 0x0A which is DLChannelReq command
	Cid uint32 `protobuf:"varint,1,opt,name=cid,proto3" json:"cid,omitempty"`
	// if true the MACcommand with the identifier will be allowed
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *MacCommandSwitch) Reset() {
	*x = MacCommandSwitch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_profiles_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MacCommandSwitch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MacCommandSwitch) ProtoMessage() {}

func (x *MacCommandSwitch) ProtoReflect() protoreflect.Message {
	mi := &file_ns_profiles_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MacCommandSwitch.ProtoReflect.Descriptor instead.
func (*MacCommandSwitch) Descriptor() ([]byte, []int) {
	return file_ns_profiles_proto_rawDescGZIP(), []int{3}
}

func (x *MacCommandSwitch) GetCid() uint32 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *MacCommandSwitch) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

var File_ns_profiles_proto protoreflect.FileDescriptor

var file_ns_profiles_proto_rawDesc = []byte{
	0x0a, 0x11, 0x6e, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x02, 0x6e, 0x73, 0x22, 0x8f, 0x0a, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x6c,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x75, 0x6c, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x75, 0x6c, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x6c, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x34, 0x0a, 0x0e, 0x75, 0x6c, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x6e, 0x73, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x0c, 0x75, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x2e, 0x0a, 0x0c, 0x75, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x6e, 0x73, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x0a, 0x75, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x64, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x64, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x64, 0x6c, 0x5f, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x64, 0x6c, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x34,
	0x0a, 0x0e, 0x64, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x6e, 0x73, 0x2e, 0x52, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0c, 0x64, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x2e, 0x0a, 0x0c, 0x64, 0x6c, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x6e, 0x73, 0x2e,
	0x52, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0a, 0x64, 0x6c, 0x52, 0x61, 0x74, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x5f, 0x67, 0x77, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x61,
	0x64, 0x64, 0x47, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x13,
	0x64, 0x65, 0x76, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x71, 0x5f, 0x66,
	0x72, 0x65, 0x71, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x64, 0x65, 0x76, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x46, 0x72, 0x65, 0x71, 0x12, 0x39, 0x0a, 0x19, 0x72,
	0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x65, 0x76, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x65, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x18, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x64, 0x65, 0x76, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x44, 0x65, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x12,
	0x15, 0x0a, 0x06, 0x64, 0x72, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x64, 0x72, 0x4d, 0x69, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x64, 0x72, 0x5f, 0x6d, 0x61, 0x78,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x72, 0x4d, 0x61, 0x78, 0x12, 0x21, 0x0a,
	0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x61, 0x73, 0x6b,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x70, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x68, 0x72, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x68, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x61, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x72, 0x61, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x1e, 0x0a,
	0x0b, 0x6e, 0x77, 0x6b, 0x5f, 0x67, 0x65, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x6e, 0x77, 0x6b, 0x47, 0x65, 0x6f, 0x4c, 0x6f, 0x63, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10,
	0x6d, 0x69, 0x6e, 0x5f, 0x67, 0x77, 0x5f, 0x64, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x47, 0x77, 0x44, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x67, 0x77, 0x73, 0x5f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x67, 0x77, 0x73,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x64, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x64, 0x72, 0x5f,
	0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x61, 0x64, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x49, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x5f, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x21, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x6d, 0x69, 0x6e, 0x54, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x2b, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x78, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6d, 0x61, 0x78,
	0x54, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x20, 0x0a, 0x0c,
	0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x62, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x4e, 0x62, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x20,
	0x0a, 0x0c, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x62, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x4e, 0x62, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x78, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x52, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x30,
	0x0a, 0x14, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x78, 0x5f, 0x75, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x54, 0x78, 0x55, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64,
	0x12, 0x2c, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x74, 0x78, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x54, 0x78, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x29,
	0x0a, 0x11, 0x64, 0x6c, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64, 0x6c, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x4d, 0x61, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xe2, 0x08, 0x0a, 0x0d, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x42, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x62,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x6f,
	0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x70,
	0x69, 0x6e, 0x67, 0x53, 0x6c, 0x6f, 0x74, 0x44, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x6c, 0x6f, 0x74, 0x46, 0x72, 0x65, 0x71, 0x12,
	0x28, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x5f, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x67, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x5f, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x72, 0x65, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x0a, 0x72, 0x78, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x31,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x78, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x31,
	0x12, 0x23, 0x0a, 0x0e, 0x72, 0x78, 0x5f, 0x64, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x5f, 0x31, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x78, 0x44, 0x72, 0x4f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x31, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x32, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x78,
	0x44, 0x61, 0x74, 0x61, 0x72, 0x61, 0x74, 0x65, 0x32, 0x12, 0x1a, 0x0a, 0x09, 0x72, 0x78, 0x5f,
	0x66, 0x72, 0x65, 0x71, 0x5f, 0x32, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x78,
	0x46, 0x72, 0x65, 0x71, 0x32, 0x12, 0x30, 0x0a, 0x14, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x12, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x46, 0x72, 0x65, 0x71, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x65,
	0x69, 0x72, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x45, 0x69,
	0x72, 0x70, 0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x75, 0x74, 0x79, 0x5f, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x44,
	0x75, 0x74, 0x79, 0x43, 0x79, 0x63, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4a, 0x6f, 0x69, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x72, 0x66, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x66, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x33, 0x32, 0x62, 0x69, 0x74, 0x5f, 0x66, 0x5f, 0x63,
	0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x33, 0x32, 0x62, 0x69, 0x74, 0x46, 0x43, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x6a,
	0x6f, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x5f, 0x31, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6a, 0x6f, 0x69, 0x6e, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x31, 0x12, 0x2d, 0x0a, 0x13, 0x6a, 0x6f,
	0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f,
	0x32, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x6a, 0x6f, 0x69, 0x6e, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x32, 0x12, 0x31, 0x0a, 0x15, 0x66, 0x5f, 0x63,
	0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x66, 0x43, 0x6e, 0x74, 0x41, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x37, 0x0a, 0x0c,
	0x63, 0x6d, 0x64, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x73, 0x2e, 0x4d, 0x61, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x0b, 0x63, 0x6d, 0x64, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x64, 0x72, 0x5f, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x61, 0x64, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x78, 0x31, 0x5f, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x72, 0x78, 0x31, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x22, 0x0a, 0x0d,
	0x72, 0x78, 0x31, 0x5f, 0x64, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x78, 0x31, 0x44, 0x72, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x78, 0x32, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x78, 0x32, 0x44, 0x61, 0x74, 0x61, 0x72,
	0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x78, 0x32, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x78, 0x32, 0x46, 0x72, 0x65, 0x71, 0x22, 0x82,
	0x01, 0x0a, 0x0e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x13, 0x0a, 0x05, 0x61, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x73, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x6c, 0x73, 0x43, 0x65, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6c,
	0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x6c, 0x73,
	0x4b, 0x65, 0x79, 0x22, 0x3e, 0x0a, 0x10, 0x4d, 0x61, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x2a, 0x20, 0x0a, 0x0a, 0x52, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x72, 0x6f, 0x70, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4d,
	0x61, 0x72, 0x6b, 0x10, 0x01, 0x2a, 0x3c, 0x0a, 0x08, 0x52, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x08, 0x0a, 0x04, 0x48, 0x6f, 0x75, 0x72, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x44,
	0x61, 0x79, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x65, 0x65, 0x6b, 0x10, 0x02, 0x12, 0x09,
	0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x59, 0x65, 0x61,
	0x72, 0x10, 0x04, 0x42, 0x6b, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x73, 0x42, 0x0d, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2a,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x72, 0x6f, 0x63, 0x61,
	0x61, 0x72, 0x2f, 0x63, 0x68, 0x69, 0x72, 0x70, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2d, 0x61, 0x70,
	0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x76, 0x33, 0x2f, 0x6e, 0x73, 0xa2, 0x02, 0x03, 0x4e, 0x58, 0x58,
	0xaa, 0x02, 0x02, 0x4e, 0x73, 0xca, 0x02, 0x02, 0x4e, 0x73, 0xe2, 0x02, 0x0e, 0x4e, 0x73, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x02, 0x4e, 0x73,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ns_profiles_proto_rawDescOnce sync.Once
	file_ns_profiles_proto_rawDescData = file_ns_profiles_proto_rawDesc
)

func file_ns_profiles_proto_rawDescGZIP() []byte {
	file_ns_profiles_proto_rawDescOnce.Do(func() {
		file_ns_profiles_proto_rawDescData = protoimpl.X.CompressGZIP(file_ns_profiles_proto_rawDescData)
	})
	return file_ns_profiles_proto_rawDescData
}

var file_ns_profiles_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_ns_profiles_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_ns_profiles_proto_goTypes = []interface{}{
	(RatePolicy)(0),          // 0: ns.RatePolicy
	(RateUnit)(0),            // 1: ns.RateUnit
	(*ServiceProfile)(nil),   // 2: ns.ServiceProfile
	(*DeviceProfile)(nil),    // 3: ns.DeviceProfile
	(*RoutingProfile)(nil),   // 4: ns.RoutingProfile
	(*MacCommandSwitch)(nil), // 5: ns.MacCommandSwitch
}
var file_ns_profiles_proto_depIdxs = []int32{
	0, // 0: ns.ServiceProfile.ul_rate_policy:type_name -> ns.RatePolicy
	1, // 1: ns.ServiceProfile.ul_rate_unit:type_name -> ns.RateUnit
	0, // 2: ns.ServiceProfile.dl_rate_policy:type_name -> ns.RatePolicy
	1, // 3: ns.ServiceProfile.dl_rate_unit:type_name -> ns.RateUnit
	5, // 4: ns.DeviceProfile.cmd_switches:type_name -> ns.MacCommandSwitch
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_ns_profiles_proto_init() }
func file_ns_profiles_proto_init() {
	if File_ns_profiles_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ns_profiles_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_profiles_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_profiles_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutingProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_profiles_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MacCommandSwitch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ns_profiles_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_ns_profiles_proto_goTypes,
		DependencyIndexes: file_ns_profiles_proto_depIdxs,
		EnumInfos:         file_ns_profiles_proto_enumTypes,
		MessageInfos:      file_ns_profiles_proto_msgTypes,
	}.Build()
	File_ns_profiles_proto = out.File
	file_ns_profiles_proto_rawDesc = nil
	file_ns_profiles_proto_goTypes = nil
	file_ns_profiles_proto_depIdxs = nil
}
