// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        (unknown)
// source: ns/ns.proto

package ns

import (
	common "github.com/brocaar/chirpstack-api/go/v3/common"
	gw "github.com/brocaar/chirpstack-api/go/v3/gw"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RXWindow int32

const (
	// Receive window 1
	RXWindow_RX1 RXWindow = 0
	// Receive window 2
	RXWindow_RX2 RXWindow = 1
)

// Enum value maps for RXWindow.
var (
	RXWindow_name = map[int32]string{
		0: "RX1",
		1: "RX2",
	}
	RXWindow_value = map[string]int32{
		"RX1": 0,
		"RX2": 1,
	}
)

func (x RXWindow) Enum() *RXWindow {
	p := new(RXWindow)
	*p = x
	return p
}

func (x RXWindow) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RXWindow) Descriptor() protoreflect.EnumDescriptor {
	return file_ns_ns_proto_enumTypes[0].Descriptor()
}

func (RXWindow) Type() protoreflect.EnumType {
	return &file_ns_ns_proto_enumTypes[0]
}

func (x RXWindow) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RXWindow.Descriptor instead.
func (RXWindow) EnumDescriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{0}
}

type RateLimit int32

const (
	// Unlimited - common state
	RateLimit_Unlimited RateLimit = 0
	// Dropped - droped when limit reached
	RateLimit_Dropped RateLimit = 1
	// Marked - don't drop just mark that limit reached
	RateLimit_Marked RateLimit = 2
)

// Enum value maps for RateLimit.
var (
	RateLimit_name = map[int32]string{
		0: "Unlimited",
		1: "Dropped",
		2: "Marked",
	}
	RateLimit_value = map[string]int32{
		"Unlimited": 0,
		"Dropped":   1,
		"Marked":    2,
	}
)

func (x RateLimit) Enum() *RateLimit {
	p := new(RateLimit)
	*p = x
	return p
}

func (x RateLimit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RateLimit) Descriptor() protoreflect.EnumDescriptor {
	return file_ns_ns_proto_enumTypes[1].Descriptor()
}

func (RateLimit) Type() protoreflect.EnumType {
	return &file_ns_ns_proto_enumTypes[1]
}

func (x RateLimit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RateLimit.Descriptor instead.
func (RateLimit) EnumDescriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{1}
}

type AggregationInterval int32

const (
	AggregationInterval_SECOND  AggregationInterval = 0
	AggregationInterval_MINUTE  AggregationInterval = 1
	AggregationInterval_HOUR    AggregationInterval = 2
	AggregationInterval_DAY     AggregationInterval = 3
	AggregationInterval_WEEK    AggregationInterval = 4
	AggregationInterval_MONTH   AggregationInterval = 5
	AggregationInterval_QUARTER AggregationInterval = 6
	AggregationInterval_YEAR    AggregationInterval = 7
)

// Enum value maps for AggregationInterval.
var (
	AggregationInterval_name = map[int32]string{
		0: "SECOND",
		1: "MINUTE",
		2: "HOUR",
		3: "DAY",
		4: "WEEK",
		5: "MONTH",
		6: "QUARTER",
		7: "YEAR",
	}
	AggregationInterval_value = map[string]int32{
		"SECOND":  0,
		"MINUTE":  1,
		"HOUR":    2,
		"DAY":     3,
		"WEEK":    4,
		"MONTH":   5,
		"QUARTER": 6,
		"YEAR":    7,
	}
)

func (x AggregationInterval) Enum() *AggregationInterval {
	p := new(AggregationInterval)
	*p = x
	return p
}

func (x AggregationInterval) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AggregationInterval) Descriptor() protoreflect.EnumDescriptor {
	return file_ns_ns_proto_enumTypes[2].Descriptor()
}

func (AggregationInterval) Type() protoreflect.EnumType {
	return &file_ns_ns_proto_enumTypes[2]
}

func (x AggregationInterval) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AggregationInterval.Descriptor instead.
func (AggregationInterval) EnumDescriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{2}
}

type MulticastGroupType int32

const (
	// Class-C.
	MulticastGroupType_CLASS_C MulticastGroupType = 0
	// Class-B.
	MulticastGroupType_CLASS_B MulticastGroupType = 1
)

// Enum value maps for MulticastGroupType.
var (
	MulticastGroupType_name = map[int32]string{
		0: "CLASS_C",
		1: "CLASS_B",
	}
	MulticastGroupType_value = map[string]int32{
		"CLASS_C": 0,
		"CLASS_B": 1,
	}
)

func (x MulticastGroupType) Enum() *MulticastGroupType {
	p := new(MulticastGroupType)
	*p = x
	return p
}

func (x MulticastGroupType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MulticastGroupType) Descriptor() protoreflect.EnumDescriptor {
	return file_ns_ns_proto_enumTypes[3].Descriptor()
}

func (MulticastGroupType) Type() protoreflect.EnumType {
	return &file_ns_ns_proto_enumTypes[3]
}

func (x MulticastGroupType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MulticastGroupType.Descriptor instead.
func (MulticastGroupType) EnumDescriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{3}
}

type CreateServiceProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Service-profile object to create.
	ServiceProfile *ServiceProfile `protobuf:"bytes,1,opt,name=service_profile,json=serviceProfile,proto3" json:"service_profile,omitempty"`
}

func (x *CreateServiceProfileRequest) Reset() {
	*x = CreateServiceProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateServiceProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServiceProfileRequest) ProtoMessage() {}

func (x *CreateServiceProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServiceProfileRequest.ProtoReflect.Descriptor instead.
func (*CreateServiceProfileRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{0}
}

func (x *CreateServiceProfileRequest) GetServiceProfile() *ServiceProfile {
	if x != nil {
		return x.ServiceProfile
	}
	return nil
}

type CreateServiceProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the created service-profile.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateServiceProfileResponse) Reset() {
	*x = CreateServiceProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateServiceProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateServiceProfileResponse) ProtoMessage() {}

func (x *CreateServiceProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateServiceProfileResponse.ProtoReflect.Descriptor instead.
func (*CreateServiceProfileResponse) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{1}
}

func (x *CreateServiceProfileResponse) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type GetServiceProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the service-profile.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetServiceProfileRequest) Reset() {
	*x = GetServiceProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceProfileRequest) ProtoMessage() {}

func (x *GetServiceProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceProfileRequest.ProtoReflect.Descriptor instead.
func (*GetServiceProfileRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{2}
}

func (x *GetServiceProfileRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type GetServiceProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Service-profile object.
	ServiceProfile *ServiceProfile `protobuf:"bytes,1,opt,name=service_profile,json=serviceProfile,proto3" json:"service_profile,omitempty"`
	// Created at timestamp.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Last update timestamp.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *GetServiceProfileResponse) Reset() {
	*x = GetServiceProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetServiceProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetServiceProfileResponse) ProtoMessage() {}

func (x *GetServiceProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetServiceProfileResponse.ProtoReflect.Descriptor instead.
func (*GetServiceProfileResponse) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{3}
}

func (x *GetServiceProfileResponse) GetServiceProfile() *ServiceProfile {
	if x != nil {
		return x.ServiceProfile
	}
	return nil
}

func (x *GetServiceProfileResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GetServiceProfileResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type UpdateServiceProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Service-profile object to update.
	ServiceProfile *ServiceProfile `protobuf:"bytes,1,opt,name=service_profile,json=serviceProfile,proto3" json:"service_profile,omitempty"`
}

func (x *UpdateServiceProfileRequest) Reset() {
	*x = UpdateServiceProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateServiceProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateServiceProfileRequest) ProtoMessage() {}

func (x *UpdateServiceProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateServiceProfileRequest.ProtoReflect.Descriptor instead.
func (*UpdateServiceProfileRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateServiceProfileRequest) GetServiceProfile() *ServiceProfile {
	if x != nil {
		return x.ServiceProfile
	}
	return nil
}

type DeleteServiceProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the service-profile.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteServiceProfileRequest) Reset() {
	*x = DeleteServiceProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteServiceProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteServiceProfileRequest) ProtoMessage() {}

func (x *DeleteServiceProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteServiceProfileRequest.ProtoReflect.Descriptor instead.
func (*DeleteServiceProfileRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteServiceProfileRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type CreateRoutingProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Routing-profile object to create.
	RoutingProfile *RoutingProfile `protobuf:"bytes,1,opt,name=routing_profile,json=routingProfile,proto3" json:"routing_profile,omitempty"`
}

func (x *CreateRoutingProfileRequest) Reset() {
	*x = CreateRoutingProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRoutingProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRoutingProfileRequest) ProtoMessage() {}

func (x *CreateRoutingProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRoutingProfileRequest.ProtoReflect.Descriptor instead.
func (*CreateRoutingProfileRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{6}
}

func (x *CreateRoutingProfileRequest) GetRoutingProfile() *RoutingProfile {
	if x != nil {
		return x.RoutingProfile
	}
	return nil
}

type CreateRoutingProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the created routing-profile.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateRoutingProfileResponse) Reset() {
	*x = CreateRoutingProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRoutingProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRoutingProfileResponse) ProtoMessage() {}

func (x *CreateRoutingProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRoutingProfileResponse.ProtoReflect.Descriptor instead.
func (*CreateRoutingProfileResponse) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{7}
}

func (x *CreateRoutingProfileResponse) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type GetRoutingProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the routing-profile.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetRoutingProfileRequest) Reset() {
	*x = GetRoutingProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoutingProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoutingProfileRequest) ProtoMessage() {}

func (x *GetRoutingProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoutingProfileRequest.ProtoReflect.Descriptor instead.
func (*GetRoutingProfileRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{8}
}

func (x *GetRoutingProfileRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type GetRoutingProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Routing-profile object.
	RoutingProfile *RoutingProfile `protobuf:"bytes,1,opt,name=routing_profile,json=routingProfile,proto3" json:"routing_profile,omitempty"`
	// Created at timestamp.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Last update timestamp.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *GetRoutingProfileResponse) Reset() {
	*x = GetRoutingProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRoutingProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRoutingProfileResponse) ProtoMessage() {}

func (x *GetRoutingProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRoutingProfileResponse.ProtoReflect.Descriptor instead.
func (*GetRoutingProfileResponse) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{9}
}

func (x *GetRoutingProfileResponse) GetRoutingProfile() *RoutingProfile {
	if x != nil {
		return x.RoutingProfile
	}
	return nil
}

func (x *GetRoutingProfileResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GetRoutingProfileResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type UpdateRoutingProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Routing-profile object to update.
	RoutingProfile *RoutingProfile `protobuf:"bytes,1,opt,name=routing_profile,json=routingProfile,proto3" json:"routing_profile,omitempty"`
}

func (x *UpdateRoutingProfileRequest) Reset() {
	*x = UpdateRoutingProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRoutingProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRoutingProfileRequest) ProtoMessage() {}

func (x *UpdateRoutingProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRoutingProfileRequest.ProtoReflect.Descriptor instead.
func (*UpdateRoutingProfileRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateRoutingProfileRequest) GetRoutingProfile() *RoutingProfile {
	if x != nil {
		return x.RoutingProfile
	}
	return nil
}

type DeleteRoutingProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Routing-profile ID.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteRoutingProfileRequest) Reset() {
	*x = DeleteRoutingProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRoutingProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRoutingProfileRequest) ProtoMessage() {}

func (x *DeleteRoutingProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRoutingProfileRequest.ProtoReflect.Descriptor instead.
func (*DeleteRoutingProfileRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteRoutingProfileRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type CreateDeviceProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device-profile object to create.
	DeviceProfile *DeviceProfile `protobuf:"bytes,1,opt,name=device_profile,json=deviceProfile,proto3" json:"device_profile,omitempty"`
}

func (x *CreateDeviceProfileRequest) Reset() {
	*x = CreateDeviceProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceProfileRequest) ProtoMessage() {}

func (x *CreateDeviceProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceProfileRequest.ProtoReflect.Descriptor instead.
func (*CreateDeviceProfileRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{12}
}

func (x *CreateDeviceProfileRequest) GetDeviceProfile() *DeviceProfile {
	if x != nil {
		return x.DeviceProfile
	}
	return nil
}

type CreateDeviceProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the created device-profile.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateDeviceProfileResponse) Reset() {
	*x = CreateDeviceProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceProfileResponse) ProtoMessage() {}

func (x *CreateDeviceProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceProfileResponse.ProtoReflect.Descriptor instead.
func (*CreateDeviceProfileResponse) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{13}
}

func (x *CreateDeviceProfileResponse) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type GetDeviceProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device-profile ID.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetDeviceProfileRequest) Reset() {
	*x = GetDeviceProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceProfileRequest) ProtoMessage() {}

func (x *GetDeviceProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceProfileRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceProfileRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{14}
}

func (x *GetDeviceProfileRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type GetDeviceProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device-profile object.
	DeviceProfile *DeviceProfile `protobuf:"bytes,1,opt,name=device_profile,json=deviceProfile,proto3" json:"device_profile,omitempty"`
	// Created at timestamp.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Last update timestamp.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *GetDeviceProfileResponse) Reset() {
	*x = GetDeviceProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceProfileResponse) ProtoMessage() {}

func (x *GetDeviceProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceProfileResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceProfileResponse) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{15}
}

func (x *GetDeviceProfileResponse) GetDeviceProfile() *DeviceProfile {
	if x != nil {
		return x.DeviceProfile
	}
	return nil
}

func (x *GetDeviceProfileResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GetDeviceProfileResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type UpdateDeviceProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device-profile object to update.
	DeviceProfile *DeviceProfile `protobuf:"bytes,1,opt,name=device_profile,json=deviceProfile,proto3" json:"device_profile,omitempty"`
}

func (x *UpdateDeviceProfileRequest) Reset() {
	*x = UpdateDeviceProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceProfileRequest) ProtoMessage() {}

func (x *UpdateDeviceProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceProfileRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeviceProfileRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateDeviceProfileRequest) GetDeviceProfile() *DeviceProfile {
	if x != nil {
		return x.DeviceProfile
	}
	return nil
}

type DeleteDeviceProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device-profile ID.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteDeviceProfileRequest) Reset() {
	*x = DeleteDeviceProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeviceProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceProfileRequest) ProtoMessage() {}

func (x *DeleteDeviceProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceProfileRequest.ProtoReflect.Descriptor instead.
func (*DeleteDeviceProfileRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteDeviceProfileRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DevEUI.
	DevEui []byte `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// Device-profile ID.
	DeviceProfileId []byte `protobuf:"bytes,2,opt,name=device_profile_id,json=deviceProfileId,proto3" json:"device_profile_id,omitempty"`
	// Service-profile ID.
	ServiceProfileId []byte `protobuf:"bytes,3,opt,name=service_profile_id,json=serviceProfileId,proto3" json:"service_profile_id,omitempty"`
	// Routing-profile ID.
	RoutingProfileId []byte `protobuf:"bytes,4,opt,name=routing_profile_id,json=routingProfileId,proto3" json:"routing_profile_id,omitempty"`
	// Skip frame-counter check.
	// Note that turning this on is insecure and is intended for debugging only.
	SkipFCntCheck bool `protobuf:"varint,5,opt,name=skip_f_cnt_check,json=skipFCntCheck,proto3" json:"skip_f_cnt_check,omitempty"`
	// Reference altitude.
	// When using geolocation, this altitude will be used as a reference
	// (when supported by the geolocation-server) to increase geolocation
	// accuracy.
	ReferenceAltitude float64 `protobuf:"fixed64,6,opt,name=reference_altitude,json=referenceAltitude,proto3" json:"reference_altitude,omitempty"`
	// If true - the device is disabled.
	IsDisabled bool `protobuf:"varint,7,opt,name=is_disabled,json=isDisabled,proto3" json:"is_disabled,omitempty"`
	// If true - do not flush the device-queue during join
	KeepQueue bool `protobuf:"varint,8,opt,name=keep_queue,json=keepQueue,proto3" json:"keep_queue,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{18}
}

func (x *Device) GetDevEui() []byte {
	if x != nil {
		return x.DevEui
	}
	return nil
}

func (x *Device) GetDeviceProfileId() []byte {
	if x != nil {
		return x.DeviceProfileId
	}
	return nil
}

func (x *Device) GetServiceProfileId() []byte {
	if x != nil {
		return x.ServiceProfileId
	}
	return nil
}

func (x *Device) GetRoutingProfileId() []byte {
	if x != nil {
		return x.RoutingProfileId
	}
	return nil
}

func (x *Device) GetSkipFCntCheck() bool {
	if x != nil {
		return x.SkipFCntCheck
	}
	return false
}

func (x *Device) GetReferenceAltitude() float64 {
	if x != nil {
		return x.ReferenceAltitude
	}
	return 0
}

func (x *Device) GetIsDisabled() bool {
	if x != nil {
		return x.IsDisabled
	}
	return false
}

func (x *Device) GetKeepQueue() bool {
	if x != nil {
		return x.KeepQueue
	}
	return false
}

type CreateDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device object to create.
	Device *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *CreateDeviceRequest) Reset() {
	*x = CreateDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceRequest) ProtoMessage() {}

func (x *CreateDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceRequest.ProtoReflect.Descriptor instead.
func (*CreateDeviceRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{19}
}

func (x *CreateDeviceRequest) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

type GetDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DevEUI.
	DevEui []byte `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
}

func (x *GetDeviceRequest) Reset() {
	*x = GetDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceRequest) ProtoMessage() {}

func (x *GetDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{20}
}

func (x *GetDeviceRequest) GetDevEui() []byte {
	if x != nil {
		return x.DevEui
	}
	return nil
}

type GetDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device object.
	Device *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
	// Created at timestamp.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Last update timestamp.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *GetDeviceResponse) Reset() {
	*x = GetDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceResponse) ProtoMessage() {}

func (x *GetDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceResponse) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{21}
}

func (x *GetDeviceResponse) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *GetDeviceResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GetDeviceResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type GetDeviceForExportResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DevEUI.
	DevEui []byte `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// it the device support class B. Data from device_profie
	SupportsClassB bool `protobuf:"varint,2,opt,name=supports_class_b,json=supportsClassB,proto3" json:"supports_class_b,omitempty"`
	// it the device support class C. Data from device_profie
	SupportsClassC bool `protobuf:"varint,3,opt,name=supports_class_c,json=supportsClassC,proto3" json:"supports_class_c,omitempty"`
	// Data from device_profie
	MACVersion string `protobuf:"bytes,4,opt,name=MAC_version,json=MACVersion,proto3" json:"MAC_version,omitempty"`
	// Data from device_profie
	IsDisabled bool `protobuf:"varint,5,opt,name=is_disabled,json=isDisabled,proto3" json:"is_disabled,omitempty"`
	// Data from device_profie. If true - device is OTAA, otherwise ABP
	SupportsJoin bool `protobuf:"varint,6,opt,name=supports_join,json=supportsJoin,proto3" json:"supports_join,omitempty"`
	// nwkSEncKey from last device_activation
	NwkSEncKey string `protobuf:"bytes,7,opt,name=nwk_s_enc_key,json=nwkSEncKey,proto3" json:"nwk_s_enc_key,omitempty"`
}

func (x *GetDeviceForExportResponse) Reset() {
	*x = GetDeviceForExportResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceForExportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceForExportResponse) ProtoMessage() {}

func (x *GetDeviceForExportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceForExportResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceForExportResponse) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{22}
}

func (x *GetDeviceForExportResponse) GetDevEui() []byte {
	if x != nil {
		return x.DevEui
	}
	return nil
}

func (x *GetDeviceForExportResponse) GetSupportsClassB() bool {
	if x != nil {
		return x.SupportsClassB
	}
	return false
}

func (x *GetDeviceForExportResponse) GetSupportsClassC() bool {
	if x != nil {
		return x.SupportsClassC
	}
	return false
}

func (x *GetDeviceForExportResponse) GetMACVersion() string {
	if x != nil {
		return x.MACVersion
	}
	return ""
}

func (x *GetDeviceForExportResponse) GetIsDisabled() bool {
	if x != nil {
		return x.IsDisabled
	}
	return false
}

func (x *GetDeviceForExportResponse) GetSupportsJoin() bool {
	if x != nil {
		return x.SupportsJoin
	}
	return false
}

func (x *GetDeviceForExportResponse) GetNwkSEncKey() string {
	if x != nil {
		return x.NwkSEncKey
	}
	return ""
}

type UpdateDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device object to update.
	Device *Device `protobuf:"bytes,1,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *UpdateDeviceRequest) Reset() {
	*x = UpdateDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeviceRequest) ProtoMessage() {}

func (x *UpdateDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeviceRequest.ProtoReflect.Descriptor instead.
func (*UpdateDeviceRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{23}
}

func (x *UpdateDeviceRequest) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

type DeleteDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DevEUI.
	DevEui []byte `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
}

func (x *DeleteDeviceRequest) Reset() {
	*x = DeleteDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteDeviceRequest) ProtoMessage() {}

func (x *DeleteDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteDeviceRequest.ProtoReflect.Descriptor instead.
func (*DeleteDeviceRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{24}
}

func (x *DeleteDeviceRequest) GetDevEui() []byte {
	if x != nil {
		return x.DevEui
	}
	return nil
}

type DeviceActivation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DevEUI.
	DevEui []byte `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// Device address (DevAddr).
	DevAddr []byte `protobuf:"bytes,2,opt,name=dev_addr,json=devAddr,proto3" json:"dev_addr,omitempty"`
	// SNwkSIntKey (serving network-server session integrity key).
	SNwkSIntKey []byte `protobuf:"bytes,3,opt,name=s_nwk_s_int_key,json=sNwkSIntKey,proto3" json:"s_nwk_s_int_key,omitempty"`
	// FNwkSIntKey (forwarding network-server session integrity key).
	FNwkSIntKey []byte `protobuf:"bytes,4,opt,name=f_nwk_s_int_key,json=fNwkSIntKey,proto3" json:"f_nwk_s_int_key,omitempty"`
	// NwkSEncKey (network-server session encryption key).
	NwkSEncKey []byte `protobuf:"bytes,5,opt,name=nwk_s_enc_key,json=nwkSEncKey,proto3" json:"nwk_s_enc_key,omitempty"`
	// The next expected uplink frame-counter.
	FCntUp uint32 `protobuf:"varint,6,opt,name=f_cnt_up,json=fCntUp,proto3" json:"f_cnt_up,omitempty"`
	// The network frame-counter used for the next downlink frame.
	NFCntDown uint32 `protobuf:"varint,7,opt,name=n_f_cnt_down,json=nFCntDown,proto3" json:"n_f_cnt_down,omitempty"`
	// The application frame-counter used for the next downlink frame (LoRaWAN 1.1).
	AFCntDown uint32 `protobuf:"varint,8,opt,name=a_f_cnt_down,json=aFCntDown,proto3" json:"a_f_cnt_down,omitempty"`
	// Skip frame-counter checks (this is insecure, but could be helpful for debugging).
	SkipFCntCheck bool `protobuf:"varint,9,opt,name=skip_f_cnt_check,json=skipFCntCheck,proto3" json:"skip_f_cnt_check,omitempty"`
	// RX1 data-rate offset
	RX1DROffset uint32 `protobuf:"varint,10,opt,name=RX1DROffset,proto3" json:"RX1DROffset,omitempty"`
	// RX2 data-rate
	RX2DR uint32 `protobuf:"varint,11,opt,name=RX2DR,proto3" json:"RX2DR,omitempty"`
	// RX2 frequency
	RX2Frequency uint32 `protobuf:"varint,12,opt,name=RX2Frequency,proto3" json:"RX2Frequency,omitempty"`
	// tx power index
	TXPowerIndex int32 `protobuf:"varint,13,opt,name=TXPowerIndex,proto3" json:"TXPowerIndex,omitempty"`
	// data rate
	DR int32 `protobuf:"varint,14,opt,name=DR,proto3" json:"DR,omitempty"`
	// adaptive data rate
	ADR bool `protobuf:"varint,15,opt,name=ADR,proto3" json:"ADR,omitempty"`
	// number of retransmissions
	NbTrans uint32 `protobuf:"varint,16,opt,name=nb_trans,json=nbTrans,proto3" json:"nb_trans,omitempty"`
	// enabled channels
	EnabledUplinkChannels []int32          `protobuf:"varint,17,rep,packed,name=enabled_uplink_channels,json=enabledUplinkChannels,proto3" json:"enabled_uplink_channels,omitempty"`
	ExtraUplinkChannels   []*ExtraChannels `protobuf:"bytes,18,rep,name=extra_uplink_channels,json=extraUplinkChannels,proto3" json:"extra_uplink_channels,omitempty"`
	// application session key is for encode frm payload
	AppSKey []byte `protobuf:"bytes,19,opt,name=app_s_key,json=appSKey,proto3" json:"app_s_key,omitempty"`
}

func (x *DeviceActivation) Reset() {
	*x = DeviceActivation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceActivation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceActivation) ProtoMessage() {}

func (x *DeviceActivation) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceActivation.ProtoReflect.Descriptor instead.
func (*DeviceActivation) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{25}
}

func (x *DeviceActivation) GetDevEui() []byte {
	if x != nil {
		return x.DevEui
	}
	return nil
}

func (x *DeviceActivation) GetDevAddr() []byte {
	if x != nil {
		return x.DevAddr
	}
	return nil
}

func (x *DeviceActivation) GetSNwkSIntKey() []byte {
	if x != nil {
		return x.SNwkSIntKey
	}
	return nil
}

func (x *DeviceActivation) GetFNwkSIntKey() []byte {
	if x != nil {
		return x.FNwkSIntKey
	}
	return nil
}

func (x *DeviceActivation) GetNwkSEncKey() []byte {
	if x != nil {
		return x.NwkSEncKey
	}
	return nil
}

func (x *DeviceActivation) GetFCntUp() uint32 {
	if x != nil {
		return x.FCntUp
	}
	return 0
}

func (x *DeviceActivation) GetNFCntDown() uint32 {
	if x != nil {
		return x.NFCntDown
	}
	return 0
}

func (x *DeviceActivation) GetAFCntDown() uint32 {
	if x != nil {
		return x.AFCntDown
	}
	return 0
}

func (x *DeviceActivation) GetSkipFCntCheck() bool {
	if x != nil {
		return x.SkipFCntCheck
	}
	return false
}

func (x *DeviceActivation) GetRX1DROffset() uint32 {
	if x != nil {
		return x.RX1DROffset
	}
	return 0
}

func (x *DeviceActivation) GetRX2DR() uint32 {
	if x != nil {
		return x.RX2DR
	}
	return 0
}

func (x *DeviceActivation) GetRX2Frequency() uint32 {
	if x != nil {
		return x.RX2Frequency
	}
	return 0
}

func (x *DeviceActivation) GetTXPowerIndex() int32 {
	if x != nil {
		return x.TXPowerIndex
	}
	return 0
}

func (x *DeviceActivation) GetDR() int32 {
	if x != nil {
		return x.DR
	}
	return 0
}

func (x *DeviceActivation) GetADR() bool {
	if x != nil {
		return x.ADR
	}
	return false
}

func (x *DeviceActivation) GetNbTrans() uint32 {
	if x != nil {
		return x.NbTrans
	}
	return 0
}

func (x *DeviceActivation) GetEnabledUplinkChannels() []int32 {
	if x != nil {
		return x.EnabledUplinkChannels
	}
	return nil
}

func (x *DeviceActivation) GetExtraUplinkChannels() []*ExtraChannels {
	if x != nil {
		return x.ExtraUplinkChannels
	}
	return nil
}

func (x *DeviceActivation) GetAppSKey() []byte {
	if x != nil {
		return x.AppSKey
	}
	return nil
}

type ExtraChannels struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index     uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	Frequency uint32 `protobuf:"varint,2,opt,name=frequency,proto3" json:"frequency,omitempty"`
	MinDR     uint32 `protobuf:"varint,3,opt,name=minDR,proto3" json:"minDR,omitempty"`
	MaxDR     uint32 `protobuf:"varint,4,opt,name=maxDR,proto3" json:"maxDR,omitempty"`
}

func (x *ExtraChannels) Reset() {
	*x = ExtraChannels{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraChannels) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraChannels) ProtoMessage() {}

func (x *ExtraChannels) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraChannels.ProtoReflect.Descriptor instead.
func (*ExtraChannels) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{26}
}

func (x *ExtraChannels) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ExtraChannels) GetFrequency() uint32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *ExtraChannels) GetMinDR() uint32 {
	if x != nil {
		return x.MinDR
	}
	return 0
}

func (x *ExtraChannels) GetMaxDR() uint32 {
	if x != nil {
		return x.MaxDR
	}
	return 0
}

type ActivateDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device-activation to activate a device (ABP).
	DeviceActivation *DeviceActivation `protobuf:"bytes,1,opt,name=device_activation,json=deviceActivation,proto3" json:"device_activation,omitempty"`
}

func (x *ActivateDeviceRequest) Reset() {
	*x = ActivateDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActivateDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActivateDeviceRequest) ProtoMessage() {}

func (x *ActivateDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActivateDeviceRequest.ProtoReflect.Descriptor instead.
func (*ActivateDeviceRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{27}
}

func (x *ActivateDeviceRequest) GetDeviceActivation() *DeviceActivation {
	if x != nil {
		return x.DeviceActivation
	}
	return nil
}

type DeactivateDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI (8 bytes).
	DevEui []byte `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
}

func (x *DeactivateDeviceRequest) Reset() {
	*x = DeactivateDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeactivateDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeactivateDeviceRequest) ProtoMessage() {}

func (x *DeactivateDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeactivateDeviceRequest.ProtoReflect.Descriptor instead.
func (*DeactivateDeviceRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{28}
}

func (x *DeactivateDeviceRequest) GetDevEui() []byte {
	if x != nil {
		return x.DevEui
	}
	return nil
}

type GetDeviceActivationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI (8 bytes).
	DevEui []byte `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
}

func (x *GetDeviceActivationRequest) Reset() {
	*x = GetDeviceActivationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceActivationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceActivationRequest) ProtoMessage() {}

func (x *GetDeviceActivationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceActivationRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceActivationRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{29}
}

func (x *GetDeviceActivationRequest) GetDevEui() []byte {
	if x != nil {
		return x.DevEui
	}
	return nil
}

type GetDeviceActivationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device-activation object.
	DeviceActivation *DeviceActivation `protobuf:"bytes,1,opt,name=device_activation,json=deviceActivation,proto3" json:"device_activation,omitempty"`
}

func (x *GetDeviceActivationResponse) Reset() {
	*x = GetDeviceActivationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceActivationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceActivationResponse) ProtoMessage() {}

func (x *GetDeviceActivationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceActivationResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceActivationResponse) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{30}
}

func (x *GetDeviceActivationResponse) GetDeviceActivation() *DeviceActivation {
	if x != nil {
		return x.DeviceActivation
	}
	return nil
}

type GetRandomDevAddrResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Random device address (DevAddr).
	// Note that this includes the NetID prefix of the network-server.
	DevAddr []byte `protobuf:"bytes,1,opt,name=dev_addr,json=devAddr,proto3" json:"dev_addr,omitempty"`
}

func (x *GetRandomDevAddrResponse) Reset() {
	*x = GetRandomDevAddrResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRandomDevAddrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRandomDevAddrResponse) ProtoMessage() {}

func (x *GetRandomDevAddrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRandomDevAddrResponse.ProtoReflect.Descriptor instead.
func (*GetRandomDevAddrResponse) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{31}
}

func (x *GetRandomDevAddrResponse) GetDevAddr() []byte {
	if x != nil {
		return x.DevAddr
	}
	return nil
}

type CreateMACCommandQueueItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DevEUI EUI (8 bytes).
	DevEui []byte `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// Command identifier (specified by the LoRaWAN specs).
	Cid uint32 `protobuf:"varint,4,opt,name=cid,proto3" json:"cid,omitempty"`
	// MAC-command(s). In case multiple payloads are defined, then they
	// are always sent within a single frame.
	Commands [][]byte `protobuf:"bytes,5,rep,name=commands,proto3" json:"commands,omitempty"`
}

func (x *CreateMACCommandQueueItemRequest) Reset() {
	*x = CreateMACCommandQueueItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMACCommandQueueItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMACCommandQueueItemRequest) ProtoMessage() {}

func (x *CreateMACCommandQueueItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMACCommandQueueItemRequest.ProtoReflect.Descriptor instead.
func (*CreateMACCommandQueueItemRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{32}
}

func (x *CreateMACCommandQueueItemRequest) GetDevEui() []byte {
	if x != nil {
		return x.DevEui
	}
	return nil
}

func (x *CreateMACCommandQueueItemRequest) GetCid() uint32 {
	if x != nil {
		return x.Cid
	}
	return 0
}

func (x *CreateMACCommandQueueItemRequest) GetCommands() [][]byte {
	if x != nil {
		return x.Commands
	}
	return nil
}

type SendProprietaryPayloadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MACPayload of the proprietary LoRaWAN frame.
	MacPayload []byte `protobuf:"bytes,1,opt,name=mac_payload,json=macPayload,proto3" json:"mac_payload,omitempty"`
	// MIC of the proprietary LoRaWAN frame (must be 4 bytes).
	Mic []byte `protobuf:"bytes,2,opt,name=mic,proto3" json:"mic,omitempty"`
	// Gateway MAC address(es) to use for transmitting the LoRaWAN frame.
	GatewayMacs [][]byte `protobuf:"bytes,3,rep,name=gateway_macs,json=gatewayMacs,proto3" json:"gateway_macs,omitempty"`
	// Set to true for sending as a gateway, or false for sending as a node.
	// In the latter case the frame will be received by other gateways.
	PolarizationInversion bool `protobuf:"varint,4,opt,name=polarization_inversion,json=polarizationInversion,proto3" json:"polarization_inversion,omitempty"`
	// Frequency (Hz) to use for the transmission.
	Frequency uint32 `protobuf:"varint,5,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// Data-rate to use for the transmission.
	Dr uint32 `protobuf:"varint,6,opt,name=dr,proto3" json:"dr,omitempty"`
}

func (x *SendProprietaryPayloadRequest) Reset() {
	*x = SendProprietaryPayloadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendProprietaryPayloadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendProprietaryPayloadRequest) ProtoMessage() {}

func (x *SendProprietaryPayloadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendProprietaryPayloadRequest.ProtoReflect.Descriptor instead.
func (*SendProprietaryPayloadRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{33}
}

func (x *SendProprietaryPayloadRequest) GetMacPayload() []byte {
	if x != nil {
		return x.MacPayload
	}
	return nil
}

func (x *SendProprietaryPayloadRequest) GetMic() []byte {
	if x != nil {
		return x.Mic
	}
	return nil
}

func (x *SendProprietaryPayloadRequest) GetGatewayMacs() [][]byte {
	if x != nil {
		return x.GatewayMacs
	}
	return nil
}

func (x *SendProprietaryPayloadRequest) GetPolarizationInversion() bool {
	if x != nil {
		return x.PolarizationInversion
	}
	return false
}

func (x *SendProprietaryPayloadRequest) GetFrequency() uint32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *SendProprietaryPayloadRequest) GetDr() uint32 {
	if x != nil {
		return x.Dr
	}
	return 0
}

type Gateway struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gateway ID (8 bytes EUI64).
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Gateway location.
	Location *common.Location `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
	// ID of the gateway-profile (optional).
	GatewayProfileId []byte `protobuf:"bytes,3,opt,name=gateway_profile_id,json=gatewayProfileId,proto3" json:"gateway_profile_id,omitempty"`
	// Gateway boards configuration (optional).
	// This is (currently) only needed when the gateway supports the fine-timestamp
	// and you you would like to add the FPGA ID to the gateway meta-data or would
	// like ChirpStack Network Server to decrypt the fine-timestamp.
	Boards []*GatewayBoard `protobuf:"bytes,4,rep,name=boards,proto3" json:"boards,omitempty"`
	// Routing Profile ID.
	// The routing-profile ID defines to which application-server statistical
	// data for this gateway is forwarded.
	RoutingProfileId []byte `protobuf:"bytes,5,opt,name=routing_profile_id,json=routingProfileId,proto3" json:"routing_profile_id,omitempty"`
	// Service-profile ID (optional).
	ServiceProfileId []byte `protobuf:"bytes,6,opt,name=service_profile_id,json=serviceProfileId,proto3" json:"service_profile_id,omitempty"`
	// if suspended flag is set then all received packets from devices related to
	// this gateway are droped (UL, DL) without any logging
	Suspended bool `protobuf:"varint,7,opt,name=suspended,proto3" json:"suspended,omitempty"`
}

func (x *Gateway) Reset() {
	*x = Gateway{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gateway) ProtoMessage() {}

func (x *Gateway) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gateway.ProtoReflect.Descriptor instead.
func (*Gateway) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{34}
}

func (x *Gateway) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Gateway) GetLocation() *common.Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Gateway) GetGatewayProfileId() []byte {
	if x != nil {
		return x.GatewayProfileId
	}
	return nil
}

func (x *Gateway) GetBoards() []*GatewayBoard {
	if x != nil {
		return x.Boards
	}
	return nil
}

func (x *Gateway) GetRoutingProfileId() []byte {
	if x != nil {
		return x.RoutingProfileId
	}
	return nil
}

func (x *Gateway) GetServiceProfileId() []byte {
	if x != nil {
		return x.ServiceProfileId
	}
	return nil
}

func (x *Gateway) GetSuspended() bool {
	if x != nil {
		return x.Suspended
	}
	return false
}

type GatewayMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gateway ID (8 bytes EUI64).
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// the routing profile id is about routing to as. Nothing to do with rp in as itself
	RoutingProfileId []byte `protobuf:"bytes,2,opt,name=routing_profile_id,json=routingProfileId,proto3" json:"routing_profile_id,omitempty"`
	GatewayProfileId []byte `protobuf:"bytes,3,opt,name=gateway_profile_id,json=gatewayProfileId,proto3" json:"gateway_profile_id,omitempty"`
	ServiceProfileId []byte `protobuf:"bytes,4,opt,name=service_profile_id,json=serviceProfileId,proto3" json:"service_profile_id,omitempty"`
	// private gateways serve only devices with the same profile
	IsPrivate bool `protobuf:"varint,5,opt,name=is_private,json=isPrivate,proto3" json:"is_private,omitempty"`
	Suspended bool `protobuf:"varint,6,opt,name=suspended,proto3" json:"suspended,omitempty"`
	// Gateway boards configuration (optional).
	// This is (currently) only needed when the gateway supports the fine-timestamp
	// and you you would like to add the FPGA ID to the gateway meta-data or would
	// like ChirpStack Network Server to decrypt the fine-timestamp.
	Boards []*GatewayBoard `protobuf:"bytes,7,rep,name=boards,proto3" json:"boards,omitempty"`
	// Gateway location.
	Location *common.Location `protobuf:"bytes,8,opt,name=location,proto3" json:"location,omitempty"`
	// First seen timestamp.
	FirstSeenAt *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=first_seen_at,json=firstSeenAt,proto3" json:"first_seen_at,omitempty"`
	// Last uplink timestamp.
	LastUplinkAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=last_uplink_at,json=lastUplinkAt,proto3" json:"last_uplink_at,omitempty"`
	// last statistics recieved at
	LastStatsAt *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=last_stats_at,json=lastStatsAt,proto3" json:"last_stats_at,omitempty"`
	// last gps location recieved at the time within stats packet
	GpsSeenAt *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=gps_seen_at,json=gpsSeenAt,proto3" json:"gps_seen_at,omitempty"`
	// meta data recieved within stats packet
	MetaData map[string]string `protobuf:"bytes,13,rep,name=meta_data,json=metaData,proto3" json:"meta_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GatewayMeta) Reset() {
	*x = GatewayMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayMeta) ProtoMessage() {}

func (x *GatewayMeta) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayMeta.ProtoReflect.Descriptor instead.
func (*GatewayMeta) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{35}
}

func (x *GatewayMeta) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GatewayMeta) GetRoutingProfileId() []byte {
	if x != nil {
		return x.RoutingProfileId
	}
	return nil
}

func (x *GatewayMeta) GetGatewayProfileId() []byte {
	if x != nil {
		return x.GatewayProfileId
	}
	return nil
}

func (x *GatewayMeta) GetServiceProfileId() []byte {
	if x != nil {
		return x.ServiceProfileId
	}
	return nil
}

func (x *GatewayMeta) GetIsPrivate() bool {
	if x != nil {
		return x.IsPrivate
	}
	return false
}

func (x *GatewayMeta) GetSuspended() bool {
	if x != nil {
		return x.Suspended
	}
	return false
}

func (x *GatewayMeta) GetBoards() []*GatewayBoard {
	if x != nil {
		return x.Boards
	}
	return nil
}

func (x *GatewayMeta) GetLocation() *common.Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *GatewayMeta) GetFirstSeenAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstSeenAt
	}
	return nil
}

func (x *GatewayMeta) GetLastUplinkAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUplinkAt
	}
	return nil
}

func (x *GatewayMeta) GetLastStatsAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastStatsAt
	}
	return nil
}

func (x *GatewayMeta) GetGpsSeenAt() *timestamppb.Timestamp {
	if x != nil {
		return x.GpsSeenAt
	}
	return nil
}

func (x *GatewayMeta) GetMetaData() map[string]string {
	if x != nil {
		return x.MetaData
	}
	return nil
}

type GatewayBoard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FPGA ID of the gateway (8 bytes) (optional).
	FpgaId []byte `protobuf:"bytes,1,opt,name=fpga_id,json=fpgaId,proto3" json:"fpga_id,omitempty"`
	// Fine-timestamp AES decryption key (16 bytes) (optional).
	FineTimestampKey []byte `protobuf:"bytes,2,opt,name=fine_timestamp_key,json=fineTimestampKey,proto3" json:"fine_timestamp_key,omitempty"`
}

func (x *GatewayBoard) Reset() {
	*x = GatewayBoard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayBoard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayBoard) ProtoMessage() {}

func (x *GatewayBoard) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayBoard.ProtoReflect.Descriptor instead.
func (*GatewayBoard) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{36}
}

func (x *GatewayBoard) GetFpgaId() []byte {
	if x != nil {
		return x.FpgaId
	}
	return nil
}

func (x *GatewayBoard) GetFineTimestampKey() []byte {
	if x != nil {
		return x.FineTimestampKey
	}
	return nil
}

type CreateGatewayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gateway object to create.
	Gateway *Gateway `protobuf:"bytes,1,opt,name=gateway,proto3" json:"gateway,omitempty"`
}

func (x *CreateGatewayRequest) Reset() {
	*x = CreateGatewayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGatewayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGatewayRequest) ProtoMessage() {}

func (x *CreateGatewayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGatewayRequest.ProtoReflect.Descriptor instead.
func (*CreateGatewayRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{37}
}

func (x *CreateGatewayRequest) GetGateway() *Gateway {
	if x != nil {
		return x.Gateway
	}
	return nil
}

type GetGatewayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gateway ID.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetGatewayRequest) Reset() {
	*x = GetGatewayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGatewayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGatewayRequest) ProtoMessage() {}

func (x *GetGatewayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGatewayRequest.ProtoReflect.Descriptor instead.
func (*GetGatewayRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{38}
}

func (x *GetGatewayRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type GetGatewayMetaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gateway object.
	GatewayMeta *GatewayMeta `protobuf:"bytes,1,opt,name=gateway_meta,json=gatewayMeta,proto3" json:"gateway_meta,omitempty"`
}

func (x *GetGatewayMetaResponse) Reset() {
	*x = GetGatewayMetaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGatewayMetaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGatewayMetaResponse) ProtoMessage() {}

func (x *GetGatewayMetaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGatewayMetaResponse.ProtoReflect.Descriptor instead.
func (*GetGatewayMetaResponse) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{39}
}

func (x *GetGatewayMetaResponse) GetGatewayMeta() *GatewayMeta {
	if x != nil {
		return x.GatewayMeta
	}
	return nil
}

type GetGatewayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Created at timestamp.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Last update timestamp.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	// Gateway object.
	Gateway *Gateway `protobuf:"bytes,3,opt,name=gateway,proto3" json:"gateway,omitempty"`
	// meta information from redis
	Meta *GatewayMeta `protobuf:"bytes,4,opt,name=meta,proto3" json:"meta,omitempty"`
}

func (x *GetGatewayResponse) Reset() {
	*x = GetGatewayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGatewayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGatewayResponse) ProtoMessage() {}

func (x *GetGatewayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGatewayResponse.ProtoReflect.Descriptor instead.
func (*GetGatewayResponse) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{40}
}

func (x *GetGatewayResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GetGatewayResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *GetGatewayResponse) GetGateway() *Gateway {
	if x != nil {
		return x.Gateway
	}
	return nil
}

func (x *GetGatewayResponse) GetMeta() *GatewayMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

type UpdateGatewayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gateway object to update.
	Gateway *Gateway `protobuf:"bytes,1,opt,name=gateway,proto3" json:"gateway,omitempty"`
}

func (x *UpdateGatewayRequest) Reset() {
	*x = UpdateGatewayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGatewayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGatewayRequest) ProtoMessage() {}

func (x *UpdateGatewayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGatewayRequest.ProtoReflect.Descriptor instead.
func (*UpdateGatewayRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{41}
}

func (x *UpdateGatewayRequest) GetGateway() *Gateway {
	if x != nil {
		return x.Gateway
	}
	return nil
}

type DeleteGatewayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gateway ID.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteGatewayRequest) Reset() {
	*x = DeleteGatewayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGatewayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGatewayRequest) ProtoMessage() {}

func (x *DeleteGatewayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGatewayRequest.ProtoReflect.Descriptor instead.
func (*DeleteGatewayRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{42}
}

func (x *DeleteGatewayRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type GenerateGatewayClientCertificateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gateway ID.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GenerateGatewayClientCertificateRequest) Reset() {
	*x = GenerateGatewayClientCertificateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateGatewayClientCertificateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateGatewayClientCertificateRequest) ProtoMessage() {}

func (x *GenerateGatewayClientCertificateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateGatewayClientCertificateRequest.ProtoReflect.Descriptor instead.
func (*GenerateGatewayClientCertificateRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{43}
}

func (x *GenerateGatewayClientCertificateRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type GenerateGatewayClientCertificateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TLS certificate.
	TlsCert []byte `protobuf:"bytes,1,opt,name=tls_cert,json=tlsCert,proto3" json:"tls_cert,omitempty"`
	// TLS key.
	TlsKey []byte `protobuf:"bytes,2,opt,name=tls_key,json=tlsKey,proto3" json:"tls_key,omitempty"`
	// CA certificate.
	CaCert []byte `protobuf:"bytes,3,opt,name=ca_cert,json=caCert,proto3" json:"ca_cert,omitempty"`
	// Expires at defines the expiration date of the certificate.
	ExpiresAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
}

func (x *GenerateGatewayClientCertificateResponse) Reset() {
	*x = GenerateGatewayClientCertificateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenerateGatewayClientCertificateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerateGatewayClientCertificateResponse) ProtoMessage() {}

func (x *GenerateGatewayClientCertificateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerateGatewayClientCertificateResponse.ProtoReflect.Descriptor instead.
func (*GenerateGatewayClientCertificateResponse) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{44}
}

func (x *GenerateGatewayClientCertificateResponse) GetTlsCert() []byte {
	if x != nil {
		return x.TlsCert
	}
	return nil
}

func (x *GenerateGatewayClientCertificateResponse) GetTlsKey() []byte {
	if x != nil {
		return x.TlsKey
	}
	return nil
}

func (x *GenerateGatewayClientCertificateResponse) GetCaCert() []byte {
	if x != nil {
		return x.CaCert
	}
	return nil
}

func (x *GenerateGatewayClientCertificateResponse) GetExpiresAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresAt
	}
	return nil
}

type GatewayStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp of the (aggregated) measurement.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Packets received by the gateway.
	RxPacketsReceived int32 `protobuf:"varint,2,opt,name=rx_packets_received,json=rxPacketsReceived,proto3" json:"rx_packets_received,omitempty"`
	// Packets received by the gateway that passed the CRC check.
	RxPacketsReceivedOk int32 `protobuf:"varint,3,opt,name=rx_packets_received_ok,json=rxPacketsReceivedOk,proto3" json:"rx_packets_received_ok,omitempty"`
	// Packets received by the gateway for transmission.
	TxPacketsReceived int32 `protobuf:"varint,4,opt,name=tx_packets_received,json=txPacketsReceived,proto3" json:"tx_packets_received,omitempty"`
	// Packets transmitted by the gateway.
	TxPacketsEmitted int32 `protobuf:"varint,5,opt,name=tx_packets_emitted,json=txPacketsEmitted,proto3" json:"tx_packets_emitted,omitempty"`
}

func (x *GatewayStats) Reset() {
	*x = GatewayStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayStats) ProtoMessage() {}

func (x *GatewayStats) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayStats.ProtoReflect.Descriptor instead.
func (*GatewayStats) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{45}
}

func (x *GatewayStats) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *GatewayStats) GetRxPacketsReceived() int32 {
	if x != nil {
		return x.RxPacketsReceived
	}
	return 0
}

func (x *GatewayStats) GetRxPacketsReceivedOk() int32 {
	if x != nil {
		return x.RxPacketsReceivedOk
	}
	return 0
}

func (x *GatewayStats) GetTxPacketsReceived() int32 {
	if x != nil {
		return x.TxPacketsReceived
	}
	return 0
}

func (x *GatewayStats) GetTxPacketsEmitted() int32 {
	if x != nil {
		return x.TxPacketsEmitted
	}
	return 0
}

type GetGatewayStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MAC address of the gateway.
	GatewayId []byte `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	// Aggregation interval.
	Interval AggregationInterval `protobuf:"varint,2,opt,name=interval,proto3,enum=ns.AggregationInterval" json:"interval,omitempty"`
	// Timestamp to start from.
	StartTimestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_timestamp,json=startTimestamp,proto3" json:"start_timestamp,omitempty"`
	// Timestamp until to get from.
	EndTimestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=end_timestamp,json=endTimestamp,proto3" json:"end_timestamp,omitempty"`
}

func (x *GetGatewayStatsRequest) Reset() {
	*x = GetGatewayStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGatewayStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGatewayStatsRequest) ProtoMessage() {}

func (x *GetGatewayStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGatewayStatsRequest.ProtoReflect.Descriptor instead.
func (*GetGatewayStatsRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{46}
}

func (x *GetGatewayStatsRequest) GetGatewayId() []byte {
	if x != nil {
		return x.GatewayId
	}
	return nil
}

func (x *GetGatewayStatsRequest) GetInterval() AggregationInterval {
	if x != nil {
		return x.Interval
	}
	return AggregationInterval_SECOND
}

func (x *GetGatewayStatsRequest) GetStartTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTimestamp
	}
	return nil
}

func (x *GetGatewayStatsRequest) GetEndTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTimestamp
	}
	return nil
}

type GetGatewayStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result []*GatewayStats `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *GetGatewayStatsResponse) Reset() {
	*x = GetGatewayStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGatewayStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGatewayStatsResponse) ProtoMessage() {}

func (x *GetGatewayStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGatewayStatsResponse.ProtoReflect.Descriptor instead.
func (*GetGatewayStatsResponse) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{47}
}

func (x *GetGatewayStatsResponse) GetResult() []*GatewayStats {
	if x != nil {
		return x.Result
	}
	return nil
}

type DeviceQueueItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DevEUI of the device.
	DevEui []byte `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// The encrypted FRMPayload bytes.
	FrmPayload []byte `protobuf:"bytes,2,opt,name=frm_payload,json=frmPayload,proto3" json:"frm_payload,omitempty"`
	// The FCnt of the payload.
	FCnt uint32 `protobuf:"varint,3,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	// The FPort of the payload.
	FPort uint32 `protobuf:"varint,4,opt,name=f_port,json=fPort,proto3" json:"f_port,omitempty"`
	// When set to true, ChirpStack Network Server will wait for the device to ack the
	// received frame.
	Confirmed bool `protobuf:"varint,5,opt,name=confirmed,proto3" json:"confirmed,omitempty"`
	// Device address (as known by the application-server).
	// It will be used to validate that the application-server is
	// using the correct security context of the device. As on OTAA, there
	// is a gap between the activation and the delivery of the AppSKey to the
	// application-server, there is a possibility that the application-server
	// tries to enqueue payloads encrypted with the old session-key.
	// deprecated
	DevAddr []byte `protobuf:"bytes,6,opt,name=dev_addr,json=devAddr,proto3" json:"dev_addr,omitempty"`
	// Time to live (in seconds). You canspecify the maximum time in queue for the item
	Ttl uint32 `protobuf:"varint,7,opt,name=ttl,proto3" json:"ttl,omitempty"`
	// optional. the id was generated on client's side to control tx
	MessageId string `protobuf:"bytes,8,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// Non encrypted FRMPayload bytes.
	NonEncrPl []byte `protobuf:"bytes,9,opt,name=non_encr_pl,json=nonEncrPl,proto3" json:"non_encr_pl,omitempty"`
	// created at timestamp.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// timeout after timestamp.
	TimeoutAfter *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=timeout_after,json=timeoutAfter,proto3" json:"timeout_after,omitempty"`
}

func (x *DeviceQueueItem) Reset() {
	*x = DeviceQueueItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceQueueItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceQueueItem) ProtoMessage() {}

func (x *DeviceQueueItem) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceQueueItem.ProtoReflect.Descriptor instead.
func (*DeviceQueueItem) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{48}
}

func (x *DeviceQueueItem) GetDevEui() []byte {
	if x != nil {
		return x.DevEui
	}
	return nil
}

func (x *DeviceQueueItem) GetFrmPayload() []byte {
	if x != nil {
		return x.FrmPayload
	}
	return nil
}

func (x *DeviceQueueItem) GetFCnt() uint32 {
	if x != nil {
		return x.FCnt
	}
	return 0
}

func (x *DeviceQueueItem) GetFPort() uint32 {
	if x != nil {
		return x.FPort
	}
	return 0
}

func (x *DeviceQueueItem) GetConfirmed() bool {
	if x != nil {
		return x.Confirmed
	}
	return false
}

func (x *DeviceQueueItem) GetDevAddr() []byte {
	if x != nil {
		return x.DevAddr
	}
	return nil
}

func (x *DeviceQueueItem) GetTtl() uint32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *DeviceQueueItem) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *DeviceQueueItem) GetNonEncrPl() []byte {
	if x != nil {
		return x.NonEncrPl
	}
	return nil
}

func (x *DeviceQueueItem) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DeviceQueueItem) GetTimeoutAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.TimeoutAfter
	}
	return nil
}

type CreateDeviceQueueItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item *DeviceQueueItem `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *CreateDeviceQueueItemRequest) Reset() {
	*x = CreateDeviceQueueItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateDeviceQueueItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateDeviceQueueItemRequest) ProtoMessage() {}

func (x *CreateDeviceQueueItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateDeviceQueueItemRequest.ProtoReflect.Descriptor instead.
func (*CreateDeviceQueueItemRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{49}
}

func (x *CreateDeviceQueueItemRequest) GetItem() *DeviceQueueItem {
	if x != nil {
		return x.Item
	}
	return nil
}

type FlushDeviceQueueForDevEUIRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DevEUI of the device.
	DevEui []byte `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
}

func (x *FlushDeviceQueueForDevEUIRequest) Reset() {
	*x = FlushDeviceQueueForDevEUIRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushDeviceQueueForDevEUIRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushDeviceQueueForDevEUIRequest) ProtoMessage() {}

func (x *FlushDeviceQueueForDevEUIRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushDeviceQueueForDevEUIRequest.ProtoReflect.Descriptor instead.
func (*FlushDeviceQueueForDevEUIRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{50}
}

func (x *FlushDeviceQueueForDevEUIRequest) GetDevEui() []byte {
	if x != nil {
		return x.DevEui
	}
	return nil
}

type GetDeviceQueueItemsForDevEUIRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DevEUI of the device.
	DevEui []byte `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// Return only the count, not the result-set.
	CountOnly bool `protobuf:"varint,2,opt,name=count_only,json=countOnly,proto3" json:"count_only,omitempty"`
}

func (x *GetDeviceQueueItemsForDevEUIRequest) Reset() {
	*x = GetDeviceQueueItemsForDevEUIRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceQueueItemsForDevEUIRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceQueueItemsForDevEUIRequest) ProtoMessage() {}

func (x *GetDeviceQueueItemsForDevEUIRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceQueueItemsForDevEUIRequest.ProtoReflect.Descriptor instead.
func (*GetDeviceQueueItemsForDevEUIRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{51}
}

func (x *GetDeviceQueueItemsForDevEUIRequest) GetDevEui() []byte {
	if x != nil {
		return x.DevEui
	}
	return nil
}

func (x *GetDeviceQueueItemsForDevEUIRequest) GetCountOnly() bool {
	if x != nil {
		return x.CountOnly
	}
	return false
}

type GetDeviceQueueItemsForDevEUIResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The device queue items.
	Items []*DeviceQueueItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	// Total number of items in the queue.
	TotalCount uint32 `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
}

func (x *GetDeviceQueueItemsForDevEUIResponse) Reset() {
	*x = GetDeviceQueueItemsForDevEUIResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDeviceQueueItemsForDevEUIResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDeviceQueueItemsForDevEUIResponse) ProtoMessage() {}

func (x *GetDeviceQueueItemsForDevEUIResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDeviceQueueItemsForDevEUIResponse.ProtoReflect.Descriptor instead.
func (*GetDeviceQueueItemsForDevEUIResponse) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{52}
}

func (x *GetDeviceQueueItemsForDevEUIResponse) GetItems() []*DeviceQueueItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *GetDeviceQueueItemsForDevEUIResponse) GetTotalCount() uint32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

type GetNextDownlinkFCntForDevEUIRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DevEUI of the device.
	DevEui []byte `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
}

func (x *GetNextDownlinkFCntForDevEUIRequest) Reset() {
	*x = GetNextDownlinkFCntForDevEUIRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNextDownlinkFCntForDevEUIRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNextDownlinkFCntForDevEUIRequest) ProtoMessage() {}

func (x *GetNextDownlinkFCntForDevEUIRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNextDownlinkFCntForDevEUIRequest.ProtoReflect.Descriptor instead.
func (*GetNextDownlinkFCntForDevEUIRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{53}
}

func (x *GetNextDownlinkFCntForDevEUIRequest) GetDevEui() []byte {
	if x != nil {
		return x.DevEui
	}
	return nil
}

type GetNextDownlinkFCntForDevEUIResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The frame-counter to use.
	FCnt uint32 `protobuf:"varint,1,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
}

func (x *GetNextDownlinkFCntForDevEUIResponse) Reset() {
	*x = GetNextDownlinkFCntForDevEUIResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNextDownlinkFCntForDevEUIResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNextDownlinkFCntForDevEUIResponse) ProtoMessage() {}

func (x *GetNextDownlinkFCntForDevEUIResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNextDownlinkFCntForDevEUIResponse.ProtoReflect.Descriptor instead.
func (*GetNextDownlinkFCntForDevEUIResponse) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{54}
}

func (x *GetNextDownlinkFCntForDevEUIResponse) GetFCnt() uint32 {
	if x != nil {
		return x.FCnt
	}
	return 0
}

type FCntInResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The frame-counter.
	FCnt uint32 `protobuf:"varint,1,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
}

func (x *FCntInResponse) Reset() {
	*x = FCntInResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FCntInResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FCntInResponse) ProtoMessage() {}

func (x *FCntInResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FCntInResponse.ProtoReflect.Descriptor instead.
func (*FCntInResponse) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{55}
}

func (x *FCntInResponse) GetFCnt() uint32 {
	if x != nil {
		return x.FCnt
	}
	return 0
}

type UplinkFrameLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PHYPayload.
	PhyPayload []byte `protobuf:"bytes,1,opt,name=phy_payload,json=phyPayload,proto3" json:"phy_payload,omitempty"`
	// TX meta-data.
	TxInfo *gw.UplinkTXInfo `protobuf:"bytes,2,opt,name=tx_info,json=txInfo,proto3" json:"tx_info,omitempty"`
	// RX meta-data.
	RxInfo []*gw.UplinkRXInfo `protobuf:"bytes,3,rep,name=rx_info,json=rxInfo,proto3" json:"rx_info,omitempty"`
	// Message type.
	MType common.MType `protobuf:"varint,4,opt,name=m_type,json=mType,proto3,enum=common.MType" json:"m_type,omitempty"`
	// Device address (optional).
	DevAddr []byte `protobuf:"bytes,5,opt,name=dev_addr,json=devAddr,proto3" json:"dev_addr,omitempty"`
	// Device EUI (optional).
	DevEui []byte `protobuf:"bytes,6,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// Published at timestamp.
	PublishedAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
}

func (x *UplinkFrameLog) Reset() {
	*x = UplinkFrameLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UplinkFrameLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UplinkFrameLog) ProtoMessage() {}

func (x *UplinkFrameLog) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UplinkFrameLog.ProtoReflect.Descriptor instead.
func (*UplinkFrameLog) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{56}
}

func (x *UplinkFrameLog) GetPhyPayload() []byte {
	if x != nil {
		return x.PhyPayload
	}
	return nil
}

func (x *UplinkFrameLog) GetTxInfo() *gw.UplinkTXInfo {
	if x != nil {
		return x.TxInfo
	}
	return nil
}

func (x *UplinkFrameLog) GetRxInfo() []*gw.UplinkRXInfo {
	if x != nil {
		return x.RxInfo
	}
	return nil
}

func (x *UplinkFrameLog) GetMType() common.MType {
	if x != nil {
		return x.MType
	}
	return common.MType(0)
}

func (x *UplinkFrameLog) GetDevAddr() []byte {
	if x != nil {
		return x.DevAddr
	}
	return nil
}

func (x *UplinkFrameLog) GetDevEui() []byte {
	if x != nil {
		return x.DevEui
	}
	return nil
}

func (x *UplinkFrameLog) GetPublishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishedAt
	}
	return nil
}

type DownlinkFrameLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PHYPayload.
	PhyPayload []byte `protobuf:"bytes,1,opt,name=phy_payload,json=phyPayload,proto3" json:"phy_payload,omitempty"`
	// TX meta-data.
	TxInfo *gw.DownlinkTXInfo `protobuf:"bytes,2,opt,name=tx_info,json=txInfo,proto3" json:"tx_info,omitempty"`
	// Token (uint16 value).
	// Deprecated: replaced by downlink_id.
	Token uint32 `protobuf:"varint,3,opt,name=token,proto3" json:"token,omitempty"`
	// Downlink ID (UUID).
	DownlinkId []byte `protobuf:"bytes,4,opt,name=downlink_id,json=downlinkID,proto3" json:"downlink_id,omitempty"`
	// Gateway ID.
	GatewayId []byte `protobuf:"bytes,5,opt,name=gateway_id,json=gatewayID,proto3" json:"gateway_id,omitempty"`
	// Message type.
	MType common.MType `protobuf:"varint,6,opt,name=m_type,json=mType,proto3,enum=common.MType" json:"m_type,omitempty"`
	// Device address (optional).
	DevAddr []byte `protobuf:"bytes,7,opt,name=dev_addr,json=devAddr,proto3" json:"dev_addr,omitempty"`
	// Device EUI (optional).
	DevEui []byte `protobuf:"bytes,8,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// Published at timestamp.
	PublishedAt *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=published_at,json=publishedAt,proto3" json:"published_at,omitempty"`
	// rate limit
	Limit RateLimit `protobuf:"varint,10,opt,name=limit,proto3,enum=ns.RateLimit" json:"limit,omitempty"`
	// non-encrypted frame payload
	FrmPayload []byte `protobuf:"bytes,11,opt,name=frm_payload,json=frmPayload,proto3" json:"frm_payload,omitempty"`
}

func (x *DownlinkFrameLog) Reset() {
	*x = DownlinkFrameLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DownlinkFrameLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DownlinkFrameLog) ProtoMessage() {}

func (x *DownlinkFrameLog) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DownlinkFrameLog.ProtoReflect.Descriptor instead.
func (*DownlinkFrameLog) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{57}
}

func (x *DownlinkFrameLog) GetPhyPayload() []byte {
	if x != nil {
		return x.PhyPayload
	}
	return nil
}

func (x *DownlinkFrameLog) GetTxInfo() *gw.DownlinkTXInfo {
	if x != nil {
		return x.TxInfo
	}
	return nil
}

func (x *DownlinkFrameLog) GetToken() uint32 {
	if x != nil {
		return x.Token
	}
	return 0
}

func (x *DownlinkFrameLog) GetDownlinkId() []byte {
	if x != nil {
		return x.DownlinkId
	}
	return nil
}

func (x *DownlinkFrameLog) GetGatewayId() []byte {
	if x != nil {
		return x.GatewayId
	}
	return nil
}

func (x *DownlinkFrameLog) GetMType() common.MType {
	if x != nil {
		return x.MType
	}
	return common.MType(0)
}

func (x *DownlinkFrameLog) GetDevAddr() []byte {
	if x != nil {
		return x.DevAddr
	}
	return nil
}

func (x *DownlinkFrameLog) GetDevEui() []byte {
	if x != nil {
		return x.DevEui
	}
	return nil
}

func (x *DownlinkFrameLog) GetPublishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.PublishedAt
	}
	return nil
}

func (x *DownlinkFrameLog) GetLimit() RateLimit {
	if x != nil {
		return x.Limit
	}
	return RateLimit_Unlimited
}

func (x *DownlinkFrameLog) GetFrmPayload() []byte {
	if x != nil {
		return x.FrmPayload
	}
	return nil
}

type DeviceActivationContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Assigned Device Address.
	DevAddr []byte `protobuf:"bytes,1,opt,name=dev_addr,json=devAddr,proto3" json:"dev_addr,omitempty"`
	// Application session key (envelope).
	AppSKey *common.KeyEnvelope `protobuf:"bytes,2,opt,name=app_s_key,json=appSKey,proto3" json:"app_s_key,omitempty"`
}

func (x *DeviceActivationContext) Reset() {
	*x = DeviceActivationContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceActivationContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceActivationContext) ProtoMessage() {}

func (x *DeviceActivationContext) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceActivationContext.ProtoReflect.Descriptor instead.
func (*DeviceActivationContext) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{58}
}

func (x *DeviceActivationContext) GetDevAddr() []byte {
	if x != nil {
		return x.DevAddr
	}
	return nil
}

func (x *DeviceActivationContext) GetAppSKey() *common.KeyEnvelope {
	if x != nil {
		return x.AppSKey
	}
	return nil
}

// StreamUplink msg for streaming uplinks via redis stream
type StreamUplink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DevEUI EUI (8 bytes).
	DevEui []byte `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// Join EUI used for OTAA activation (8 bytes).
	JoinEui []byte `protobuf:"bytes,2,opt,name=join_eui,json=joinEui,proto3" json:"join_eui,omitempty"`
	// Frame-counter.
	FCnt uint32 `protobuf:"varint,3,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	// Frame port.
	FPort uint32 `protobuf:"varint,4,opt,name=f_port,json=fPort,proto3" json:"f_port,omitempty"`
	// ADR enabled.
	Adr bool `protobuf:"varint,5,opt,name=adr,proto3" json:"adr,omitempty"`
	// Data-rate.
	Dr uint32 `protobuf:"varint,6,opt,name=dr,proto3" json:"dr,omitempty"`
	// TX meta-data.
	TxInfo *gw.UplinkTXInfo `protobuf:"bytes,7,opt,name=tx_info,json=txInfo,proto3" json:"tx_info,omitempty"`
	// RX meta-data.
	RxInfo []*gw.UplinkRXInfo `protobuf:"bytes,8,rep,name=rx_info,json=rxInfo,proto3" json:"rx_info,omitempty"`
	// Received data (encrypted frm payload).
	Data []byte `protobuf:"bytes,9,opt,name=data,proto3" json:"data,omitempty"`
	// Device activation context.
	// This field is only set on the first uplink frame when the security
	// context has changed (e.g. a new OTAA (re)activation).
	DeviceActivationContext *DeviceActivationContext `protobuf:"bytes,10,opt,name=device_activation_context,json=deviceActivationContext,proto3" json:"device_activation_context,omitempty"`
	// Uplink was of type confirmed.
	ConfirmedUplink bool `protobuf:"varint,11,opt,name=confirmed_uplink,json=confirmedUplink,proto3" json:"confirmed_uplink,omitempty"`
	// true if recieved more than 2 minutes after
	Late bool `protobuf:"varint,12,opt,name=late,proto3" json:"late,omitempty"`
	// Mic. Modification
	Mic []byte `protobuf:"bytes,13,opt,name=mic,proto3" json:"mic,omitempty"`
	// time frame(s) recieved. Can be gps\fts\by server for packet with best SNR
	Time *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=time,proto3" json:"time,omitempty"`
	// limit for current uplink packet
	Limit RateLimit `protobuf:"varint,15,opt,name=limit,proto3,enum=ns.RateLimit" json:"limit,omitempty"`
	// average Packet Error Rate for last 20 packets in device_session
	Per float64 `protobuf:"fixed64,16,opt,name=per,proto3" json:"per,omitempty"`
	// average Signal to Noise Ratio for last 20 packets in device_session
	Snr float64 `protobuf:"fixed64,17,opt,name=snr,proto3" json:"snr,omitempty"`
	// average Received signal strength indication for last 20 packets in device_session
	Rssi float64 `protobuf:"fixed64,18,opt,name=rssi,proto3" json:"rssi,omitempty"`
	// current class of the device: string: "A", "B", "C"
	Class string `protobuf:"bytes,19,opt,name=class,proto3" json:"class,omitempty"`
	// PHYPayload src from RXInfo
	PhyPayload []byte `protobuf:"bytes,20,opt,name=phy_payload,json=phyPayload,proto3" json:"phy_payload,omitempty"`
	// additional information from current device-session
	DeviceSession *DeviceSession `protobuf:"bytes,21,opt,name=device_session,json=deviceSession,proto3" json:"device_session,omitempty"`
	// context id of the frame handling. In case to find it in ns-logs
	CtxId string `protobuf:"bytes,22,opt,name=ctx_id,json=ctxId,proto3" json:"ctx_id,omitempty"`
	// Received data (non encrypted frm payload).
	UnencryptedData []byte `protobuf:"bytes,23,opt,name=unencrypted_data,json=unencryptedData,proto3" json:"unencrypted_data,omitempty"`
	// organization id of the device
	Orgid int64 `protobuf:"varint,24,opt,name=orgid,proto3" json:"orgid,omitempty"`
	// organization id of main gateway (according to best signal)
	GwOrgid int64 `protobuf:"varint,25,opt,name=gw_orgid,json=gwOrgid,proto3" json:"gw_orgid,omitempty"`
	// Device address (DevAddr).
	DevAddr []byte `protobuf:"bytes,26,opt,name=dev_addr,json=devAddr,proto3" json:"dev_addr,omitempty"`
}

func (x *StreamUplink) Reset() {
	*x = StreamUplink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamUplink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamUplink) ProtoMessage() {}

func (x *StreamUplink) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamUplink.ProtoReflect.Descriptor instead.
func (*StreamUplink) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{59}
}

func (x *StreamUplink) GetDevEui() []byte {
	if x != nil {
		return x.DevEui
	}
	return nil
}

func (x *StreamUplink) GetJoinEui() []byte {
	if x != nil {
		return x.JoinEui
	}
	return nil
}

func (x *StreamUplink) GetFCnt() uint32 {
	if x != nil {
		return x.FCnt
	}
	return 0
}

func (x *StreamUplink) GetFPort() uint32 {
	if x != nil {
		return x.FPort
	}
	return 0
}

func (x *StreamUplink) GetAdr() bool {
	if x != nil {
		return x.Adr
	}
	return false
}

func (x *StreamUplink) GetDr() uint32 {
	if x != nil {
		return x.Dr
	}
	return 0
}

func (x *StreamUplink) GetTxInfo() *gw.UplinkTXInfo {
	if x != nil {
		return x.TxInfo
	}
	return nil
}

func (x *StreamUplink) GetRxInfo() []*gw.UplinkRXInfo {
	if x != nil {
		return x.RxInfo
	}
	return nil
}

func (x *StreamUplink) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *StreamUplink) GetDeviceActivationContext() *DeviceActivationContext {
	if x != nil {
		return x.DeviceActivationContext
	}
	return nil
}

func (x *StreamUplink) GetConfirmedUplink() bool {
	if x != nil {
		return x.ConfirmedUplink
	}
	return false
}

func (x *StreamUplink) GetLate() bool {
	if x != nil {
		return x.Late
	}
	return false
}

func (x *StreamUplink) GetMic() []byte {
	if x != nil {
		return x.Mic
	}
	return nil
}

func (x *StreamUplink) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *StreamUplink) GetLimit() RateLimit {
	if x != nil {
		return x.Limit
	}
	return RateLimit_Unlimited
}

func (x *StreamUplink) GetPer() float64 {
	if x != nil {
		return x.Per
	}
	return 0
}

func (x *StreamUplink) GetSnr() float64 {
	if x != nil {
		return x.Snr
	}
	return 0
}

func (x *StreamUplink) GetRssi() float64 {
	if x != nil {
		return x.Rssi
	}
	return 0
}

func (x *StreamUplink) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *StreamUplink) GetPhyPayload() []byte {
	if x != nil {
		return x.PhyPayload
	}
	return nil
}

func (x *StreamUplink) GetDeviceSession() *DeviceSession {
	if x != nil {
		return x.DeviceSession
	}
	return nil
}

func (x *StreamUplink) GetCtxId() string {
	if x != nil {
		return x.CtxId
	}
	return ""
}

func (x *StreamUplink) GetUnencryptedData() []byte {
	if x != nil {
		return x.UnencryptedData
	}
	return nil
}

func (x *StreamUplink) GetOrgid() int64 {
	if x != nil {
		return x.Orgid
	}
	return 0
}

func (x *StreamUplink) GetGwOrgid() int64 {
	if x != nil {
		return x.GwOrgid
	}
	return 0
}

func (x *StreamUplink) GetDevAddr() []byte {
	if x != nil {
		return x.DevAddr
	}
	return nil
}

// StreamDownlink msg for streaming acked downlinks via redis stream
type StreamDownlink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PHYPayload.
	PhyPayload []byte `protobuf:"bytes,1,opt,name=phy_payload,json=phyPayload,proto3" json:"phy_payload,omitempty"`
	// TX meta-data.
	TxInfo *gw.DownlinkTXInfo `protobuf:"bytes,2,opt,name=tx_info,json=txInfo,proto3" json:"tx_info,omitempty"`
	// Downlink ID (UUID).
	DownlinkId []byte `protobuf:"bytes,3,opt,name=downlink_id,json=downlinkID,proto3" json:"downlink_id,omitempty"`
	// Gateway ID.
	GatewayId []byte `protobuf:"bytes,4,opt,name=gateway_id,json=gatewayID,proto3" json:"gateway_id,omitempty"`
	// some information from current device-session
	DeviceSession *DeviceSession `protobuf:"bytes,5,opt,name=device_session,json=deviceSession,proto3" json:"device_session,omitempty"`
	// rate limit
	Limit RateLimit `protobuf:"varint,6,opt,name=limit,proto3,enum=ns.RateLimit" json:"limit,omitempty"`
	// non-encrypted frame payload.
	FrmPayload []byte `protobuf:"bytes,7,opt,name=frm_payload,json=frmPayload,proto3" json:"frm_payload,omitempty"`
	// true if frm_payload is encrypted by client
	Encrypted bool `protobuf:"varint,8,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
}

func (x *StreamDownlink) Reset() {
	*x = StreamDownlink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamDownlink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamDownlink) ProtoMessage() {}

func (x *StreamDownlink) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamDownlink.ProtoReflect.Descriptor instead.
func (*StreamDownlink) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{60}
}

func (x *StreamDownlink) GetPhyPayload() []byte {
	if x != nil {
		return x.PhyPayload
	}
	return nil
}

func (x *StreamDownlink) GetTxInfo() *gw.DownlinkTXInfo {
	if x != nil {
		return x.TxInfo
	}
	return nil
}

func (x *StreamDownlink) GetDownlinkId() []byte {
	if x != nil {
		return x.DownlinkId
	}
	return nil
}

func (x *StreamDownlink) GetGatewayId() []byte {
	if x != nil {
		return x.GatewayId
	}
	return nil
}

func (x *StreamDownlink) GetDeviceSession() *DeviceSession {
	if x != nil {
		return x.DeviceSession
	}
	return nil
}

func (x *StreamDownlink) GetLimit() RateLimit {
	if x != nil {
		return x.Limit
	}
	return RateLimit_Unlimited
}

func (x *StreamDownlink) GetFrmPayload() []byte {
	if x != nil {
		return x.FrmPayload
	}
	return nil
}

func (x *StreamDownlink) GetEncrypted() bool {
	if x != nil {
		return x.Encrypted
	}
	return false
}

// RX (uplink) frame data to save in CLICKHOUSE
// deprecated TODO: remove it
type RXFrameForHandyRusty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PHYPayload.
	PhyPayload []byte `protobuf:"bytes,1,opt,name=phy_payload,json=phyPayload,proto3" json:"phy_payload,omitempty"`
	// TX meta-data.
	TxInfo *gw.UplinkTXInfo `protobuf:"bytes,2,opt,name=tx_info,json=txInfo,proto3" json:"tx_info,omitempty"`
	// RX meta-data.
	RxInfo []*gw.UplinkRXInfo `protobuf:"bytes,3,rep,name=rx_info,json=rxInfo,proto3" json:"rx_info,omitempty"`
	// mark if packet not in time (late for more than 120 seconds)
	Late bool `protobuf:"varint,4,opt,name=late,proto3" json:"late,omitempty"`
	// some information from current device-session
	DeviceSession *DeviceSession `protobuf:"bytes,5,opt,name=device_session,json=deviceSession,proto3" json:"device_session,omitempty"`
	// context id
	CtxId string `protobuf:"bytes,6,opt,name=ctx_id,json=ctxId,proto3" json:"ctx_id,omitempty"`
	// rate limit
	Limit RateLimit `protobuf:"varint,7,opt,name=limit,proto3,enum=ns.RateLimit" json:"limit,omitempty"`
	// current device_class  string: "A", "B", "C"
	Class string `protobuf:"bytes,8,opt,name=class,proto3" json:"class,omitempty"`
}

func (x *RXFrameForHandyRusty) Reset() {
	*x = RXFrameForHandyRusty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RXFrameForHandyRusty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RXFrameForHandyRusty) ProtoMessage() {}

func (x *RXFrameForHandyRusty) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RXFrameForHandyRusty.ProtoReflect.Descriptor instead.
func (*RXFrameForHandyRusty) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{61}
}

func (x *RXFrameForHandyRusty) GetPhyPayload() []byte {
	if x != nil {
		return x.PhyPayload
	}
	return nil
}

func (x *RXFrameForHandyRusty) GetTxInfo() *gw.UplinkTXInfo {
	if x != nil {
		return x.TxInfo
	}
	return nil
}

func (x *RXFrameForHandyRusty) GetRxInfo() []*gw.UplinkRXInfo {
	if x != nil {
		return x.RxInfo
	}
	return nil
}

func (x *RXFrameForHandyRusty) GetLate() bool {
	if x != nil {
		return x.Late
	}
	return false
}

func (x *RXFrameForHandyRusty) GetDeviceSession() *DeviceSession {
	if x != nil {
		return x.DeviceSession
	}
	return nil
}

func (x *RXFrameForHandyRusty) GetCtxId() string {
	if x != nil {
		return x.CtxId
	}
	return ""
}

func (x *RXFrameForHandyRusty) GetLimit() RateLimit {
	if x != nil {
		return x.Limit
	}
	return RateLimit_Unlimited
}

func (x *RXFrameForHandyRusty) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

// TX (downlink) frame data to save in CLICKHOUSE
// deprecated TODO: remove it
type TXFrameForHandyRusty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PHYPayload.
	PhyPayload []byte `protobuf:"bytes,1,opt,name=phy_payload,json=phyPayload,proto3" json:"phy_payload,omitempty"`
	// TX meta-data.
	TxInfo *gw.DownlinkTXInfo `protobuf:"bytes,2,opt,name=tx_info,json=txInfo,proto3" json:"tx_info,omitempty"`
	// Token (uint16 value).
	// Deprecated: replaced by downlink_id.
	Token uint32 `protobuf:"varint,3,opt,name=token,proto3" json:"token,omitempty"`
	// Downlink ID (UUID).
	DownlinkId []byte `protobuf:"bytes,4,opt,name=downlink_id,json=downlinkID,proto3" json:"downlink_id,omitempty"`
	// Gateway ID.
	GatewayId []byte `protobuf:"bytes,5,opt,name=gateway_id,json=gatewayID,proto3" json:"gateway_id,omitempty"`
	// some information from current device-session
	DeviceSession *DeviceSession `protobuf:"bytes,6,opt,name=device_session,json=deviceSession,proto3" json:"device_session,omitempty"`
	// rate limit
	Limit RateLimit `protobuf:"varint,7,opt,name=limit,proto3,enum=ns.RateLimit" json:"limit,omitempty"`
	// non-encrypted frame payload.
	FrmPayload []byte `protobuf:"bytes,8,opt,name=frm_payload,json=frmPayload,proto3" json:"frm_payload,omitempty"`
}

func (x *TXFrameForHandyRusty) Reset() {
	*x = TXFrameForHandyRusty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TXFrameForHandyRusty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TXFrameForHandyRusty) ProtoMessage() {}

func (x *TXFrameForHandyRusty) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TXFrameForHandyRusty.ProtoReflect.Descriptor instead.
func (*TXFrameForHandyRusty) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{62}
}

func (x *TXFrameForHandyRusty) GetPhyPayload() []byte {
	if x != nil {
		return x.PhyPayload
	}
	return nil
}

func (x *TXFrameForHandyRusty) GetTxInfo() *gw.DownlinkTXInfo {
	if x != nil {
		return x.TxInfo
	}
	return nil
}

func (x *TXFrameForHandyRusty) GetToken() uint32 {
	if x != nil {
		return x.Token
	}
	return 0
}

func (x *TXFrameForHandyRusty) GetDownlinkId() []byte {
	if x != nil {
		return x.DownlinkId
	}
	return nil
}

func (x *TXFrameForHandyRusty) GetGatewayId() []byte {
	if x != nil {
		return x.GatewayId
	}
	return nil
}

func (x *TXFrameForHandyRusty) GetDeviceSession() *DeviceSession {
	if x != nil {
		return x.DeviceSession
	}
	return nil
}

func (x *TXFrameForHandyRusty) GetLimit() RateLimit {
	if x != nil {
		return x.Limit
	}
	return RateLimit_Unlimited
}

func (x *TXFrameForHandyRusty) GetFrmPayload() []byte {
	if x != nil {
		return x.FrmPayload
	}
	return nil
}

// DeviceSession cropped data from DeviceSession to save in CLICKHOUSE
type DeviceSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FCntUp
	FCntUp uint32 `protobuf:"varint,1,opt,name=FCntUp,proto3" json:"FCntUp,omitempty"`
	// NFCntDown
	NFCntDown uint32 `protobuf:"varint,2,opt,name=NFCntDown,proto3" json:"NFCntDown,omitempty"`
	// AFCntDown
	AFCntDown uint32 `protobuf:"varint,3,opt,name=AFCntDown,proto3" json:"AFCntDown,omitempty"`
	// ConfFCnt
	ConfFCnt uint32 `protobuf:"varint,4,opt,name=ConfFCnt,proto3" json:"ConfFCnt,omitempty"`
	// Data from KeyEnvelope (if exists during first data packet): KEKLabel string
	KEKLabel string `protobuf:"bytes,5,opt,name=KEK_label,json=KEKLabel,proto3" json:"KEK_label,omitempty"`
	// Data from KeyEnvelope (exists during first data packet): AESKey   []byte
	AESKey []byte `protobuf:"bytes,6,opt,name=AES_key,json=AESKey,proto3" json:"AES_key,omitempty"`
	// mean packet error rate (for last 20 packets)
	Per float32 `protobuf:"fixed32,7,opt,name=per,proto3" json:"per,omitempty"`
}

func (x *DeviceSession) Reset() {
	*x = DeviceSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceSession) ProtoMessage() {}

func (x *DeviceSession) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceSession.ProtoReflect.Descriptor instead.
func (*DeviceSession) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{63}
}

func (x *DeviceSession) GetFCntUp() uint32 {
	if x != nil {
		return x.FCntUp
	}
	return 0
}

func (x *DeviceSession) GetNFCntDown() uint32 {
	if x != nil {
		return x.NFCntDown
	}
	return 0
}

func (x *DeviceSession) GetAFCntDown() uint32 {
	if x != nil {
		return x.AFCntDown
	}
	return 0
}

func (x *DeviceSession) GetConfFCnt() uint32 {
	if x != nil {
		return x.ConfFCnt
	}
	return 0
}

func (x *DeviceSession) GetKEKLabel() string {
	if x != nil {
		return x.KEKLabel
	}
	return ""
}

func (x *DeviceSession) GetAESKey() []byte {
	if x != nil {
		return x.AESKey
	}
	return nil
}

func (x *DeviceSession) GetPer() float32 {
	if x != nil {
		return x.Per
	}
	return 0
}

type StreamFrameLogsForGatewayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// MAC address of the gateway.
	GatewayId []byte `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
}

func (x *StreamFrameLogsForGatewayRequest) Reset() {
	*x = StreamFrameLogsForGatewayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamFrameLogsForGatewayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamFrameLogsForGatewayRequest) ProtoMessage() {}

func (x *StreamFrameLogsForGatewayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamFrameLogsForGatewayRequest.ProtoReflect.Descriptor instead.
func (*StreamFrameLogsForGatewayRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{64}
}

func (x *StreamFrameLogsForGatewayRequest) GetGatewayId() []byte {
	if x != nil {
		return x.GatewayId
	}
	return nil
}

type StreamFrameLogsForGatewayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Frame:
	//
	//	*StreamFrameLogsForGatewayResponse_UplinkFrameSet
	//	*StreamFrameLogsForGatewayResponse_DownlinkFrame
	Frame isStreamFrameLogsForGatewayResponse_Frame `protobuf_oneof:"frame"`
}

func (x *StreamFrameLogsForGatewayResponse) Reset() {
	*x = StreamFrameLogsForGatewayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamFrameLogsForGatewayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamFrameLogsForGatewayResponse) ProtoMessage() {}

func (x *StreamFrameLogsForGatewayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamFrameLogsForGatewayResponse.ProtoReflect.Descriptor instead.
func (*StreamFrameLogsForGatewayResponse) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{65}
}

func (m *StreamFrameLogsForGatewayResponse) GetFrame() isStreamFrameLogsForGatewayResponse_Frame {
	if m != nil {
		return m.Frame
	}
	return nil
}

func (x *StreamFrameLogsForGatewayResponse) GetUplinkFrameSet() *UplinkFrameLog {
	if x, ok := x.GetFrame().(*StreamFrameLogsForGatewayResponse_UplinkFrameSet); ok {
		return x.UplinkFrameSet
	}
	return nil
}

func (x *StreamFrameLogsForGatewayResponse) GetDownlinkFrame() *DownlinkFrameLog {
	if x, ok := x.GetFrame().(*StreamFrameLogsForGatewayResponse_DownlinkFrame); ok {
		return x.DownlinkFrame
	}
	return nil
}

type isStreamFrameLogsForGatewayResponse_Frame interface {
	isStreamFrameLogsForGatewayResponse_Frame()
}

type StreamFrameLogsForGatewayResponse_UplinkFrameSet struct {
	// Contains an uplink frame.
	UplinkFrameSet *UplinkFrameLog `protobuf:"bytes,1,opt,name=uplink_frame_set,json=uplinkFrameSet,proto3,oneof"`
}

type StreamFrameLogsForGatewayResponse_DownlinkFrame struct {
	// Contains a downlink frame.
	DownlinkFrame *DownlinkFrameLog `protobuf:"bytes,2,opt,name=downlink_frame,json=downlinkFrame,proto3,oneof"`
}

func (*StreamFrameLogsForGatewayResponse_UplinkFrameSet) isStreamFrameLogsForGatewayResponse_Frame() {
}

func (*StreamFrameLogsForGatewayResponse_DownlinkFrame) isStreamFrameLogsForGatewayResponse_Frame() {}

type StreamFrameLogsForDeviceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DevEUI of the device.
	DevEui []byte `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
}

func (x *StreamFrameLogsForDeviceRequest) Reset() {
	*x = StreamFrameLogsForDeviceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamFrameLogsForDeviceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamFrameLogsForDeviceRequest) ProtoMessage() {}

func (x *StreamFrameLogsForDeviceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamFrameLogsForDeviceRequest.ProtoReflect.Descriptor instead.
func (*StreamFrameLogsForDeviceRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{66}
}

func (x *StreamFrameLogsForDeviceRequest) GetDevEui() []byte {
	if x != nil {
		return x.DevEui
	}
	return nil
}

type StreamFrameLogsForDeviceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Frame:
	//
	//	*StreamFrameLogsForDeviceResponse_UplinkFrameSet
	//	*StreamFrameLogsForDeviceResponse_DownlinkFrame
	Frame isStreamFrameLogsForDeviceResponse_Frame `protobuf_oneof:"frame"`
}

func (x *StreamFrameLogsForDeviceResponse) Reset() {
	*x = StreamFrameLogsForDeviceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamFrameLogsForDeviceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamFrameLogsForDeviceResponse) ProtoMessage() {}

func (x *StreamFrameLogsForDeviceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamFrameLogsForDeviceResponse.ProtoReflect.Descriptor instead.
func (*StreamFrameLogsForDeviceResponse) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{67}
}

func (m *StreamFrameLogsForDeviceResponse) GetFrame() isStreamFrameLogsForDeviceResponse_Frame {
	if m != nil {
		return m.Frame
	}
	return nil
}

func (x *StreamFrameLogsForDeviceResponse) GetUplinkFrameSet() *UplinkFrameLog {
	if x, ok := x.GetFrame().(*StreamFrameLogsForDeviceResponse_UplinkFrameSet); ok {
		return x.UplinkFrameSet
	}
	return nil
}

func (x *StreamFrameLogsForDeviceResponse) GetDownlinkFrame() *DownlinkFrameLog {
	if x, ok := x.GetFrame().(*StreamFrameLogsForDeviceResponse_DownlinkFrame); ok {
		return x.DownlinkFrame
	}
	return nil
}

type isStreamFrameLogsForDeviceResponse_Frame interface {
	isStreamFrameLogsForDeviceResponse_Frame()
}

type StreamFrameLogsForDeviceResponse_UplinkFrameSet struct {
	// Contains an uplink frame.
	UplinkFrameSet *UplinkFrameLog `protobuf:"bytes,1,opt,name=uplink_frame_set,json=uplinkFrameSet,proto3,oneof"`
}

type StreamFrameLogsForDeviceResponse_DownlinkFrame struct {
	// Contains a downlink frame.
	DownlinkFrame *DownlinkFrameLog `protobuf:"bytes,2,opt,name=downlink_frame,json=downlinkFrame,proto3,oneof"`
}

func (*StreamFrameLogsForDeviceResponse_UplinkFrameSet) isStreamFrameLogsForDeviceResponse_Frame() {}

func (*StreamFrameLogsForDeviceResponse_DownlinkFrame) isStreamFrameLogsForDeviceResponse_Frame() {}

type GetVersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ChirpStack Network Server version.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Region configured for this network-server.
	Region common.Region `protobuf:"varint,2,opt,name=region,proto3,enum=common.Region" json:"region,omitempty"`
}

func (x *GetVersionResponse) Reset() {
	*x = GetVersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVersionResponse) ProtoMessage() {}

func (x *GetVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVersionResponse.ProtoReflect.Descriptor instead.
func (*GetVersionResponse) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{68}
}

func (x *GetVersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetVersionResponse) GetRegion() common.Region {
	if x != nil {
		return x.Region
	}
	return common.Region(0)
}

type GatewayProfile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the gateway-profile.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Default channels (channels specified by the LoRaWAN Regional Parameters
	// specification) enabled for this configuration.
	Channels []uint32 `protobuf:"varint,2,rep,packed,name=channels,proto3" json:"channels,omitempty"`
	// Extra channels added to the channel-configuration (in case the LoRaWAN
	// region supports adding custom channels).
	ExtraChannels []*GatewayProfileExtraChannel `protobuf:"bytes,3,rep,name=extra_channels,json=extraChannels,proto3" json:"extra_channels,omitempty"`
	// Stats interval.
	// This defines the (expected) stats interval which the gateways using this
	// gateway-profile are using.
	StatsInterval *durationpb.Duration `protobuf:"bytes,4,opt,name=stats_interval,json=statsInterval,proto3" json:"stats_interval,omitempty"`
	//	gateway-profile.
	//
	// Downlink TX Power (dBm)
	// if (-1) default value from network-server will be used.
	DownlinkTxPower int32 `protobuf:"varint,5,opt,name=downlink_tx_power,json=downlinkTxPower,proto3" json:"downlink_tx_power,omitempty"`
}

func (x *GatewayProfile) Reset() {
	*x = GatewayProfile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayProfile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayProfile) ProtoMessage() {}

func (x *GatewayProfile) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayProfile.ProtoReflect.Descriptor instead.
func (*GatewayProfile) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{69}
}

func (x *GatewayProfile) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GatewayProfile) GetChannels() []uint32 {
	if x != nil {
		return x.Channels
	}
	return nil
}

func (x *GatewayProfile) GetExtraChannels() []*GatewayProfileExtraChannel {
	if x != nil {
		return x.ExtraChannels
	}
	return nil
}

func (x *GatewayProfile) GetStatsInterval() *durationpb.Duration {
	if x != nil {
		return x.StatsInterval
	}
	return nil
}

func (x *GatewayProfile) GetDownlinkTxPower() int32 {
	if x != nil {
		return x.DownlinkTxPower
	}
	return 0
}

type GatewayProfileExtraChannel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Modulation.
	Modulation common.Modulation `protobuf:"varint,1,opt,name=modulation,proto3,enum=common.Modulation" json:"modulation,omitempty"`
	// Frequency.
	Frequency uint32 `protobuf:"varint,2,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// Bandwidth.
	Bandwidth uint32 `protobuf:"varint,3,opt,name=bandwidth,proto3" json:"bandwidth,omitempty"`
	// Bitrate (in case of FSK modulation).
	Bitrate uint32 `protobuf:"varint,4,opt,name=bitrate,proto3" json:"bitrate,omitempty"`
	// Spreading factors (in case of LoRa modulation).
	SpreadingFactors []uint32 `protobuf:"varint,5,rep,packed,name=spreading_factors,json=spreadingFactors,proto3" json:"spreading_factors,omitempty"`
}

func (x *GatewayProfileExtraChannel) Reset() {
	*x = GatewayProfileExtraChannel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayProfileExtraChannel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayProfileExtraChannel) ProtoMessage() {}

func (x *GatewayProfileExtraChannel) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayProfileExtraChannel.ProtoReflect.Descriptor instead.
func (*GatewayProfileExtraChannel) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{70}
}

func (x *GatewayProfileExtraChannel) GetModulation() common.Modulation {
	if x != nil {
		return x.Modulation
	}
	return common.Modulation(0)
}

func (x *GatewayProfileExtraChannel) GetFrequency() uint32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *GatewayProfileExtraChannel) GetBandwidth() uint32 {
	if x != nil {
		return x.Bandwidth
	}
	return 0
}

func (x *GatewayProfileExtraChannel) GetBitrate() uint32 {
	if x != nil {
		return x.Bitrate
	}
	return 0
}

func (x *GatewayProfileExtraChannel) GetSpreadingFactors() []uint32 {
	if x != nil {
		return x.SpreadingFactors
	}
	return nil
}

type CreateGatewayProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gateway-profile object to create.
	GatewayProfile *GatewayProfile `protobuf:"bytes,1,opt,name=gateway_profile,json=gatewayProfile,proto3" json:"gateway_profile,omitempty"`
}

func (x *CreateGatewayProfileRequest) Reset() {
	*x = CreateGatewayProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGatewayProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGatewayProfileRequest) ProtoMessage() {}

func (x *CreateGatewayProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGatewayProfileRequest.ProtoReflect.Descriptor instead.
func (*CreateGatewayProfileRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{71}
}

func (x *CreateGatewayProfileRequest) GetGatewayProfile() *GatewayProfile {
	if x != nil {
		return x.GatewayProfile
	}
	return nil
}

type CreateGatewayProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the create configuration object.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateGatewayProfileResponse) Reset() {
	*x = CreateGatewayProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateGatewayProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateGatewayProfileResponse) ProtoMessage() {}

func (x *CreateGatewayProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateGatewayProfileResponse.ProtoReflect.Descriptor instead.
func (*CreateGatewayProfileResponse) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{72}
}

func (x *CreateGatewayProfileResponse) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type GetGatewayProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gateway-profile ID.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetGatewayProfileRequest) Reset() {
	*x = GetGatewayProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGatewayProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGatewayProfileRequest) ProtoMessage() {}

func (x *GetGatewayProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGatewayProfileRequest.ProtoReflect.Descriptor instead.
func (*GetGatewayProfileRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{73}
}

func (x *GetGatewayProfileRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type GetGatewayProfileResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gateway-profile object.
	GatewayProfile *GatewayProfile `protobuf:"bytes,1,opt,name=gateway_profile,json=gatewayProfile,proto3" json:"gateway_profile,omitempty"`
	// Created at timestamp.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Last update timestamp.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *GetGatewayProfileResponse) Reset() {
	*x = GetGatewayProfileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGatewayProfileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGatewayProfileResponse) ProtoMessage() {}

func (x *GetGatewayProfileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGatewayProfileResponse.ProtoReflect.Descriptor instead.
func (*GetGatewayProfileResponse) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{74}
}

func (x *GetGatewayProfileResponse) GetGatewayProfile() *GatewayProfile {
	if x != nil {
		return x.GatewayProfile
	}
	return nil
}

func (x *GetGatewayProfileResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GetGatewayProfileResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type UpdateGatewayProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gateway-profile object to update.
	GatewayProfile *GatewayProfile `protobuf:"bytes,1,opt,name=gateway_profile,json=gatewayProfile,proto3" json:"gateway_profile,omitempty"`
}

func (x *UpdateGatewayProfileRequest) Reset() {
	*x = UpdateGatewayProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateGatewayProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateGatewayProfileRequest) ProtoMessage() {}

func (x *UpdateGatewayProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateGatewayProfileRequest.ProtoReflect.Descriptor instead.
func (*UpdateGatewayProfileRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{75}
}

func (x *UpdateGatewayProfileRequest) GetGatewayProfile() *GatewayProfile {
	if x != nil {
		return x.GatewayProfile
	}
	return nil
}

type DeleteGatewayProfileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Gateway-profile ID.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteGatewayProfileRequest) Reset() {
	*x = DeleteGatewayProfileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGatewayProfileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGatewayProfileRequest) ProtoMessage() {}

func (x *DeleteGatewayProfileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGatewayProfileRequest.ProtoReflect.Descriptor instead.
func (*DeleteGatewayProfileRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{76}
}

func (x *DeleteGatewayProfileRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type MulticastGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Multicast-group ID.
	// Note: this can be set on create. When left blank, a random ID will
	// be generated.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Multicast Address for this group.
	McAddr []byte `protobuf:"bytes,2,opt,name=mc_addr,json=mcAddr,proto3" json:"mc_addr,omitempty"`
	// Multicast network session key.
	McNwkSKey []byte `protobuf:"bytes,3,opt,name=mc_nwk_s_key,json=mcNwkSKey,proto3" json:"mc_nwk_s_key,omitempty"`
	// Frame-counter (downlink).
	FCnt uint32 `protobuf:"varint,4,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	// Multicast-group type (Class-B or Class-C).
	GroupType MulticastGroupType `protobuf:"varint,5,opt,name=group_type,json=groupType,proto3,enum=ns.MulticastGroupType" json:"group_type,omitempty"`
	// Data-rate.
	Dr uint32 `protobuf:"varint,6,opt,name=dr,proto3" json:"dr,omitempty"`
	// Frequency (Hz).
	Frequency uint32 `protobuf:"varint,7,opt,name=frequency,proto3" json:"frequency,omitempty"`
	// Ping-slot period.
	// Mandatory for Class-B multicast groups.
	PingSlotPeriod uint32 `protobuf:"varint,8,opt,name=ping_slot_period,json=pingSlotPeriod,proto3" json:"ping_slot_period,omitempty"`
	// Service-profile ID.
	ServiceProfileId []byte `protobuf:"bytes,9,opt,name=service_profile_id,json=serviceProfileId,proto3" json:"service_profile_id,omitempty"`
	// Routing-profile ID.
	RoutingProfileId []byte `protobuf:"bytes,10,opt,name=routing_profile_id,json=routingProfileId,proto3" json:"routing_profile_id,omitempty"`
}

func (x *MulticastGroup) Reset() {
	*x = MulticastGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MulticastGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MulticastGroup) ProtoMessage() {}

func (x *MulticastGroup) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MulticastGroup.ProtoReflect.Descriptor instead.
func (*MulticastGroup) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{77}
}

func (x *MulticastGroup) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MulticastGroup) GetMcAddr() []byte {
	if x != nil {
		return x.McAddr
	}
	return nil
}

func (x *MulticastGroup) GetMcNwkSKey() []byte {
	if x != nil {
		return x.McNwkSKey
	}
	return nil
}

func (x *MulticastGroup) GetFCnt() uint32 {
	if x != nil {
		return x.FCnt
	}
	return 0
}

func (x *MulticastGroup) GetGroupType() MulticastGroupType {
	if x != nil {
		return x.GroupType
	}
	return MulticastGroupType_CLASS_C
}

func (x *MulticastGroup) GetDr() uint32 {
	if x != nil {
		return x.Dr
	}
	return 0
}

func (x *MulticastGroup) GetFrequency() uint32 {
	if x != nil {
		return x.Frequency
	}
	return 0
}

func (x *MulticastGroup) GetPingSlotPeriod() uint32 {
	if x != nil {
		return x.PingSlotPeriod
	}
	return 0
}

func (x *MulticastGroup) GetServiceProfileId() []byte {
	if x != nil {
		return x.ServiceProfileId
	}
	return nil
}

func (x *MulticastGroup) GetRoutingProfileId() []byte {
	if x != nil {
		return x.RoutingProfileId
	}
	return nil
}

type CreateMulticastGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Multicast-group to create.
	MulticastGroup *MulticastGroup `protobuf:"bytes,1,opt,name=multicast_group,json=multicastGroup,proto3" json:"multicast_group,omitempty"`
}

func (x *CreateMulticastGroupRequest) Reset() {
	*x = CreateMulticastGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMulticastGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMulticastGroupRequest) ProtoMessage() {}

func (x *CreateMulticastGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMulticastGroupRequest.ProtoReflect.Descriptor instead.
func (*CreateMulticastGroupRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{78}
}

func (x *CreateMulticastGroupRequest) GetMulticastGroup() *MulticastGroup {
	if x != nil {
		return x.MulticastGroup
	}
	return nil
}

type CreateMulticastGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Multicast-group ID.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateMulticastGroupResponse) Reset() {
	*x = CreateMulticastGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateMulticastGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMulticastGroupResponse) ProtoMessage() {}

func (x *CreateMulticastGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMulticastGroupResponse.ProtoReflect.Descriptor instead.
func (*CreateMulticastGroupResponse) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{79}
}

func (x *CreateMulticastGroupResponse) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type GetMulticastGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Multicast-group ID.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetMulticastGroupRequest) Reset() {
	*x = GetMulticastGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMulticastGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMulticastGroupRequest) ProtoMessage() {}

func (x *GetMulticastGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMulticastGroupRequest.ProtoReflect.Descriptor instead.
func (*GetMulticastGroupRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{80}
}

func (x *GetMulticastGroupRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type GetMulticastGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Multicast-group.
	MulticastGroup *MulticastGroup `protobuf:"bytes,1,opt,name=multicast_group,json=multicastGroup,proto3" json:"multicast_group,omitempty"`
	// Created at timestamp.
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	// Last update timestamp.
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
}

func (x *GetMulticastGroupResponse) Reset() {
	*x = GetMulticastGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMulticastGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMulticastGroupResponse) ProtoMessage() {}

func (x *GetMulticastGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMulticastGroupResponse.ProtoReflect.Descriptor instead.
func (*GetMulticastGroupResponse) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{81}
}

func (x *GetMulticastGroupResponse) GetMulticastGroup() *MulticastGroup {
	if x != nil {
		return x.MulticastGroup
	}
	return nil
}

func (x *GetMulticastGroupResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *GetMulticastGroupResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type UpdateMulticastGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Multicast-group to update.
	MulticastGroup *MulticastGroup `protobuf:"bytes,1,opt,name=multicast_group,json=multicastGroup,proto3" json:"multicast_group,omitempty"`
}

func (x *UpdateMulticastGroupRequest) Reset() {
	*x = UpdateMulticastGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMulticastGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMulticastGroupRequest) ProtoMessage() {}

func (x *UpdateMulticastGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMulticastGroupRequest.ProtoReflect.Descriptor instead.
func (*UpdateMulticastGroupRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{82}
}

func (x *UpdateMulticastGroupRequest) GetMulticastGroup() *MulticastGroup {
	if x != nil {
		return x.MulticastGroup
	}
	return nil
}

type DeleteMulticastGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Multicast-group ID.
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteMulticastGroupRequest) Reset() {
	*x = DeleteMulticastGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMulticastGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMulticastGroupRequest) ProtoMessage() {}

func (x *DeleteMulticastGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMulticastGroupRequest.ProtoReflect.Descriptor instead.
func (*DeleteMulticastGroupRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{83}
}

func (x *DeleteMulticastGroupRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type AddDeviceToMulticastGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI.
	DevEui []byte `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// Multicast-group ID.
	MulticastGroupId []byte `protobuf:"bytes,2,opt,name=multicast_group_id,json=multicastGroupId,proto3" json:"multicast_group_id,omitempty"`
}

func (x *AddDeviceToMulticastGroupRequest) Reset() {
	*x = AddDeviceToMulticastGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddDeviceToMulticastGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddDeviceToMulticastGroupRequest) ProtoMessage() {}

func (x *AddDeviceToMulticastGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddDeviceToMulticastGroupRequest.ProtoReflect.Descriptor instead.
func (*AddDeviceToMulticastGroupRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{84}
}

func (x *AddDeviceToMulticastGroupRequest) GetDevEui() []byte {
	if x != nil {
		return x.DevEui
	}
	return nil
}

func (x *AddDeviceToMulticastGroupRequest) GetMulticastGroupId() []byte {
	if x != nil {
		return x.MulticastGroupId
	}
	return nil
}

type RemoveDeviceFromMulticastGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI.
	DevEui []byte `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
	// Multicast-group ID.
	MulticastGroupId []byte `protobuf:"bytes,2,opt,name=multicast_group_id,json=multicastGroupId,proto3" json:"multicast_group_id,omitempty"`
}

func (x *RemoveDeviceFromMulticastGroupRequest) Reset() {
	*x = RemoveDeviceFromMulticastGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDeviceFromMulticastGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDeviceFromMulticastGroupRequest) ProtoMessage() {}

func (x *RemoveDeviceFromMulticastGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDeviceFromMulticastGroupRequest.ProtoReflect.Descriptor instead.
func (*RemoveDeviceFromMulticastGroupRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{85}
}

func (x *RemoveDeviceFromMulticastGroupRequest) GetDevEui() []byte {
	if x != nil {
		return x.DevEui
	}
	return nil
}

func (x *RemoveDeviceFromMulticastGroupRequest) GetMulticastGroupId() []byte {
	if x != nil {
		return x.MulticastGroupId
	}
	return nil
}

type MulticastQueueItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Multicast-group id.
	MulticastGroupId []byte `protobuf:"bytes,1,opt,name=multicast_group_id,json=multicastGroupId,proto3" json:"multicast_group_id,omitempty"`
	// Frame-counter of payload.
	FCnt uint32 `protobuf:"varint,2,opt,name=f_cnt,json=fCnt,proto3" json:"f_cnt,omitempty"`
	// Frame-port of payload.
	FPort uint32 `protobuf:"varint,3,opt,name=f_port,json=fPort,proto3" json:"f_port,omitempty"`
	// Encrypted FRMPayload bytes.
	FrmPayload []byte `protobuf:"bytes,4,opt,name=frm_payload,json=frmPayload,proto3" json:"frm_payload,omitempty"`
}

func (x *MulticastQueueItem) Reset() {
	*x = MulticastQueueItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MulticastQueueItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MulticastQueueItem) ProtoMessage() {}

func (x *MulticastQueueItem) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MulticastQueueItem.ProtoReflect.Descriptor instead.
func (*MulticastQueueItem) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{86}
}

func (x *MulticastQueueItem) GetMulticastGroupId() []byte {
	if x != nil {
		return x.MulticastGroupId
	}
	return nil
}

func (x *MulticastQueueItem) GetFCnt() uint32 {
	if x != nil {
		return x.FCnt
	}
	return 0
}

func (x *MulticastQueueItem) GetFPort() uint32 {
	if x != nil {
		return x.FPort
	}
	return 0
}

func (x *MulticastQueueItem) GetFrmPayload() []byte {
	if x != nil {
		return x.FrmPayload
	}
	return nil
}

type EnqueueMulticastQueueItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MulticastQueueItem *MulticastQueueItem `protobuf:"bytes,1,opt,name=multicast_queue_item,json=multicastQueueItem,proto3" json:"multicast_queue_item,omitempty"`
}

func (x *EnqueueMulticastQueueItemRequest) Reset() {
	*x = EnqueueMulticastQueueItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnqueueMulticastQueueItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnqueueMulticastQueueItemRequest) ProtoMessage() {}

func (x *EnqueueMulticastQueueItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnqueueMulticastQueueItemRequest.ProtoReflect.Descriptor instead.
func (*EnqueueMulticastQueueItemRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{87}
}

func (x *EnqueueMulticastQueueItemRequest) GetMulticastQueueItem() *MulticastQueueItem {
	if x != nil {
		return x.MulticastQueueItem
	}
	return nil
}

type FlushMulticastQueueForMulticastGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Multicast-group id.
	MulticastGroupId []byte `protobuf:"bytes,1,opt,name=multicast_group_id,json=multicastGroupId,proto3" json:"multicast_group_id,omitempty"`
}

func (x *FlushMulticastQueueForMulticastGroupRequest) Reset() {
	*x = FlushMulticastQueueForMulticastGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushMulticastQueueForMulticastGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushMulticastQueueForMulticastGroupRequest) ProtoMessage() {}

func (x *FlushMulticastQueueForMulticastGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushMulticastQueueForMulticastGroupRequest.ProtoReflect.Descriptor instead.
func (*FlushMulticastQueueForMulticastGroupRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{88}
}

func (x *FlushMulticastQueueForMulticastGroupRequest) GetMulticastGroupId() []byte {
	if x != nil {
		return x.MulticastGroupId
	}
	return nil
}

type GetMulticastQueueItemsForMulticastGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Multicast-group id.
	MulticastGroupId []byte `protobuf:"bytes,1,opt,name=multicast_group_id,json=multicastGroupId,proto3" json:"multicast_group_id,omitempty"`
}

func (x *GetMulticastQueueItemsForMulticastGroupRequest) Reset() {
	*x = GetMulticastQueueItemsForMulticastGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMulticastQueueItemsForMulticastGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMulticastQueueItemsForMulticastGroupRequest) ProtoMessage() {}

func (x *GetMulticastQueueItemsForMulticastGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMulticastQueueItemsForMulticastGroupRequest.ProtoReflect.Descriptor instead.
func (*GetMulticastQueueItemsForMulticastGroupRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{89}
}

func (x *GetMulticastQueueItemsForMulticastGroupRequest) GetMulticastGroupId() []byte {
	if x != nil {
		return x.MulticastGroupId
	}
	return nil
}

type GetMulticastQueueItemsForMulticastGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MulticastQueueItems []*MulticastQueueItem `protobuf:"bytes,1,rep,name=multicast_queue_items,json=multicastQueueItems,proto3" json:"multicast_queue_items,omitempty"`
}

func (x *GetMulticastQueueItemsForMulticastGroupResponse) Reset() {
	*x = GetMulticastQueueItemsForMulticastGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMulticastQueueItemsForMulticastGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMulticastQueueItemsForMulticastGroupResponse) ProtoMessage() {}

func (x *GetMulticastQueueItemsForMulticastGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMulticastQueueItemsForMulticastGroupResponse.ProtoReflect.Descriptor instead.
func (*GetMulticastQueueItemsForMulticastGroupResponse) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{90}
}

func (x *GetMulticastQueueItemsForMulticastGroupResponse) GetMulticastQueueItems() []*MulticastQueueItem {
	if x != nil {
		return x.MulticastQueueItems
	}
	return nil
}

type GetADRAlgorithmsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdrAlgorithms []*ADRAlgorithm `protobuf:"bytes,1,rep,name=adr_algorithms,json=adrAlgorithms,proto3" json:"adr_algorithms,omitempty"`
}

func (x *GetADRAlgorithmsResponse) Reset() {
	*x = GetADRAlgorithmsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetADRAlgorithmsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetADRAlgorithmsResponse) ProtoMessage() {}

func (x *GetADRAlgorithmsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetADRAlgorithmsResponse.ProtoReflect.Descriptor instead.
func (*GetADRAlgorithmsResponse) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{91}
}

func (x *GetADRAlgorithmsResponse) GetAdrAlgorithms() []*ADRAlgorithm {
	if x != nil {
		return x.AdrAlgorithms
	}
	return nil
}

type ADRAlgorithm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ADR algorithm ID.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ADR algorithm name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ADRAlgorithm) Reset() {
	*x = ADRAlgorithm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ADRAlgorithm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADRAlgorithm) ProtoMessage() {}

func (x *ADRAlgorithm) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADRAlgorithm.ProtoReflect.Descriptor instead.
func (*ADRAlgorithm) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{92}
}

func (x *ADRAlgorithm) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ADRAlgorithm) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ClearDeviceNoncesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device EUI (8 bytes).
	DevEui []byte `protobuf:"bytes,1,opt,name=dev_eui,json=devEui,proto3" json:"dev_eui,omitempty"`
}

func (x *ClearDeviceNoncesRequest) Reset() {
	*x = ClearDeviceNoncesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearDeviceNoncesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearDeviceNoncesRequest) ProtoMessage() {}

func (x *ClearDeviceNoncesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearDeviceNoncesRequest.ProtoReflect.Descriptor instead.
func (*ClearDeviceNoncesRequest) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{93}
}

func (x *ClearDeviceNoncesRequest) GetDevEui() []byte {
	if x != nil {
		return x.DevEui
	}
	return nil
}

type CountGatewaysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data map[string]int64 `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *CountGatewaysResponse) Reset() {
	*x = CountGatewaysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ns_ns_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountGatewaysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountGatewaysResponse) ProtoMessage() {}

func (x *CountGatewaysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_ns_ns_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountGatewaysResponse.ProtoReflect.Descriptor instead.
func (*CountGatewaysResponse) Descriptor() ([]byte, []int) {
	return file_ns_ns_proto_rawDescGZIP(), []int{94}
}

func (x *CountGatewaysResponse) GetData() map[string]int64 {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_ns_ns_proto protoreflect.FileDescriptor

var file_ns_ns_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x6e, 0x73, 0x2f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x6e,
	0x73, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x67, 0x77, 0x2f, 0x67, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x11, 0x6e, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5a, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e,
	0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x22, 0x2e, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x2a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x22, 0xce, 0x01, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x5a, 0x0a,
	0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x2d, 0x0a, 0x1b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x22, 0x5a, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6e, 0x73, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x22, 0x2e, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x2a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64,
	0x22, 0xce, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b,
	0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x73, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0e, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x5a, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3b, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x73, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0e, 0x72,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x2d, 0x0a,
	0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x22, 0x56, 0x0a, 0x1a,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0e, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x22, 0x2d, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x02, 0x69, 0x64, 0x22, 0x29, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x22, 0xca,
	0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x0e, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x56, 0x0a, 0x1a, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x0e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x22, 0x2c, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69,
	0x64, 0x22, 0xc1, 0x02, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x45, 0x75, 0x69, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x10, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x6b, 0x69, 0x70, 0x46, 0x43, 0x6e,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x11, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x41, 0x6c, 0x74,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x44, 0x69,
	0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x22, 0x39, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x06,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6e,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x22, 0x2b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x75, 0x69, 0x22, 0xad, 0x01,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x93, 0x02,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x6f, 0x72, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07,
	0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x45, 0x75, 0x69, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x42, 0x12,
	0x28, 0x0a, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x5f, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x43, 0x12, 0x1f, 0x0a, 0x0b, 0x4d, 0x41, 0x43,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x4d, 0x41, 0x43, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73,
	0x5f, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x6a, 0x6f, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x4a, 0x6f, 0x69, 0x6e,
	0x12, 0x21, 0x0a, 0x0d, 0x6e, 0x77, 0x6b, 0x5f, 0x73, 0x5f, 0x65, 0x6e, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x77, 0x6b, 0x53, 0x45, 0x6e, 0x63,
	0x4b, 0x65, 0x79, 0x22, 0x39, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6e, 0x73, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x2e,
	0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x75, 0x69, 0x22, 0x92,
	0x05, 0x0a, 0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x75, 0x69, 0x12, 0x19, 0x0a, 0x08,
	0x64, 0x65, 0x76, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x64, 0x65, 0x76, 0x41, 0x64, 0x64, 0x72, 0x12, 0x24, 0x0a, 0x0f, 0x73, 0x5f, 0x6e, 0x77, 0x6b,
	0x5f, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x73, 0x4e, 0x77, 0x6b, 0x53, 0x49, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a,
	0x0f, 0x66, 0x5f, 0x6e, 0x77, 0x6b, 0x5f, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x66, 0x4e, 0x77, 0x6b, 0x53, 0x49, 0x6e, 0x74,
	0x4b, 0x65, 0x79, 0x12, 0x21, 0x0a, 0x0d, 0x6e, 0x77, 0x6b, 0x5f, 0x73, 0x5f, 0x65, 0x6e, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6e, 0x77, 0x6b, 0x53,
	0x45, 0x6e, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x08, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x5f,
	0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x66, 0x43, 0x6e, 0x74, 0x55, 0x70,
	0x12, 0x1f, 0x0a, 0x0c, 0x6e, 0x5f, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x64, 0x6f, 0x77, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x46, 0x43, 0x6e, 0x74, 0x44, 0x6f, 0x77,
	0x6e, 0x12, 0x1f, 0x0a, 0x0c, 0x61, 0x5f, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x5f, 0x64, 0x6f, 0x77,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x46, 0x43, 0x6e, 0x74, 0x44, 0x6f,
	0x77, 0x6e, 0x12, 0x27, 0x0a, 0x10, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x66, 0x5f, 0x63, 0x6e, 0x74,
	0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73, 0x6b,
	0x69, 0x70, 0x46, 0x43, 0x6e, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x52,
	0x58, 0x31, 0x44, 0x52, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x52, 0x58, 0x31, 0x44, 0x52, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x52, 0x58, 0x32, 0x44, 0x52, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x52, 0x58,
	0x32, 0x44, 0x52, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x58, 0x32, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x52, 0x58, 0x32, 0x46, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x58, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x54,
	0x58, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x44,
	0x52, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x44, 0x52, 0x12, 0x10, 0x0a, 0x03, 0x41,
	0x44, 0x52, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x41, 0x44, 0x52, 0x12, 0x19, 0x0a,
	0x08, 0x6e, 0x62, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6e, 0x62, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x5f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x05, 0x52, 0x15, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x12, 0x45, 0x0a, 0x15, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6e, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x52, 0x13, 0x65, 0x78, 0x74, 0x72, 0x61, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x1a, 0x0a, 0x09, 0x61, 0x70, 0x70, 0x5f, 0x73,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x61, 0x70, 0x70, 0x53,
	0x4b, 0x65, 0x79, 0x22, 0x6f, 0x0a, 0x0d, 0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x66,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x44,
	0x52, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x44, 0x52, 0x12, 0x14,
	0x0a, 0x05, 0x6d, 0x61, 0x78, 0x44, 0x52, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6d,
	0x61, 0x78, 0x44, 0x52, 0x22, 0x5a, 0x0a, 0x15, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a,
	0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x73, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x32, 0x0a, 0x17, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64,
	0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x65,
	0x76, 0x45, 0x75, 0x69, 0x22, 0x35, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x75, 0x69, 0x22, 0x60, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x11, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x65, 0x76, 0x41, 0x64, 0x64,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x76,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x64, 0x65, 0x76,
	0x41, 0x64, 0x64, 0x72, 0x22, 0x69, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x41,
	0x43, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f,
	0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x75,
	0x69, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x63, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22,
	0xda, 0x01, 0x0a, 0x1d, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x65, 0x74,
	0x61, 0x72, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x6d, 0x69, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f,
	0x6d, 0x61, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0b, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x4d, 0x61, 0x63, 0x73, 0x12, 0x35, 0x0a, 0x16, 0x70, 0x6f, 0x6c, 0x61, 0x72,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x64, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x64, 0x72, 0x22, 0x99, 0x02, 0x0a,
	0x07, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x10, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x73, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52, 0x06, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x2c,
	0x0a, 0x12, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75,
	0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73,
	0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x22, 0xb3, 0x05, 0x0a, 0x0b, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x6f, 0x75, 0x74,
	0x69, 0x6e, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x10, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12,
	0x28, 0x0a, 0x06, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6e, 0x73, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x52, 0x06, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x73, 0x12, 0x2c, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0d, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x53, 0x65, 0x65, 0x6e, 0x41, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x61, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x6c, 0x61,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0b, 0x67, 0x70, 0x73,
	0x5f, 0x73, 0x65, 0x65, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x67, 0x70, 0x73, 0x53,
	0x65, 0x65, 0x6e, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x6d, 0x65, 0x74, 0x61, 0x5f, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x73, 0x2e, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74,
	0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x55,
	0x0a, 0x0c, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x66, 0x70, 0x67, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x66, 0x70, 0x67, 0x61, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x66, 0x69, 0x6e, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x10, 0x66, 0x69, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x4b, 0x65, 0x79, 0x22, 0x3d, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a,
	0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x6e, 0x73, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x07, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x22, 0x23, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4c, 0x0a, 0x16, 0x47, 0x65, 0x74,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0c, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x73, 0x2e, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0b, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x22, 0xd6, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6e, 0x73, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x23, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x73, 0x2e, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61,
	0x22, 0x3d, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6e, 0x73, 0x2e, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x22,
	0x26, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x22, 0x39, 0x0a, 0x27, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xb2, 0x01, 0x0a, 0x28, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x07, 0x74, 0x6c, 0x73, 0x43, 0x65, 0x72, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x6c,
	0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x74, 0x6c, 0x73,
	0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x61, 0x43, 0x65, 0x72, 0x74, 0x12, 0x39, 0x0a, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x22, 0x8b, 0x02, 0x0a, 0x0c, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x72, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x6f, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x13, 0x72, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x64, 0x4f, 0x6b, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x78, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x74, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x74, 0x78, 0x5f, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x74, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x22, 0xf2, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x12,
	0x33, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x17, 0x2e, 0x6e, 0x73, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3f, 0x0a, 0x0d, 0x65, 0x6e, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x43, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x73, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22,
	0xfd, 0x02, 0x0a, 0x0f, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x75, 0x69, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x72, 0x6d, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x66, 0x72, 0x6d, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x13, 0x0a,
	0x05, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x43,
	0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x66, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x64, 0x65, 0x76, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x74, 0x74, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x6e, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x5f,
	0x70, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6e, 0x6f, 0x6e, 0x45, 0x6e, 0x63,
	0x72, 0x50, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3f,
	0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x22,
	0x47, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6e, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x3b, 0x0a, 0x20, 0x46, 0x6c, 0x75, 0x73,
	0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x46, 0x6f, 0x72, 0x44,
	0x65, 0x76, 0x45, 0x55, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x45, 0x75, 0x69, 0x22, 0x5d, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x46, 0x6f, 0x72, 0x44,
	0x65, 0x76, 0x45, 0x55, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x45, 0x75, 0x69, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6f,
	0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x72, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x65,
	0x76, 0x45, 0x55, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6e, 0x73,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3e, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x4e,
	0x65, 0x78, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x46, 0x43, 0x6e, 0x74, 0x46,
	0x6f, 0x72, 0x44, 0x65, 0x76, 0x45, 0x55, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x75, 0x69, 0x22, 0x3b, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x4e,
	0x65, 0x78, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x46, 0x43, 0x6e, 0x74, 0x46,
	0x6f, 0x72, 0x44, 0x65, 0x76, 0x45, 0x55, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x13, 0x0a, 0x05, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x66, 0x43, 0x6e, 0x74, 0x22, 0x25, 0x0a, 0x0e, 0x46, 0x43, 0x6e, 0x74, 0x49, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x05, 0x66, 0x5f, 0x63, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x43, 0x6e, 0x74, 0x22, 0xa0, 0x02, 0x0a,
	0x0e, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x68, 0x79, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x68, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x29, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x67, 0x77, 0x2e, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x58, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x06, 0x74, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x07, 0x72,
	0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67,
	0x77, 0x2e, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x58, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06,
	0x72, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x06, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x64, 0x65, 0x76, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x64, 0x65, 0x76, 0x41, 0x64, 0x64, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65,
	0x75, 0x69, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x75, 0x69,
	0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x22,
	0x95, 0x03, 0x0a, 0x10, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x4c, 0x6f, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x68, 0x79, 0x5f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x68, 0x79, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2b, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x77, 0x2e, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x58, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x74, 0x78, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x77, 0x6e,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x64,
	0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x06, 0x6d, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x4d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x64, 0x65, 0x76, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x64, 0x65, 0x76, 0x41, 0x64, 0x64, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76,
	0x5f, 0x65, 0x75, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45,
	0x75, 0x69, 0x12, 0x3d, 0x0a, 0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x23, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x6e, 0x73, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6d, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x66, 0x72, 0x6d,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x65, 0x0a, 0x17, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x64, 0x65, 0x76, 0x41, 0x64, 0x64, 0x72, 0x12, 0x2f, 0x0a,
	0x09, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x6e, 0x76,
	0x65, 0x6c, 0x6f, 0x70, 0x65, 0x52, 0x07, 0x61, 0x70, 0x70, 0x53, 0x4b, 0x65, 0x79, 0x22, 0xb0,
	0x06, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x12,
	0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x75, 0x69, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x6f, 0x69, 0x6e,
	0x5f, 0x65, 0x75, 0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6a, 0x6f, 0x69, 0x6e,
	0x45, 0x75, 0x69, 0x12, 0x13, 0x0a, 0x05, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x66, 0x43, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x66, 0x5f, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x64,
	0x72, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x64,
	0x72, 0x12, 0x29, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x77, 0x2e, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x58,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x74, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x07,
	0x72, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x67, 0x77, 0x2e, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x58, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x06, 0x72, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x57, 0x0a, 0x19, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x17, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65,
	0x64, 0x5f, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x65, 0x64, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x6d, 0x69, 0x63, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6e, 0x73, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x65,
	0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x70, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03,
	0x73, 0x6e, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x73, 0x6e, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x73, 0x73, 0x69, 0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x72, 0x73,
	0x73, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x68, 0x79, 0x5f,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70,
	0x68, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x38, 0x0a, 0x0e, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06, 0x63, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x74, 0x78, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x75, 0x6e,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x75, 0x6e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x44, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x67, 0x69, 0x64, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6f, 0x72, 0x67, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x77, 0x5f, 0x6f, 0x72, 0x67, 0x69, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x67,
	0x77, 0x4f, 0x72, 0x67, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x64, 0x65, 0x76, 0x41, 0x64, 0x64,
	0x72, 0x22, 0xbc, 0x02, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x68, 0x79, 0x5f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x68, 0x79, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2b, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x77, 0x2e, 0x44, 0x6f, 0x77, 0x6e,
	0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x58, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x74, 0x78, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e,
	0x6b, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x49, 0x44, 0x12, 0x38, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x73, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6e, 0x73,
	0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6d, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x66, 0x72, 0x6d, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x22, 0xad, 0x02, 0x0a, 0x14, 0x52, 0x58, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x48,
	0x61, 0x6e, 0x64, 0x79, 0x52, 0x75, 0x73, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x68, 0x79,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x70, 0x68, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x29, 0x0a, 0x07, 0x74, 0x78,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x77,
	0x2e, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x58, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x74,
	0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x07, 0x72, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x77, 0x2e, 0x55, 0x70, 0x6c, 0x69,
	0x6e, 0x6b, 0x52, 0x58, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x72, 0x78, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e,
	0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x15,
	0x0a, 0x06, 0x63, 0x74, 0x78, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x63, 0x74, 0x78, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6e, 0x73, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x22, 0xba, 0x02, 0x0a, 0x14, 0x54, 0x58, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x48,
	0x61, 0x6e, 0x64, 0x79, 0x52, 0x75, 0x73, 0x74, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x68, 0x79,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x70, 0x68, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2b, 0x0a, 0x07, 0x74, 0x78,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x77,
	0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x58, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x06, 0x74, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x44, 0x12, 0x1d,
	0x0a, 0x0a, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x44, 0x12, 0x38, 0x0a,
	0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x6e, 0x73, 0x2e, 0x52, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x66, 0x72, 0x6d, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0a, 0x66, 0x72, 0x6d, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xc7, 0x01,
	0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x0a, 0x06, 0x46, 0x43, 0x6e, 0x74, 0x55, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x46, 0x43, 0x6e, 0x74, 0x55, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x46, 0x43, 0x6e, 0x74,
	0x44, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x4e, 0x46, 0x43, 0x6e,
	0x74, 0x44, 0x6f, 0x77, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x46, 0x43, 0x6e, 0x74, 0x44, 0x6f,
	0x77, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x41, 0x46, 0x43, 0x6e, 0x74, 0x44,
	0x6f, 0x77, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x66, 0x46, 0x43, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x43, 0x6f, 0x6e, 0x66, 0x46, 0x43, 0x6e, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x4b, 0x45, 0x4b, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x4b, 0x45, 0x4b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x17, 0x0a, 0x07,
	0x41, 0x45, 0x53, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x41,
	0x45, 0x53, 0x4b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x03, 0x70, 0x65, 0x72, 0x22, 0x41, 0x0a, 0x20, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x46, 0x6f, 0x72, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x22, 0xab, 0x01, 0x0a, 0x21, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x46, 0x6f,
	0x72, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3e, 0x0a, 0x10, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x73, 0x2e,
	0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x48, 0x00,
	0x52, 0x0e, 0x75, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74,
	0x12, 0x3d, 0x0a, 0x0e, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x73, 0x2e, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x48, 0x00,
	0x52, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x0a, 0x1f, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64,
	0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x65,
	0x76, 0x45, 0x75, 0x69, 0x22, 0xaa, 0x01, 0x0a, 0x20, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x10, 0x75, 0x70, 0x6c,
	0x69, 0x6e, 0x6b, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x73, 0x2e, 0x55, 0x70, 0x6c, 0x69, 0x6e, 0x6b, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x48, 0x00, 0x52, 0x0e, 0x75, 0x70, 0x6c, 0x69, 0x6e,
	0x6b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x12, 0x3d, 0x0a, 0x0e, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6e, 0x73, 0x2e, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x46,
	0x72, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x6c,
	0x69, 0x6e, 0x6b, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x22, 0x56, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0xf1, 0x01, 0x0a, 0x0e, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x45, 0x0a, 0x0e, 0x65, 0x78, 0x74, 0x72,
	0x61, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6e, 0x73, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x0d, 0x65, 0x78, 0x74, 0x72, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12,
	0x40, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x78,
	0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x64, 0x6f,
	0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x22, 0xd3, 0x01,
	0x0a, 0x1a, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x0a,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x62,
	0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x10, 0x73, 0x70, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x73, 0x22, 0x5a, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x73,
	0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x0e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22,
	0x2e, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x2a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x22, 0xce, 0x01, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x73, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x5a, 0x0a, 0x1b,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0f, 0x67,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x73, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x0e, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x2d, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x22, 0xda, 0x02, 0x0a, 0x0e, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x63,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x6d, 0x63, 0x41,
	0x64, 0x64, 0x72, 0x12, 0x1f, 0x0a, 0x0c, 0x6d, 0x63, 0x5f, 0x6e, 0x77, 0x6b, 0x5f, 0x73, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6d, 0x63, 0x4e, 0x77, 0x6b,
	0x53, 0x4b, 0x65, 0x79, 0x12, 0x13, 0x0a, 0x05, 0x66, 0x5f, 0x63, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x43, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x0a, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e,
	0x6e, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x64, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x64, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x28,
	0x0a, 0x10, 0x70, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x70, 0x69, 0x6e, 0x67, 0x53, 0x6c,
	0x6f, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x10, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x49, 0x64, 0x22, 0x5a, 0x0a, 0x1b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e,
	0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x22, 0x2e, 0x0a, 0x1c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x2a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x22, 0xce, 0x01, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x5a, 0x0a,
	0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0f,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6e, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0e, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x2d, 0x0a, 0x1b, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x22, 0x69, 0x0a, 0x20, 0x41, 0x64, 0x64, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x45, 0x75, 0x69, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x22, 0x6e, 0x0a, 0x25, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07,
	0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x45, 0x75, 0x69, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x12, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x66, 0x5f, 0x63, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x66, 0x43, 0x6e, 0x74, 0x12, 0x15, 0x0a,
	0x06, 0x66, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6d, 0x5f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x66, 0x72, 0x6d, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x6c, 0x0a, 0x20, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x14, 0x6d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x73, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x12, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x22, 0x5b, 0x0a, 0x2b, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x22, 0x5e, 0x0a, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x22, 0x7d, 0x0a, 0x2f, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x15, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6e, 0x73, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x13, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22,
	0x53, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x41, 0x44, 0x52, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74,
	0x68, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0e, 0x61,
	0x64, 0x72, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x73, 0x2e, 0x41, 0x44, 0x52, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x0d, 0x61, 0x64, 0x72, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69,
	0x74, 0x68, 0x6d, 0x73, 0x22, 0x32, 0x0a, 0x0c, 0x41, 0x44, 0x52, 0x41, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x33, 0x0a, 0x18, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x5f, 0x65, 0x75, 0x69, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x64, 0x65, 0x76, 0x45, 0x75, 0x69, 0x22, 0x89, 0x01,
	0x0a, 0x15, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x1c, 0x0a, 0x08, 0x52, 0x58, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x58, 0x31, 0x10, 0x00, 0x12, 0x07,
	0x0a, 0x03, 0x52, 0x58, 0x32, 0x10, 0x01, 0x2a, 0x33, 0x0a, 0x09, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x6e, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x65,
	0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x10, 0x02, 0x2a, 0x6c, 0x0a, 0x13,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x48,
	0x4f, 0x55, 0x52, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x41, 0x59, 0x10, 0x03, 0x12, 0x08,
	0x0a, 0x04, 0x57, 0x45, 0x45, 0x4b, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x4f, 0x4e, 0x54,
	0x48, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x51, 0x55, 0x41, 0x52, 0x54, 0x45, 0x52, 0x10, 0x06,
	0x12, 0x08, 0x0a, 0x04, 0x59, 0x45, 0x41, 0x52, 0x10, 0x07, 0x2a, 0x2e, 0x0a, 0x12, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x0b, 0x0a, 0x07, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x43, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x5f, 0x42, 0x10, 0x01, 0x32, 0xdd, 0x23, 0x0a, 0x14, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x6e, 0x73,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6e,
	0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x52, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x6e,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x1f, 0x2e, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x6e,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6e, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x14, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x6e, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x51,
	0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x58, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x6e, 0x73, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6e, 0x73, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x1b, 0x2e, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6e,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x13,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x6e, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x12, 0x1e, 0x2e, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x41,
	0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x17,
	0x2e, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x3a, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x14,
	0x2e, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a,
	0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x17, 0x2e,
	0x6e, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x41, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x17, 0x2e, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x19, 0x2e, 0x6e, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x10, 0x44, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x1b,
	0x2e, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x2e, 0x6e,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x6e,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x4f, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x20, 0x2e, 0x6e, 0x73, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x6e, 0x73, 0x2e,
	0x46, 0x43, 0x6e, 0x74, 0x49, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5b, 0x0a, 0x19, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x76, 0x45, 0x55, 0x49, 0x12, 0x24, 0x2e,
	0x6e, 0x73, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x76, 0x45, 0x55, 0x49, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x73, 0x0a,
	0x1c, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x76, 0x45, 0x55, 0x49, 0x12, 0x27, 0x2e,
	0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x76, 0x45, 0x55, 0x49, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x46,
	0x6f, 0x72, 0x44, 0x65, 0x76, 0x45, 0x55, 0x49, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x73, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x77,
	0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x46, 0x43, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x76, 0x45,
	0x55, 0x49, 0x12, 0x27, 0x2e, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x46, 0x43, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x44, 0x65,
	0x76, 0x45, 0x55, 0x49, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6e, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x69, 0x6e, 0x6b,
	0x46, 0x43, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x76, 0x45, 0x55, 0x49, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x61,
	0x6e, 0x64, 0x6f, 0x6d, 0x44, 0x65, 0x76, 0x41, 0x64, 0x64, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x44, 0x65, 0x76, 0x41, 0x64, 0x64, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x41, 0x43,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x24, 0x2e, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x41, 0x43, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x55, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x65, 0x74,
	0x61, 0x72, 0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x21, 0x2e, 0x6e, 0x73, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x65, 0x74, 0x61, 0x72, 0x79, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x18, 0x2e, 0x6e, 0x73, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x15, 0x2e, 0x6e, 0x73, 0x2e,
	0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x18, 0x2e, 0x6e,
	0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x43, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x12, 0x18, 0x2e, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x20, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x6e, 0x73, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1f,
	0x2e, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x20, 0x2e, 0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x6e, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x1f, 0x2e, 0x6e, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77,
	0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x6c, 0x65, 0x12, 0x1f, 0x2e, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x1a, 0x2e, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x6e,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6c, 0x0a, 0x19, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x46, 0x6f,
	0x72, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x24, 0x2e, 0x6e, 0x73, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x46, 0x6f, 0x72,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4c,
	0x6f, 0x67, 0x73, 0x46, 0x6f, 0x72, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x69, 0x0a, 0x18, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x46, 0x6f, 0x72, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x23, 0x2e, 0x6e, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x46, 0x6f, 0x72, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x6e, 0x73, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4c, 0x6f, 0x67, 0x73, 0x46,
	0x6f, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x30, 0x01, 0x12, 0x5b, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x2e, 0x6e,
	0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x6e, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x52, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x2e, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1f, 0x2e,
	0x6e, 0x73, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x1f, 0x2e, 0x6e, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x19, 0x41,
	0x64, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x24, 0x2e, 0x6e, 0x73, 0x2e, 0x41, 0x64,
	0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x6f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x1e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x29, 0x2e, 0x6e, 0x73, 0x2e,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x72, 0x6f, 0x6d,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x5b, 0x0a, 0x19, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x24, 0x2e, 0x6e,
	0x73, 0x2e, 0x45, 0x6e, 0x71, 0x75, 0x65, 0x75, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61,
	0x73, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x24,
	0x46, 0x6c, 0x75, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x46, 0x6f, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x2f, 0x2e, 0x6e, 0x73, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x46, 0x6f, 0x72,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x94, 0x01, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x32, 0x2e, 0x6e, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63,
	0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x33, 0x2e, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x63, 0x61, 0x73,
	0x74, 0x51, 0x75, 0x65, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x46, 0x6f, 0x72, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x63, 0x61, 0x73, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x6e,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x44, 0x52,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x44, 0x52, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x4c, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46,
	0x6f, 0x72, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x2e, 0x6e, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x46, 0x6f, 0x72,
	0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x4b, 0x0a, 0x11, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x6f, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x6e, 0x73, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a,
	0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x6e, 0x73, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61,
	0x79, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x15, 0x2e, 0x6e, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x6e,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x65, 0x0a, 0x06, 0x63, 0x6f,
	0x6d, 0x2e, 0x6e, 0x73, 0x42, 0x07, 0x4e, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x2a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x72, 0x6f, 0x63,
	0x61, 0x61, 0x72, 0x2f, 0x63, 0x68, 0x69, 0x72, 0x70, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2d, 0x61,
	0x70, 0x69, 0x2f, 0x67, 0x6f, 0x2f, 0x76, 0x33, 0x2f, 0x6e, 0x73, 0xa2, 0x02, 0x03, 0x4e, 0x58,
	0x58, 0xaa, 0x02, 0x02, 0x4e, 0x73, 0xca, 0x02, 0x02, 0x4e, 0x73, 0xe2, 0x02, 0x0e, 0x4e, 0x73,
	0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x02, 0x4e,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ns_ns_proto_rawDescOnce sync.Once
	file_ns_ns_proto_rawDescData = file_ns_ns_proto_rawDesc
)

func file_ns_ns_proto_rawDescGZIP() []byte {
	file_ns_ns_proto_rawDescOnce.Do(func() {
		file_ns_ns_proto_rawDescData = protoimpl.X.CompressGZIP(file_ns_ns_proto_rawDescData)
	})
	return file_ns_ns_proto_rawDescData
}

var file_ns_ns_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_ns_ns_proto_msgTypes = make([]protoimpl.MessageInfo, 97)
var file_ns_ns_proto_goTypes = []interface{}{
	(RXWindow)(0),                                           // 0: ns.RXWindow
	(RateLimit)(0),                                          // 1: ns.RateLimit
	(AggregationInterval)(0),                                // 2: ns.AggregationInterval
	(MulticastGroupType)(0),                                 // 3: ns.MulticastGroupType
	(*CreateServiceProfileRequest)(nil),                     // 4: ns.CreateServiceProfileRequest
	(*CreateServiceProfileResponse)(nil),                    // 5: ns.CreateServiceProfileResponse
	(*GetServiceProfileRequest)(nil),                        // 6: ns.GetServiceProfileRequest
	(*GetServiceProfileResponse)(nil),                       // 7: ns.GetServiceProfileResponse
	(*UpdateServiceProfileRequest)(nil),                     // 8: ns.UpdateServiceProfileRequest
	(*DeleteServiceProfileRequest)(nil),                     // 9: ns.DeleteServiceProfileRequest
	(*CreateRoutingProfileRequest)(nil),                     // 10: ns.CreateRoutingProfileRequest
	(*CreateRoutingProfileResponse)(nil),                    // 11: ns.CreateRoutingProfileResponse
	(*GetRoutingProfileRequest)(nil),                        // 12: ns.GetRoutingProfileRequest
	(*GetRoutingProfileResponse)(nil),                       // 13: ns.GetRoutingProfileResponse
	(*UpdateRoutingProfileRequest)(nil),                     // 14: ns.UpdateRoutingProfileRequest
	(*DeleteRoutingProfileRequest)(nil),                     // 15: ns.DeleteRoutingProfileRequest
	(*CreateDeviceProfileRequest)(nil),                      // 16: ns.CreateDeviceProfileRequest
	(*CreateDeviceProfileResponse)(nil),                     // 17: ns.CreateDeviceProfileResponse
	(*GetDeviceProfileRequest)(nil),                         // 18: ns.GetDeviceProfileRequest
	(*GetDeviceProfileResponse)(nil),                        // 19: ns.GetDeviceProfileResponse
	(*UpdateDeviceProfileRequest)(nil),                      // 20: ns.UpdateDeviceProfileRequest
	(*DeleteDeviceProfileRequest)(nil),                      // 21: ns.DeleteDeviceProfileRequest
	(*Device)(nil),                                          // 22: ns.Device
	(*CreateDeviceRequest)(nil),                             // 23: ns.CreateDeviceRequest
	(*GetDeviceRequest)(nil),                                // 24: ns.GetDeviceRequest
	(*GetDeviceResponse)(nil),                               // 25: ns.GetDeviceResponse
	(*GetDeviceForExportResponse)(nil),                      // 26: ns.GetDeviceForExportResponse
	(*UpdateDeviceRequest)(nil),                             // 27: ns.UpdateDeviceRequest
	(*DeleteDeviceRequest)(nil),                             // 28: ns.DeleteDeviceRequest
	(*DeviceActivation)(nil),                                // 29: ns.DeviceActivation
	(*ExtraChannels)(nil),                                   // 30: ns.ExtraChannels
	(*ActivateDeviceRequest)(nil),                           // 31: ns.ActivateDeviceRequest
	(*DeactivateDeviceRequest)(nil),                         // 32: ns.DeactivateDeviceRequest
	(*GetDeviceActivationRequest)(nil),                      // 33: ns.GetDeviceActivationRequest
	(*GetDeviceActivationResponse)(nil),                     // 34: ns.GetDeviceActivationResponse
	(*GetRandomDevAddrResponse)(nil),                        // 35: ns.GetRandomDevAddrResponse
	(*CreateMACCommandQueueItemRequest)(nil),                // 36: ns.CreateMACCommandQueueItemRequest
	(*SendProprietaryPayloadRequest)(nil),                   // 37: ns.SendProprietaryPayloadRequest
	(*Gateway)(nil),                                         // 38: ns.Gateway
	(*GatewayMeta)(nil),                                     // 39: ns.GatewayMeta
	(*GatewayBoard)(nil),                                    // 40: ns.GatewayBoard
	(*CreateGatewayRequest)(nil),                            // 41: ns.CreateGatewayRequest
	(*GetGatewayRequest)(nil),                               // 42: ns.GetGatewayRequest
	(*GetGatewayMetaResponse)(nil),                          // 43: ns.GetGatewayMetaResponse
	(*GetGatewayResponse)(nil),                              // 44: ns.GetGatewayResponse
	(*UpdateGatewayRequest)(nil),                            // 45: ns.UpdateGatewayRequest
	(*DeleteGatewayRequest)(nil),                            // 46: ns.DeleteGatewayRequest
	(*GenerateGatewayClientCertificateRequest)(nil),         // 47: ns.GenerateGatewayClientCertificateRequest
	(*GenerateGatewayClientCertificateResponse)(nil),        // 48: ns.GenerateGatewayClientCertificateResponse
	(*GatewayStats)(nil),                                    // 49: ns.GatewayStats
	(*GetGatewayStatsRequest)(nil),                          // 50: ns.GetGatewayStatsRequest
	(*GetGatewayStatsResponse)(nil),                         // 51: ns.GetGatewayStatsResponse
	(*DeviceQueueItem)(nil),                                 // 52: ns.DeviceQueueItem
	(*CreateDeviceQueueItemRequest)(nil),                    // 53: ns.CreateDeviceQueueItemRequest
	(*FlushDeviceQueueForDevEUIRequest)(nil),                // 54: ns.FlushDeviceQueueForDevEUIRequest
	(*GetDeviceQueueItemsForDevEUIRequest)(nil),             // 55: ns.GetDeviceQueueItemsForDevEUIRequest
	(*GetDeviceQueueItemsForDevEUIResponse)(nil),            // 56: ns.GetDeviceQueueItemsForDevEUIResponse
	(*GetNextDownlinkFCntForDevEUIRequest)(nil),             // 57: ns.GetNextDownlinkFCntForDevEUIRequest
	(*GetNextDownlinkFCntForDevEUIResponse)(nil),            // 58: ns.GetNextDownlinkFCntForDevEUIResponse
	(*FCntInResponse)(nil),                                  // 59: ns.FCntInResponse
	(*UplinkFrameLog)(nil),                                  // 60: ns.UplinkFrameLog
	(*DownlinkFrameLog)(nil),                                // 61: ns.DownlinkFrameLog
	(*DeviceActivationContext)(nil),                         // 62: ns.DeviceActivationContext
	(*StreamUplink)(nil),                                    // 63: ns.StreamUplink
	(*StreamDownlink)(nil),                                  // 64: ns.StreamDownlink
	(*RXFrameForHandyRusty)(nil),                            // 65: ns.RXFrameForHandyRusty
	(*TXFrameForHandyRusty)(nil),                            // 66: ns.TXFrameForHandyRusty
	(*DeviceSession)(nil),                                   // 67: ns.DeviceSession
	(*StreamFrameLogsForGatewayRequest)(nil),                // 68: ns.StreamFrameLogsForGatewayRequest
	(*StreamFrameLogsForGatewayResponse)(nil),               // 69: ns.StreamFrameLogsForGatewayResponse
	(*StreamFrameLogsForDeviceRequest)(nil),                 // 70: ns.StreamFrameLogsForDeviceRequest
	(*StreamFrameLogsForDeviceResponse)(nil),                // 71: ns.StreamFrameLogsForDeviceResponse
	(*GetVersionResponse)(nil),                              // 72: ns.GetVersionResponse
	(*GatewayProfile)(nil),                                  // 73: ns.GatewayProfile
	(*GatewayProfileExtraChannel)(nil),                      // 74: ns.GatewayProfileExtraChannel
	(*CreateGatewayProfileRequest)(nil),                     // 75: ns.CreateGatewayProfileRequest
	(*CreateGatewayProfileResponse)(nil),                    // 76: ns.CreateGatewayProfileResponse
	(*GetGatewayProfileRequest)(nil),                        // 77: ns.GetGatewayProfileRequest
	(*GetGatewayProfileResponse)(nil),                       // 78: ns.GetGatewayProfileResponse
	(*UpdateGatewayProfileRequest)(nil),                     // 79: ns.UpdateGatewayProfileRequest
	(*DeleteGatewayProfileRequest)(nil),                     // 80: ns.DeleteGatewayProfileRequest
	(*MulticastGroup)(nil),                                  // 81: ns.MulticastGroup
	(*CreateMulticastGroupRequest)(nil),                     // 82: ns.CreateMulticastGroupRequest
	(*CreateMulticastGroupResponse)(nil),                    // 83: ns.CreateMulticastGroupResponse
	(*GetMulticastGroupRequest)(nil),                        // 84: ns.GetMulticastGroupRequest
	(*GetMulticastGroupResponse)(nil),                       // 85: ns.GetMulticastGroupResponse
	(*UpdateMulticastGroupRequest)(nil),                     // 86: ns.UpdateMulticastGroupRequest
	(*DeleteMulticastGroupRequest)(nil),                     // 87: ns.DeleteMulticastGroupRequest
	(*AddDeviceToMulticastGroupRequest)(nil),                // 88: ns.AddDeviceToMulticastGroupRequest
	(*RemoveDeviceFromMulticastGroupRequest)(nil),           // 89: ns.RemoveDeviceFromMulticastGroupRequest
	(*MulticastQueueItem)(nil),                              // 90: ns.MulticastQueueItem
	(*EnqueueMulticastQueueItemRequest)(nil),                // 91: ns.EnqueueMulticastQueueItemRequest
	(*FlushMulticastQueueForMulticastGroupRequest)(nil),     // 92: ns.FlushMulticastQueueForMulticastGroupRequest
	(*GetMulticastQueueItemsForMulticastGroupRequest)(nil),  // 93: ns.GetMulticastQueueItemsForMulticastGroupRequest
	(*GetMulticastQueueItemsForMulticastGroupResponse)(nil), // 94: ns.GetMulticastQueueItemsForMulticastGroupResponse
	(*GetADRAlgorithmsResponse)(nil),                        // 95: ns.GetADRAlgorithmsResponse
	(*ADRAlgorithm)(nil),                                    // 96: ns.ADRAlgorithm
	(*ClearDeviceNoncesRequest)(nil),                        // 97: ns.ClearDeviceNoncesRequest
	(*CountGatewaysResponse)(nil),                           // 98: ns.CountGatewaysResponse
	nil,                                                     // 99: ns.GatewayMeta.MetaDataEntry
	nil,                                                     // 100: ns.CountGatewaysResponse.DataEntry
	(*ServiceProfile)(nil),                                  // 101: ns.ServiceProfile
	(*timestamppb.Timestamp)(nil),                           // 102: google.protobuf.Timestamp
	(*RoutingProfile)(nil),                                  // 103: ns.RoutingProfile
	(*DeviceProfile)(nil),                                   // 104: ns.DeviceProfile
	(*common.Location)(nil),                                 // 105: common.Location
	(*gw.UplinkTXInfo)(nil),                                 // 106: gw.UplinkTXInfo
	(*gw.UplinkRXInfo)(nil),                                 // 107: gw.UplinkRXInfo
	(common.MType)(0),                                       // 108: common.MType
	(*gw.DownlinkTXInfo)(nil),                               // 109: gw.DownlinkTXInfo
	(*common.KeyEnvelope)(nil),                              // 110: common.KeyEnvelope
	(common.Region)(0),                                      // 111: common.Region
	(*durationpb.Duration)(nil),                             // 112: google.protobuf.Duration
	(common.Modulation)(0),                                  // 113: common.Modulation
	(*emptypb.Empty)(nil),                                   // 114: google.protobuf.Empty
}
var file_ns_ns_proto_depIdxs = []int32{
	101, // 0: ns.CreateServiceProfileRequest.service_profile:type_name -> ns.ServiceProfile
	101, // 1: ns.GetServiceProfileResponse.service_profile:type_name -> ns.ServiceProfile
	102, // 2: ns.GetServiceProfileResponse.created_at:type_name -> google.protobuf.Timestamp
	102, // 3: ns.GetServiceProfileResponse.updated_at:type_name -> google.protobuf.Timestamp
	101, // 4: ns.UpdateServiceProfileRequest.service_profile:type_name -> ns.ServiceProfile
	103, // 5: ns.CreateRoutingProfileRequest.routing_profile:type_name -> ns.RoutingProfile
	103, // 6: ns.GetRoutingProfileResponse.routing_profile:type_name -> ns.RoutingProfile
	102, // 7: ns.GetRoutingProfileResponse.created_at:type_name -> google.protobuf.Timestamp
	102, // 8: ns.GetRoutingProfileResponse.updated_at:type_name -> google.protobuf.Timestamp
	103, // 9: ns.UpdateRoutingProfileRequest.routing_profile:type_name -> ns.RoutingProfile
	104, // 10: ns.CreateDeviceProfileRequest.device_profile:type_name -> ns.DeviceProfile
	104, // 11: ns.GetDeviceProfileResponse.device_profile:type_name -> ns.DeviceProfile
	102, // 12: ns.GetDeviceProfileResponse.created_at:type_name -> google.protobuf.Timestamp
	102, // 13: ns.GetDeviceProfileResponse.updated_at:type_name -> google.protobuf.Timestamp
	104, // 14: ns.UpdateDeviceProfileRequest.device_profile:type_name -> ns.DeviceProfile
	22,  // 15: ns.CreateDeviceRequest.device:type_name -> ns.Device
	22,  // 16: ns.GetDeviceResponse.device:type_name -> ns.Device
	102, // 17: ns.GetDeviceResponse.created_at:type_name -> google.protobuf.Timestamp
	102, // 18: ns.GetDeviceResponse.updated_at:type_name -> google.protobuf.Timestamp
	22,  // 19: ns.UpdateDeviceRequest.device:type_name -> ns.Device
	30,  // 20: ns.DeviceActivation.extra_uplink_channels:type_name -> ns.ExtraChannels
	29,  // 21: ns.ActivateDeviceRequest.device_activation:type_name -> ns.DeviceActivation
	29,  // 22: ns.GetDeviceActivationResponse.device_activation:type_name -> ns.DeviceActivation
	105, // 23: ns.Gateway.location:type_name -> common.Location
	40,  // 24: ns.Gateway.boards:type_name -> ns.GatewayBoard
	40,  // 25: ns.GatewayMeta.boards:type_name -> ns.GatewayBoard
	105, // 26: ns.GatewayMeta.location:type_name -> common.Location
	102, // 27: ns.GatewayMeta.first_seen_at:type_name -> google.protobuf.Timestamp
	102, // 28: ns.GatewayMeta.last_uplink_at:type_name -> google.protobuf.Timestamp
	102, // 29: ns.GatewayMeta.last_stats_at:type_name -> google.protobuf.Timestamp
	102, // 30: ns.GatewayMeta.gps_seen_at:type_name -> google.protobuf.Timestamp
	99,  // 31: ns.GatewayMeta.meta_data:type_name -> ns.GatewayMeta.MetaDataEntry
	38,  // 32: ns.CreateGatewayRequest.gateway:type_name -> ns.Gateway
	39,  // 33: ns.GetGatewayMetaResponse.gateway_meta:type_name -> ns.GatewayMeta
	102, // 34: ns.GetGatewayResponse.created_at:type_name -> google.protobuf.Timestamp
	102, // 35: ns.GetGatewayResponse.updated_at:type_name -> google.protobuf.Timestamp
	38,  // 36: ns.GetGatewayResponse.gateway:type_name -> ns.Gateway
	39,  // 37: ns.GetGatewayResponse.meta:type_name -> ns.GatewayMeta
	38,  // 38: ns.UpdateGatewayRequest.gateway:type_name -> ns.Gateway
	102, // 39: ns.GenerateGatewayClientCertificateResponse.expires_at:type_name -> google.protobuf.Timestamp
	102, // 40: ns.GatewayStats.timestamp:type_name -> google.protobuf.Timestamp
	2,   // 41: ns.GetGatewayStatsRequest.interval:type_name -> ns.AggregationInterval
	102, // 42: ns.GetGatewayStatsRequest.start_timestamp:type_name -> google.protobuf.Timestamp
	102, // 43: ns.GetGatewayStatsRequest.end_timestamp:type_name -> google.protobuf.Timestamp
	49,  // 44: ns.GetGatewayStatsResponse.result:type_name -> ns.GatewayStats
	102, // 45: ns.DeviceQueueItem.created_at:type_name -> google.protobuf.Timestamp
	102, // 46: ns.DeviceQueueItem.timeout_after:type_name -> google.protobuf.Timestamp
	52,  // 47: ns.CreateDeviceQueueItemRequest.item:type_name -> ns.DeviceQueueItem
	52,  // 48: ns.GetDeviceQueueItemsForDevEUIResponse.items:type_name -> ns.DeviceQueueItem
	106, // 49: ns.UplinkFrameLog.tx_info:type_name -> gw.UplinkTXInfo
	107, // 50: ns.UplinkFrameLog.rx_info:type_name -> gw.UplinkRXInfo
	108, // 51: ns.UplinkFrameLog.m_type:type_name -> common.MType
	102, // 52: ns.UplinkFrameLog.published_at:type_name -> google.protobuf.Timestamp
	109, // 53: ns.DownlinkFrameLog.tx_info:type_name -> gw.DownlinkTXInfo
	108, // 54: ns.DownlinkFrameLog.m_type:type_name -> common.MType
	102, // 55: ns.DownlinkFrameLog.published_at:type_name -> google.protobuf.Timestamp
	1,   // 56: ns.DownlinkFrameLog.limit:type_name -> ns.RateLimit
	110, // 57: ns.DeviceActivationContext.app_s_key:type_name -> common.KeyEnvelope
	106, // 58: ns.StreamUplink.tx_info:type_name -> gw.UplinkTXInfo
	107, // 59: ns.StreamUplink.rx_info:type_name -> gw.UplinkRXInfo
	62,  // 60: ns.StreamUplink.device_activation_context:type_name -> ns.DeviceActivationContext
	102, // 61: ns.StreamUplink.time:type_name -> google.protobuf.Timestamp
	1,   // 62: ns.StreamUplink.limit:type_name -> ns.RateLimit
	67,  // 63: ns.StreamUplink.device_session:type_name -> ns.DeviceSession
	109, // 64: ns.StreamDownlink.tx_info:type_name -> gw.DownlinkTXInfo
	67,  // 65: ns.StreamDownlink.device_session:type_name -> ns.DeviceSession
	1,   // 66: ns.StreamDownlink.limit:type_name -> ns.RateLimit
	106, // 67: ns.RXFrameForHandyRusty.tx_info:type_name -> gw.UplinkTXInfo
	107, // 68: ns.RXFrameForHandyRusty.rx_info:type_name -> gw.UplinkRXInfo
	67,  // 69: ns.RXFrameForHandyRusty.device_session:type_name -> ns.DeviceSession
	1,   // 70: ns.RXFrameForHandyRusty.limit:type_name -> ns.RateLimit
	109, // 71: ns.TXFrameForHandyRusty.tx_info:type_name -> gw.DownlinkTXInfo
	67,  // 72: ns.TXFrameForHandyRusty.device_session:type_name -> ns.DeviceSession
	1,   // 73: ns.TXFrameForHandyRusty.limit:type_name -> ns.RateLimit
	60,  // 74: ns.StreamFrameLogsForGatewayResponse.uplink_frame_set:type_name -> ns.UplinkFrameLog
	61,  // 75: ns.StreamFrameLogsForGatewayResponse.downlink_frame:type_name -> ns.DownlinkFrameLog
	60,  // 76: ns.StreamFrameLogsForDeviceResponse.uplink_frame_set:type_name -> ns.UplinkFrameLog
	61,  // 77: ns.StreamFrameLogsForDeviceResponse.downlink_frame:type_name -> ns.DownlinkFrameLog
	111, // 78: ns.GetVersionResponse.region:type_name -> common.Region
	74,  // 79: ns.GatewayProfile.extra_channels:type_name -> ns.GatewayProfileExtraChannel
	112, // 80: ns.GatewayProfile.stats_interval:type_name -> google.protobuf.Duration
	113, // 81: ns.GatewayProfileExtraChannel.modulation:type_name -> common.Modulation
	73,  // 82: ns.CreateGatewayProfileRequest.gateway_profile:type_name -> ns.GatewayProfile
	73,  // 83: ns.GetGatewayProfileResponse.gateway_profile:type_name -> ns.GatewayProfile
	102, // 84: ns.GetGatewayProfileResponse.created_at:type_name -> google.protobuf.Timestamp
	102, // 85: ns.GetGatewayProfileResponse.updated_at:type_name -> google.protobuf.Timestamp
	73,  // 86: ns.UpdateGatewayProfileRequest.gateway_profile:type_name -> ns.GatewayProfile
	3,   // 87: ns.MulticastGroup.group_type:type_name -> ns.MulticastGroupType
	81,  // 88: ns.CreateMulticastGroupRequest.multicast_group:type_name -> ns.MulticastGroup
	81,  // 89: ns.GetMulticastGroupResponse.multicast_group:type_name -> ns.MulticastGroup
	102, // 90: ns.GetMulticastGroupResponse.created_at:type_name -> google.protobuf.Timestamp
	102, // 91: ns.GetMulticastGroupResponse.updated_at:type_name -> google.protobuf.Timestamp
	81,  // 92: ns.UpdateMulticastGroupRequest.multicast_group:type_name -> ns.MulticastGroup
	90,  // 93: ns.EnqueueMulticastQueueItemRequest.multicast_queue_item:type_name -> ns.MulticastQueueItem
	90,  // 94: ns.GetMulticastQueueItemsForMulticastGroupResponse.multicast_queue_items:type_name -> ns.MulticastQueueItem
	96,  // 95: ns.GetADRAlgorithmsResponse.adr_algorithms:type_name -> ns.ADRAlgorithm
	100, // 96: ns.CountGatewaysResponse.data:type_name -> ns.CountGatewaysResponse.DataEntry
	4,   // 97: ns.NetworkServerService.CreateServiceProfile:input_type -> ns.CreateServiceProfileRequest
	6,   // 98: ns.NetworkServerService.GetServiceProfile:input_type -> ns.GetServiceProfileRequest
	8,   // 99: ns.NetworkServerService.UpdateServiceProfile:input_type -> ns.UpdateServiceProfileRequest
	9,   // 100: ns.NetworkServerService.DeleteServiceProfile:input_type -> ns.DeleteServiceProfileRequest
	10,  // 101: ns.NetworkServerService.CreateRoutingProfile:input_type -> ns.CreateRoutingProfileRequest
	12,  // 102: ns.NetworkServerService.GetRoutingProfile:input_type -> ns.GetRoutingProfileRequest
	14,  // 103: ns.NetworkServerService.UpdateRoutingProfile:input_type -> ns.UpdateRoutingProfileRequest
	15,  // 104: ns.NetworkServerService.DeleteRoutingProfile:input_type -> ns.DeleteRoutingProfileRequest
	16,  // 105: ns.NetworkServerService.CreateDeviceProfile:input_type -> ns.CreateDeviceProfileRequest
	18,  // 106: ns.NetworkServerService.GetDeviceProfile:input_type -> ns.GetDeviceProfileRequest
	20,  // 107: ns.NetworkServerService.UpdateDeviceProfile:input_type -> ns.UpdateDeviceProfileRequest
	21,  // 108: ns.NetworkServerService.DeleteDeviceProfile:input_type -> ns.DeleteDeviceProfileRequest
	23,  // 109: ns.NetworkServerService.CreateDevice:input_type -> ns.CreateDeviceRequest
	24,  // 110: ns.NetworkServerService.GetDevice:input_type -> ns.GetDeviceRequest
	27,  // 111: ns.NetworkServerService.UpdateDevice:input_type -> ns.UpdateDeviceRequest
	28,  // 112: ns.NetworkServerService.DeleteDevice:input_type -> ns.DeleteDeviceRequest
	31,  // 113: ns.NetworkServerService.ActivateDevice:input_type -> ns.ActivateDeviceRequest
	32,  // 114: ns.NetworkServerService.DeactivateDevice:input_type -> ns.DeactivateDeviceRequest
	33,  // 115: ns.NetworkServerService.GetDeviceActivation:input_type -> ns.GetDeviceActivationRequest
	53,  // 116: ns.NetworkServerService.CreateDeviceQueueItem:input_type -> ns.CreateDeviceQueueItemRequest
	54,  // 117: ns.NetworkServerService.FlushDeviceQueueForDevEUI:input_type -> ns.FlushDeviceQueueForDevEUIRequest
	55,  // 118: ns.NetworkServerService.GetDeviceQueueItemsForDevEUI:input_type -> ns.GetDeviceQueueItemsForDevEUIRequest
	57,  // 119: ns.NetworkServerService.GetNextDownlinkFCntForDevEUI:input_type -> ns.GetNextDownlinkFCntForDevEUIRequest
	114, // 120: ns.NetworkServerService.GetRandomDevAddr:input_type -> google.protobuf.Empty
	36,  // 121: ns.NetworkServerService.CreateMACCommandQueueItem:input_type -> ns.CreateMACCommandQueueItemRequest
	37,  // 122: ns.NetworkServerService.SendProprietaryPayload:input_type -> ns.SendProprietaryPayloadRequest
	41,  // 123: ns.NetworkServerService.CreateGateway:input_type -> ns.CreateGatewayRequest
	42,  // 124: ns.NetworkServerService.GetGateway:input_type -> ns.GetGatewayRequest
	45,  // 125: ns.NetworkServerService.UpdateGateway:input_type -> ns.UpdateGatewayRequest
	46,  // 126: ns.NetworkServerService.DeleteGateway:input_type -> ns.DeleteGatewayRequest
	47,  // 127: ns.NetworkServerService.GenerateGatewayClientCertificate:input_type -> ns.GenerateGatewayClientCertificateRequest
	75,  // 128: ns.NetworkServerService.CreateGatewayProfile:input_type -> ns.CreateGatewayProfileRequest
	77,  // 129: ns.NetworkServerService.GetGatewayProfile:input_type -> ns.GetGatewayProfileRequest
	79,  // 130: ns.NetworkServerService.UpdateGatewayProfile:input_type -> ns.UpdateGatewayProfileRequest
	80,  // 131: ns.NetworkServerService.DeleteGatewayProfile:input_type -> ns.DeleteGatewayProfileRequest
	50,  // 132: ns.NetworkServerService.GetGatewayStats:input_type -> ns.GetGatewayStatsRequest
	68,  // 133: ns.NetworkServerService.StreamFrameLogsForGateway:input_type -> ns.StreamFrameLogsForGatewayRequest
	70,  // 134: ns.NetworkServerService.StreamFrameLogsForDevice:input_type -> ns.StreamFrameLogsForDeviceRequest
	82,  // 135: ns.NetworkServerService.CreateMulticastGroup:input_type -> ns.CreateMulticastGroupRequest
	84,  // 136: ns.NetworkServerService.GetMulticastGroup:input_type -> ns.GetMulticastGroupRequest
	86,  // 137: ns.NetworkServerService.UpdateMulticastGroup:input_type -> ns.UpdateMulticastGroupRequest
	87,  // 138: ns.NetworkServerService.DeleteMulticastGroup:input_type -> ns.DeleteMulticastGroupRequest
	88,  // 139: ns.NetworkServerService.AddDeviceToMulticastGroup:input_type -> ns.AddDeviceToMulticastGroupRequest
	89,  // 140: ns.NetworkServerService.RemoveDeviceFromMulticastGroup:input_type -> ns.RemoveDeviceFromMulticastGroupRequest
	91,  // 141: ns.NetworkServerService.EnqueueMulticastQueueItem:input_type -> ns.EnqueueMulticastQueueItemRequest
	92,  // 142: ns.NetworkServerService.FlushMulticastQueueForMulticastGroup:input_type -> ns.FlushMulticastQueueForMulticastGroupRequest
	93,  // 143: ns.NetworkServerService.GetMulticastQueueItemsForMulticastGroup:input_type -> ns.GetMulticastQueueItemsForMulticastGroupRequest
	114, // 144: ns.NetworkServerService.GetVersion:input_type -> google.protobuf.Empty
	114, // 145: ns.NetworkServerService.GetADRAlgorithms:input_type -> google.protobuf.Empty
	24,  // 146: ns.NetworkServerService.GetDeviceForExport:input_type -> ns.GetDeviceRequest
	97,  // 147: ns.NetworkServerService.ClearDeviceNonces:input_type -> ns.ClearDeviceNoncesRequest
	114, // 148: ns.NetworkServerService.CountGateways:input_type -> google.protobuf.Empty
	42,  // 149: ns.NetworkServerService.GetGatewayMeta:input_type -> ns.GetGatewayRequest
	5,   // 150: ns.NetworkServerService.CreateServiceProfile:output_type -> ns.CreateServiceProfileResponse
	7,   // 151: ns.NetworkServerService.GetServiceProfile:output_type -> ns.GetServiceProfileResponse
	114, // 152: ns.NetworkServerService.UpdateServiceProfile:output_type -> google.protobuf.Empty
	114, // 153: ns.NetworkServerService.DeleteServiceProfile:output_type -> google.protobuf.Empty
	11,  // 154: ns.NetworkServerService.CreateRoutingProfile:output_type -> ns.CreateRoutingProfileResponse
	13,  // 155: ns.NetworkServerService.GetRoutingProfile:output_type -> ns.GetRoutingProfileResponse
	114, // 156: ns.NetworkServerService.UpdateRoutingProfile:output_type -> google.protobuf.Empty
	114, // 157: ns.NetworkServerService.DeleteRoutingProfile:output_type -> google.protobuf.Empty
	17,  // 158: ns.NetworkServerService.CreateDeviceProfile:output_type -> ns.CreateDeviceProfileResponse
	19,  // 159: ns.NetworkServerService.GetDeviceProfile:output_type -> ns.GetDeviceProfileResponse
	114, // 160: ns.NetworkServerService.UpdateDeviceProfile:output_type -> google.protobuf.Empty
	114, // 161: ns.NetworkServerService.DeleteDeviceProfile:output_type -> google.protobuf.Empty
	114, // 162: ns.NetworkServerService.CreateDevice:output_type -> google.protobuf.Empty
	25,  // 163: ns.NetworkServerService.GetDevice:output_type -> ns.GetDeviceResponse
	114, // 164: ns.NetworkServerService.UpdateDevice:output_type -> google.protobuf.Empty
	114, // 165: ns.NetworkServerService.DeleteDevice:output_type -> google.protobuf.Empty
	114, // 166: ns.NetworkServerService.ActivateDevice:output_type -> google.protobuf.Empty
	114, // 167: ns.NetworkServerService.DeactivateDevice:output_type -> google.protobuf.Empty
	34,  // 168: ns.NetworkServerService.GetDeviceActivation:output_type -> ns.GetDeviceActivationResponse
	59,  // 169: ns.NetworkServerService.CreateDeviceQueueItem:output_type -> ns.FCntInResponse
	114, // 170: ns.NetworkServerService.FlushDeviceQueueForDevEUI:output_type -> google.protobuf.Empty
	56,  // 171: ns.NetworkServerService.GetDeviceQueueItemsForDevEUI:output_type -> ns.GetDeviceQueueItemsForDevEUIResponse
	58,  // 172: ns.NetworkServerService.GetNextDownlinkFCntForDevEUI:output_type -> ns.GetNextDownlinkFCntForDevEUIResponse
	35,  // 173: ns.NetworkServerService.GetRandomDevAddr:output_type -> ns.GetRandomDevAddrResponse
	114, // 174: ns.NetworkServerService.CreateMACCommandQueueItem:output_type -> google.protobuf.Empty
	114, // 175: ns.NetworkServerService.SendProprietaryPayload:output_type -> google.protobuf.Empty
	114, // 176: ns.NetworkServerService.CreateGateway:output_type -> google.protobuf.Empty
	44,  // 177: ns.NetworkServerService.GetGateway:output_type -> ns.GetGatewayResponse
	114, // 178: ns.NetworkServerService.UpdateGateway:output_type -> google.protobuf.Empty
	114, // 179: ns.NetworkServerService.DeleteGateway:output_type -> google.protobuf.Empty
	48,  // 180: ns.NetworkServerService.GenerateGatewayClientCertificate:output_type -> ns.GenerateGatewayClientCertificateResponse
	76,  // 181: ns.NetworkServerService.CreateGatewayProfile:output_type -> ns.CreateGatewayProfileResponse
	78,  // 182: ns.NetworkServerService.GetGatewayProfile:output_type -> ns.GetGatewayProfileResponse
	114, // 183: ns.NetworkServerService.UpdateGatewayProfile:output_type -> google.protobuf.Empty
	114, // 184: ns.NetworkServerService.DeleteGatewayProfile:output_type -> google.protobuf.Empty
	51,  // 185: ns.NetworkServerService.GetGatewayStats:output_type -> ns.GetGatewayStatsResponse
	69,  // 186: ns.NetworkServerService.StreamFrameLogsForGateway:output_type -> ns.StreamFrameLogsForGatewayResponse
	71,  // 187: ns.NetworkServerService.StreamFrameLogsForDevice:output_type -> ns.StreamFrameLogsForDeviceResponse
	83,  // 188: ns.NetworkServerService.CreateMulticastGroup:output_type -> ns.CreateMulticastGroupResponse
	85,  // 189: ns.NetworkServerService.GetMulticastGroup:output_type -> ns.GetMulticastGroupResponse
	114, // 190: ns.NetworkServerService.UpdateMulticastGroup:output_type -> google.protobuf.Empty
	114, // 191: ns.NetworkServerService.DeleteMulticastGroup:output_type -> google.protobuf.Empty
	114, // 192: ns.NetworkServerService.AddDeviceToMulticastGroup:output_type -> google.protobuf.Empty
	114, // 193: ns.NetworkServerService.RemoveDeviceFromMulticastGroup:output_type -> google.protobuf.Empty
	114, // 194: ns.NetworkServerService.EnqueueMulticastQueueItem:output_type -> google.protobuf.Empty
	114, // 195: ns.NetworkServerService.FlushMulticastQueueForMulticastGroup:output_type -> google.protobuf.Empty
	94,  // 196: ns.NetworkServerService.GetMulticastQueueItemsForMulticastGroup:output_type -> ns.GetMulticastQueueItemsForMulticastGroupResponse
	72,  // 197: ns.NetworkServerService.GetVersion:output_type -> ns.GetVersionResponse
	95,  // 198: ns.NetworkServerService.GetADRAlgorithms:output_type -> ns.GetADRAlgorithmsResponse
	26,  // 199: ns.NetworkServerService.GetDeviceForExport:output_type -> ns.GetDeviceForExportResponse
	114, // 200: ns.NetworkServerService.ClearDeviceNonces:output_type -> google.protobuf.Empty
	98,  // 201: ns.NetworkServerService.CountGateways:output_type -> ns.CountGatewaysResponse
	43,  // 202: ns.NetworkServerService.GetGatewayMeta:output_type -> ns.GetGatewayMetaResponse
	150, // [150:203] is the sub-list for method output_type
	97,  // [97:150] is the sub-list for method input_type
	97,  // [97:97] is the sub-list for extension type_name
	97,  // [97:97] is the sub-list for extension extendee
	0,   // [0:97] is the sub-list for field type_name
}

func init() { file_ns_ns_proto_init() }
func file_ns_ns_proto_init() {
	if File_ns_ns_proto != nil {
		return
	}
	file_ns_profiles_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_ns_ns_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateServiceProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateServiceProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetServiceProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateServiceProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteServiceProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRoutingProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRoutingProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoutingProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRoutingProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRoutingProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRoutingProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeviceProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceForExportResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceActivation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraChannels); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActivateDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeactivateDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceActivationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceActivationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRandomDevAddrResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMACCommandQueueItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendProprietaryPayloadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gateway); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayBoard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGatewayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGatewayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGatewayMetaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGatewayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGatewayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGatewayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateGatewayClientCertificateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenerateGatewayClientCertificateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGatewayStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGatewayStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceQueueItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateDeviceQueueItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushDeviceQueueForDevEUIRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceQueueItemsForDevEUIRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDeviceQueueItemsForDevEUIResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNextDownlinkFCntForDevEUIRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNextDownlinkFCntForDevEUIResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FCntInResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UplinkFrameLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DownlinkFrameLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceActivationContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamUplink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamDownlink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RXFrameForHandyRusty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TXFrameForHandyRusty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamFrameLogsForGatewayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamFrameLogsForGatewayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamFrameLogsForDeviceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamFrameLogsForDeviceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayProfile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayProfileExtraChannel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGatewayProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateGatewayProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGatewayProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGatewayProfileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateGatewayProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteGatewayProfileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MulticastGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMulticastGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateMulticastGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMulticastGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMulticastGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMulticastGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMulticastGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddDeviceToMulticastGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDeviceFromMulticastGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MulticastQueueItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnqueueMulticastQueueItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushMulticastQueueForMulticastGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMulticastQueueItemsForMulticastGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMulticastQueueItemsForMulticastGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetADRAlgorithmsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ADRAlgorithm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearDeviceNoncesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ns_ns_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountGatewaysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_ns_ns_proto_msgTypes[65].OneofWrappers = []interface{}{
		(*StreamFrameLogsForGatewayResponse_UplinkFrameSet)(nil),
		(*StreamFrameLogsForGatewayResponse_DownlinkFrame)(nil),
	}
	file_ns_ns_proto_msgTypes[67].OneofWrappers = []interface{}{
		(*StreamFrameLogsForDeviceResponse_UplinkFrameSet)(nil),
		(*StreamFrameLogsForDeviceResponse_DownlinkFrame)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ns_ns_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   97,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ns_ns_proto_goTypes,
		DependencyIndexes: file_ns_ns_proto_depIdxs,
		EnumInfos:         file_ns_ns_proto_enumTypes,
		MessageInfos:      file_ns_ns_proto_msgTypes,
	}.Build()
	File_ns_ns_proto = out.File
	file_ns_ns_proto_rawDesc = nil
	file_ns_ns_proto_goTypes = nil
	file_ns_ns_proto_depIdxs = nil
}
