# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from chirpstack_api.as_pb.external.api import dictionary_pb2 as chirpstack__api_dot_as__pb_dot_external_dot_api_dot_dictionary__pb2


class DictionaryServiceStub(object):
    """DictionaryService the service manages all dictionaries
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetDictionary = channel.unary_unary(
                '/api.DictionaryService/GetDictionary',
                request_serializer=chirpstack__api_dot_as__pb_dot_external_dot_api_dot_dictionary__pb2.GetDictionaryRequest.SerializeToString,
                response_deserializer=chirpstack__api_dot_as__pb_dot_external_dot_api_dot_dictionary__pb2.GetDictionaryResponse.FromString,
                )


class DictionaryServiceServicer(object):
    """DictionaryService the service manages all dictionaries
    """

    def GetDictionary(self, request, context):
        """GetDictionary returns dictionary by dictionary type
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DictionaryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetDictionary': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDictionary,
                    request_deserializer=chirpstack__api_dot_as__pb_dot_external_dot_api_dot_dictionary__pb2.GetDictionaryRequest.FromString,
                    response_serializer=chirpstack__api_dot_as__pb_dot_external_dot_api_dot_dictionary__pb2.GetDictionaryResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api.DictionaryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DictionaryService(object):
    """DictionaryService the service manages all dictionaries
    """

    @staticmethod
    def GetDictionary(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/api.DictionaryService/GetDictionary',
            chirpstack__api_dot_as__pb_dot_external_dot_api_dot_dictionary__pb2.GetDictionaryRequest.SerializeToString,
            chirpstack__api_dot_as__pb_dot_external_dot_api_dot_dictionary__pb2.GetDictionaryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
