# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from chirpstack_api.as_pb.external.api import datastream_pb2 as chirpstack__api_dot_as__pb_dot_external_dot_api_dot_datastream__pb2


class DataStreamServiceStub(object):
    """DataStreamService the service manages all data streams
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetGatewayTaskResult = channel.unary_stream(
                '/api.DataStreamService/GetGatewayTaskResult',
                request_serializer=chirpstack__api_dot_as__pb_dot_external_dot_api_dot_datastream__pb2.DataStreamRequest.SerializeToString,
                response_deserializer=chirpstack__api_dot_as__pb_dot_external_dot_api_dot_datastream__pb2.DataStreamResponse.FromString,
                )


class DataStreamServiceServicer(object):
    """DataStreamService the service manages all data streams
    """

    def GetGatewayTaskResult(self, request, context):
        """GetGatewayTaskResult get results for gateway that previously recieved during
        ExecCommand in background mode
        (!) websocket required! The endpoint does not work from a web-swagger.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataStreamServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetGatewayTaskResult': grpc.unary_stream_rpc_method_handler(
                    servicer.GetGatewayTaskResult,
                    request_deserializer=chirpstack__api_dot_as__pb_dot_external_dot_api_dot_datastream__pb2.DataStreamRequest.FromString,
                    response_serializer=chirpstack__api_dot_as__pb_dot_external_dot_api_dot_datastream__pb2.DataStreamResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'api.DataStreamService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DataStreamService(object):
    """DataStreamService the service manages all data streams
    """

    @staticmethod
    def GetGatewayTaskResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/api.DataStreamService/GetGatewayTaskResult',
            chirpstack__api_dot_as__pb_dot_external_dot_api_dot_datastream__pb2.DataStreamRequest.SerializeToString,
            chirpstack__api_dot_as__pb_dot_external_dot_api_dot_datastream__pb2.DataStreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
