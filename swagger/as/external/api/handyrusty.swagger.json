{
  "swagger": "2.0",
  "info": {
    "title": "as/external/api/handyrusty.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/handy-rusty/current-state": {
      "get": {
        "operationId": "GetCurrentState",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/hrGetCurrentStateResponse"
            }
          }
        },
        "tags": [
          "HandyRustyService"
        ]
      }
    },
    "/api/handy-rusty/frames/counters": {
      "post": {
        "summary": "GetFrameCounters returns frame counters by type for the given range. Aggregation: day",
        "operationId": "GetFrameCounters",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/hrGetFrameCountersResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/hrGetFrameCountersRequest"
            }
          }
        ],
        "tags": [
          "HandyRustyService"
        ]
      }
    },
    "/api/handy-rusty/frames/logs/device-frames": {
      "post": {
        "summary": "GetDeviceFramesLog returns an array with recieved and transmitted device's frames",
        "operationId": "GetDeviceFramesLog",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/hrGetDeviceFramesLogResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/hrGetDeviceFramesLogRequest"
            }
          }
        ],
        "tags": [
          "HandyRustyService"
        ]
      }
    },
    "/api/handy-rusty/frames/logs/device-frames/csv": {
      "get": {
        "summary": "StreamDeviceFramesLogCSV streams the frame-logs from handyrusty CH-storage.\n  * The data is transferred by chunks (stream);\n  * This endpoint does not work from a web-browser!",
        "operationId": "StreamDeviceFramesLogCSV",
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "$ref": "#/x-stream-definitions/hrStreamDeviceFramesLogCSVResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "offset",
            "description": "you can specify offset (for pagination).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "description": "you can specify rows limit.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "start",
            "description": "You can specify start DateTime point. format RFC3339: 2006-01-02T15:04:05.000Z.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "end",
            "description": "You can specify end DateTime point. format RFC3339: 2006-01-02T15:04:05.000Z.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "organizationId",
            "description": "You can set the id to 0 if admin.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "timezone",
            "description": "here user sends his local timezone.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "HandyRustyService"
        ]
      }
    },
    "/api/handy-rusty/frames/speed": {
      "post": {
        "summary": "GetFrameSpeed returns an array with rx+tx frames per minute measurments",
        "operationId": "GetFrameSpeed",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/hrGetFrameSpeedResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/hrGetFrameSpeedRequest"
            }
          }
        ],
        "tags": [
          "HandyRustyService"
        ]
      }
    },
    "/api/handy-rusty/rc/exec-command": {
      "post": {
        "summary": "ExecCommand sends the command to execute on gw. It waits 30 sec for an answer from gw",
        "operationId": "ExecCommand",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/gwGatewayCommandExecResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/hrExecCommandRequest"
            }
          }
        ],
        "tags": [
          "HandyRustyService"
        ]
      }
    }
  },
  "definitions": {
    "commonLocation": {
      "type": "object",
      "properties": {
        "latitude": {
          "type": "number",
          "format": "double",
          "description": "Latitude."
        },
        "longitude": {
          "type": "number",
          "format": "double",
          "description": "Longitude."
        },
        "altitude": {
          "type": "number",
          "format": "double",
          "description": "Altitude."
        },
        "source": {
          "$ref": "#/definitions/commonLocationSource",
          "description": "Location source."
        },
        "accuracy": {
          "type": "integer",
          "format": "int64",
          "description": "Accuracy (in meters)."
        }
      }
    },
    "commonLocationSource": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "GPS",
        "CONFIG",
        "GEO_RESOLVER_TDOA",
        "GEO_RESOLVER_RSSI",
        "GEO_RESOLVER_GNSS",
        "GEO_RESOLVER_WIFI"
      ],
      "default": "UNKNOWN",
      "description": " - UNKNOWN: Unknown.\n - GPS: GPS.\n - CONFIG: Manually configured.\n - GEO_RESOLVER_TDOA: Geo resolver (TDOA).\n - GEO_RESOLVER_RSSI: Geo resolver (RSSI).\n - GEO_RESOLVER_GNSS: Geo resolver (GNSS).\n - GEO_RESOLVER_WIFI: Geo resolver (WIFI)."
    },
    "gwFineTimestampType": {
      "type": "string",
      "enum": [
        "NONE",
        "ENCRYPTED",
        "PLAIN"
      ],
      "default": "NONE",
      "description": " - NONE: No fine-timestamp available.\n - ENCRYPTED: Encrypted fine-timestamp.\n - PLAIN: Plain fine-timestamp."
    },
    "gwGatewayCommandExecResponse": {
      "type": "object",
      "properties": {
        "gatewayID": {
          "type": "string",
          "format": "byte",
          "description": "Gateway ID."
        },
        "execID": {
          "type": "string",
          "format": "byte",
          "description": "Execution request ID (UUID)."
        },
        "stdout": {
          "type": "string",
          "format": "byte",
          "description": "Standard output."
        },
        "stderr": {
          "type": "string",
          "format": "byte",
          "description": "Standard error."
        },
        "error": {
          "type": "string",
          "description": "Error message."
        }
      }
    },
    "hrDeviceFrameLog": {
      "type": "object",
      "properties": {
        "direction": {
          "type": "string",
          "title": "RX (uplink -recieved from devices) or TX (downlink - transmitted from NS)"
        },
        "dateTime": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "mType": {
          "type": "string"
        },
        "devAddr": {
          "type": "string"
        },
        "devEUI": {
          "type": "string"
        },
        "rxRssi": {
          "type": "integer",
          "format": "int32",
          "title": "params from base station with best SNR"
        },
        "rxSnr": {
          "type": "number",
          "format": "double"
        },
        "rxChannel": {
          "type": "integer",
          "format": "int64"
        },
        "rxRfChain": {
          "type": "integer",
          "format": "int64"
        },
        "gw": {
          "type": "string",
          "title": "id of base station with best SNR"
        },
        "txInfo": {
          "type": "string",
          "title": "json-string"
        },
        "rxInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/hrRXInfo"
          },
          "title": "RXInfo an array with info from BS recieved the frame"
        },
        "PhyPayloadJson": {
          "type": "string",
          "title": "json-string with LORA payload"
        },
        "airtime": {
          "type": "number",
          "format": "double"
        },
        "esp": {
          "type": "number",
          "format": "double"
        },
        "late": {
          "type": "integer",
          "format": "int64"
        },
        "frmPayload": {
          "type": "string"
        }
      },
      "title": "for storage"
    },
    "hrExecCommandRequest": {
      "type": "object",
      "properties": {
        "gatewayId": {
          "type": "string",
          "description": "Gateway ID (HEX encoded)."
        },
        "command": {
          "type": "string",
          "title": "command that will be executed on gateway (according to the gw config)"
        }
      }
    },
    "hrFrameCounters": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "format": "int64",
          "description": "Date: the metrics counted for."
        },
        "rxCnt": {
          "type": "integer",
          "format": "int64",
          "title": "RxCnt: total recieved frames counted"
        },
        "txCnt": {
          "type": "integer",
          "format": "int64",
          "title": "TxCnt: total transmitted frames counted"
        },
        "totalCnt": {
          "type": "integer",
          "format": "int64",
          "title": "TotalCnt: both TxCnt and RxCnt counted"
        },
        "unknownType": {
          "type": "integer",
          "format": "int64",
          "title": "UnknownType:"
        },
        "joinRequest": {
          "type": "integer",
          "format": "int64",
          "title": "JoinRequest"
        },
        "rejoinRequest": {
          "type": "integer",
          "format": "int64",
          "title": "RejoinRequest"
        },
        "joinAccept": {
          "type": "integer",
          "format": "int64",
          "title": "JoinAccept"
        },
        "unconfirmedDataUp": {
          "type": "integer",
          "format": "int64",
          "title": "UnconfirmedDataUp"
        },
        "unconfirmedDataDown": {
          "type": "integer",
          "format": "int64",
          "title": "UnconfirmedDataDown"
        },
        "confirmedDataUp": {
          "type": "integer",
          "format": "int64",
          "title": "ConfirmedDataUp"
        },
        "confirmedDataDown": {
          "type": "integer",
          "format": "int64",
          "title": "ConfirmedDataDown"
        },
        "proprietary": {
          "type": "integer",
          "format": "int64",
          "title": "Proprietary"
        }
      }
    },
    "hrFrameSpeed": {
      "type": "object",
      "properties": {
        "t": {
          "type": "string",
          "format": "int64",
          "title": "T: Created at timestamp (unix)"
        },
        "y": {
          "type": "integer",
          "format": "int64",
          "title": "Y: TotalCnt: both TxCnt and RxCnt frames counted for the amount of time"
        }
      }
    },
    "hrGetCurrentStateResponse": {
      "type": "object",
      "properties": {
        "wlLastPacket": {
          "type": "string",
          "title": "DateTime of last packet saved in wireless-loger"
        },
        "wlLastPacketUT": {
          "type": "string",
          "format": "int64",
          "title": "the same as previuos in unixTime format"
        }
      }
    },
    "hrGetDeviceFramesLogRequest": {
      "type": "object",
      "properties": {
        "offset": {
          "type": "integer",
          "format": "int64",
          "title": "you can specify offset (for pagination)"
        },
        "limit": {
          "type": "integer",
          "format": "int64",
          "title": "you can specify rows limit"
        },
        "start": {
          "type": "string",
          "title": "You can specify start DateTime point. format RFC3339: 2006-01-02T15:04:05.000Z"
        },
        "end": {
          "type": "string",
          "title": "You can specify end DateTime point. format RFC3339: 2006-01-02T15:04:05.000Z"
        },
        "filters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Additional sql filters (key,value): allowed: direction,devEUI,mType,gw,devAddr"
        },
        "organizationId": {
          "type": "string",
          "format": "int64",
          "title": "You can set the id to 0 if admin"
        },
        "timezone": {
          "type": "string",
          "format": "int64",
          "description": "here user sends his local timezone."
        }
      }
    },
    "hrGetDeviceFramesLogResponse": {
      "type": "object",
      "properties": {
        "itemsTotal": {
          "type": "integer",
          "format": "int64",
          "title": "total numner of selected rows"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/hrDeviceFrameLog"
          },
          "title": "the array of selected device-frames logs"
        }
      }
    },
    "hrGetFrameCountersRequest": {
      "type": "object",
      "properties": {
        "start": {
          "type": "string",
          "title": "format RFC3339: 2006-01-02T15:04:05.000Z"
        },
        "end": {
          "type": "string",
          "title": "format RFC3339: 2006-01-02T15:04:05.000Z"
        }
      }
    },
    "hrGetFrameCountersResponse": {
      "type": "object",
      "properties": {
        "counters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/hrFrameCounters"
          },
          "title": "list counters with frame counters by type"
        }
      }
    },
    "hrGetFrameSpeedRequest": {
      "type": "object",
      "properties": {
        "start": {
          "type": "string",
          "title": "format RFC3339: 2006-01-02T15:04:05.000Z"
        },
        "end": {
          "type": "string",
          "title": "format RFC3339: 2006-01-02T15:04:05.000Z"
        }
      }
    },
    "hrGetFrameSpeedResponse": {
      "type": "object",
      "properties": {
        "counters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/hrFrameSpeed"
          },
          "title": "list counters with frames speed"
        }
      }
    },
    "hrRXInfo": {
      "type": "object",
      "properties": {
        "gateway_id": {
          "type": "string",
          "title": "GatewayID"
        },
        "rssi": {
          "type": "integer",
          "format": "int32"
        },
        "lora_snr": {
          "type": "number",
          "format": "double"
        },
        "channel": {
          "type": "integer",
          "format": "int64"
        },
        "rf_chain": {
          "type": "integer",
          "format": "int64"
        },
        "board": {
          "type": "integer",
          "format": "int64"
        },
        "antenna": {
          "type": "integer",
          "format": "int64"
        },
        "location": {
          "$ref": "#/definitions/commonLocation"
        },
        "FineTimestampType": {
          "$ref": "#/definitions/gwFineTimestampType"
        },
        "gps_timestamp": {
          "type": "string"
        },
        "fine_timestamp": {
          "type": "string"
        },
        "context": {
          "type": "string"
        },
        "uplink_id": {
          "type": "string",
          "description": "Unique and random ID which can be used to correlate the uplink across multiple logs."
        }
      },
      "title": "for RXInfo item in uplink frames"
    },
    "hrStreamDeviceFramesLogCSVResponse": {
      "type": "object",
      "properties": {
        "current": {
          "type": "integer",
          "format": "int64"
        },
        "total": {
          "type": "integer",
          "format": "int64"
        },
        "rows": {
          "type": "integer",
          "format": "int64"
        },
        "chunk": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        },
        "value": {
          "type": "string",
          "format": "byte",
          "description": "Must be a valid serialized protocol buffer of the above specified type."
        }
      },
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := ptypes.MarshalAny(foo)\n     ...\n     foo := \u0026pb.Foo{}\n     if err := ptypes.UnmarshalAny(any, foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "runtimeStreamError": {
      "type": "object",
      "properties": {
        "grpcCode": {
          "type": "integer",
          "format": "int32"
        },
        "httpCode": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "httpStatus": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    }
  },
  "x-stream-definitions": {
    "hrStreamDeviceFramesLogCSVResponse": {
      "type": "object",
      "properties": {
        "result": {
          "$ref": "#/definitions/hrStreamDeviceFramesLogCSVResponse"
        },
        "error": {
          "$ref": "#/definitions/runtimeStreamError"
        }
      },
      "title": "Stream result of hrStreamDeviceFramesLogCSVResponse"
    }
  }
}
