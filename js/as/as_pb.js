/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
var common_common_pb = require('../common/common_pb.js');
var gw_gw_pb = require('../gw/gw_pb.js');
goog.exportSymbol('proto.as.DeviceActivationContext', null, global);
goog.exportSymbol('proto.as.ErrorType', null, global);
goog.exportSymbol('proto.as.GetDeviceAppSKeyResponse', null, global);
goog.exportSymbol('proto.as.GetDevicesSummaryRequest', null, global);
goog.exportSymbol('proto.as.GetDevicesSummaryResponse', null, global);
goog.exportSymbol('proto.as.GetGatewaysSummaryRequest', null, global);
goog.exportSymbol('proto.as.GetGatewaysSummaryResponse', null, global);
goog.exportSymbol('proto.as.GetOrgByDevEUIRequest', null, global);
goog.exportSymbol('proto.as.GetOrgByDevEUIResponse', null, global);
goog.exportSymbol('proto.as.HandleDownlinkACKRequest', null, global);
goog.exportSymbol('proto.as.HandleErrorRequest', null, global);
goog.exportSymbol('proto.as.HandleGatewayStatsRequest', null, global);
goog.exportSymbol('proto.as.HandleProprietaryUplinkRequest', null, global);
goog.exportSymbol('proto.as.HandleTxAckRequest', null, global);
goog.exportSymbol('proto.as.HandleUplinkDataRequest', null, global);
goog.exportSymbol('proto.as.ListOrganizationRequest', null, global);
goog.exportSymbol('proto.as.ListOrganizationResponse', null, global);
goog.exportSymbol('proto.as.OrganizationListItem', null, global);
goog.exportSymbol('proto.as.RXWindow', null, global);
goog.exportSymbol('proto.as.SetDeviceLocationRequest', null, global);
goog.exportSymbol('proto.as.SetDeviceStatusRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.as.GetOrgByDevEUIRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.as.GetOrgByDevEUIRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.as.GetOrgByDevEUIRequest.displayName = 'proto.as.GetOrgByDevEUIRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.as.GetOrgByDevEUIRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.as.GetOrgByDevEUIRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.as.GetOrgByDevEUIRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.as.GetOrgByDevEUIRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    devEui: msg.getDevEui()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.as.GetOrgByDevEUIRequest}
 */
proto.as.GetOrgByDevEUIRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.as.GetOrgByDevEUIRequest;
  return proto.as.GetOrgByDevEUIRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.as.GetOrgByDevEUIRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.as.GetOrgByDevEUIRequest}
 */
proto.as.GetOrgByDevEUIRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevEui(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.as.GetOrgByDevEUIRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.GetOrgByDevEUIRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.as.GetOrgByDevEUIRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.GetOrgByDevEUIRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDevEui();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.as.GetOrgByDevEUIRequest} The clone.
 */
proto.as.GetOrgByDevEUIRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.as.GetOrgByDevEUIRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string dev_eui = 1;
 * @return {string}
 */
proto.as.GetOrgByDevEUIRequest.prototype.getDevEui = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.as.GetOrgByDevEUIRequest.prototype.setDevEui = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.as.GetDeviceAppSKeyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.as.GetDeviceAppSKeyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.as.GetDeviceAppSKeyResponse.displayName = 'proto.as.GetDeviceAppSKeyResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.as.GetDeviceAppSKeyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.as.GetDeviceAppSKeyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.as.GetDeviceAppSKeyResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.as.GetDeviceAppSKeyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.as.GetDeviceAppSKeyResponse}
 */
proto.as.GetDeviceAppSKeyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.as.GetDeviceAppSKeyResponse;
  return proto.as.GetDeviceAppSKeyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.as.GetDeviceAppSKeyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.as.GetDeviceAppSKeyResponse}
 */
proto.as.GetDeviceAppSKeyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.as.GetDeviceAppSKeyResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.GetDeviceAppSKeyResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.as.GetDeviceAppSKeyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.GetDeviceAppSKeyResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.as.GetDeviceAppSKeyResponse} The clone.
 */
proto.as.GetDeviceAppSKeyResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.as.GetDeviceAppSKeyResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes value = 1;
 * @return {!(string|Uint8Array)}
 */
proto.as.GetDeviceAppSKeyResponse.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes value = 1;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.as.GetDeviceAppSKeyResponse.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.as.GetDeviceAppSKeyResponse.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/** @param {!(string|Uint8Array)} value  */
proto.as.GetDeviceAppSKeyResponse.prototype.setValue = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.as.GetOrgByDevEUIResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.as.GetOrgByDevEUIResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.as.GetOrgByDevEUIResponse.displayName = 'proto.as.GetOrgByDevEUIResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.as.GetOrgByDevEUIResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.as.GetOrgByDevEUIResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.as.GetOrgByDevEUIResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.as.GetOrgByDevEUIResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.as.GetOrgByDevEUIResponse}
 */
proto.as.GetOrgByDevEUIResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.as.GetOrgByDevEUIResponse;
  return proto.as.GetOrgByDevEUIResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.as.GetOrgByDevEUIResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.as.GetOrgByDevEUIResponse}
 */
proto.as.GetOrgByDevEUIResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.as.GetOrgByDevEUIResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.GetOrgByDevEUIResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.as.GetOrgByDevEUIResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.GetOrgByDevEUIResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.as.GetOrgByDevEUIResponse} The clone.
 */
proto.as.GetOrgByDevEUIResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.as.GetOrgByDevEUIResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.as.GetOrgByDevEUIResponse.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.as.GetOrgByDevEUIResponse.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.as.ListOrganizationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.as.ListOrganizationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.as.ListOrganizationRequest.displayName = 'proto.as.ListOrganizationRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.as.ListOrganizationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.as.ListOrganizationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.as.ListOrganizationRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.as.ListOrganizationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    limit: msg.getLimit(),
    offset: msg.getOffset(),
    search: msg.getSearch()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.as.ListOrganizationRequest}
 */
proto.as.ListOrganizationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.as.ListOrganizationRequest;
  return proto.as.ListOrganizationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.as.ListOrganizationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.as.ListOrganizationRequest}
 */
proto.as.ListOrganizationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLimit(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOffset(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSearch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.as.ListOrganizationRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.ListOrganizationRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.as.ListOrganizationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.ListOrganizationRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getLimit();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getOffset();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = this.getSearch();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.as.ListOrganizationRequest} The clone.
 */
proto.as.ListOrganizationRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.as.ListOrganizationRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 limit = 1;
 * @return {number}
 */
proto.as.ListOrganizationRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.as.ListOrganizationRequest.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 offset = 2;
 * @return {number}
 */
proto.as.ListOrganizationRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.as.ListOrganizationRequest.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string search = 3;
 * @return {string}
 */
proto.as.ListOrganizationRequest.prototype.getSearch = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.as.ListOrganizationRequest.prototype.setSearch = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.as.ListOrganizationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.as.ListOrganizationResponse.repeatedFields_, null);
};
goog.inherits(proto.as.ListOrganizationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.as.ListOrganizationResponse.displayName = 'proto.as.ListOrganizationResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.as.ListOrganizationResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.as.ListOrganizationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.as.ListOrganizationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.as.ListOrganizationResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.as.ListOrganizationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalCount: msg.getTotalCount(),
    resultList: jspb.Message.toObjectList(msg.getResultList(),
    proto.as.OrganizationListItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.as.ListOrganizationResponse}
 */
proto.as.ListOrganizationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.as.ListOrganizationResponse;
  return proto.as.ListOrganizationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.as.ListOrganizationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.as.ListOrganizationResponse}
 */
proto.as.ListOrganizationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalCount(value);
      break;
    case 2:
      var value = new proto.as.OrganizationListItem;
      reader.readMessage(value,proto.as.OrganizationListItem.deserializeBinaryFromReader);
      msg.getResultList().push(value);
      msg.setResultList(msg.getResultList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.as.ListOrganizationResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.ListOrganizationResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.as.ListOrganizationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.ListOrganizationResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTotalCount();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getResultList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.as.OrganizationListItem.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.as.ListOrganizationResponse} The clone.
 */
proto.as.ListOrganizationResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.as.ListOrganizationResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 total_count = 1;
 * @return {number}
 */
proto.as.ListOrganizationResponse.prototype.getTotalCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.as.ListOrganizationResponse.prototype.setTotalCount = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated OrganizationListItem result = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.as.OrganizationListItem>}
 */
proto.as.ListOrganizationResponse.prototype.getResultList = function() {
  return /** @type{!Array.<!proto.as.OrganizationListItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.as.OrganizationListItem, 2));
};


/** @param {Array.<!proto.as.OrganizationListItem>} value  */
proto.as.ListOrganizationResponse.prototype.setResultList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.as.ListOrganizationResponse.prototype.clearResultList = function() {
  this.setResultList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.as.OrganizationListItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.as.OrganizationListItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.as.OrganizationListItem.displayName = 'proto.as.OrganizationListItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.as.OrganizationListItem.prototype.toObject = function(opt_includeInstance) {
  return proto.as.OrganizationListItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.as.OrganizationListItem} msg The msg instance to transform.
 * @return {!Object}
 */
proto.as.OrganizationListItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId(),
    name: msg.getName(),
    displayName: msg.getDisplayName(),
    canHaveGateways: msg.getCanHaveGateways(),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    updatedAt: (f = msg.getUpdatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.as.OrganizationListItem}
 */
proto.as.OrganizationListItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.as.OrganizationListItem;
  return proto.as.OrganizationListItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.as.OrganizationListItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.as.OrganizationListItem}
 */
proto.as.OrganizationListItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayName(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanHaveGateways(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 6:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.as.OrganizationListItem} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.OrganizationListItem.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.as.OrganizationListItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.OrganizationListItem.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getDisplayName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getCanHaveGateways();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = this.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = this.getUpdatedAt();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.as.OrganizationListItem} The clone.
 */
proto.as.OrganizationListItem.prototype.cloneMessage = function() {
  return /** @type {!proto.as.OrganizationListItem} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.as.OrganizationListItem.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.as.OrganizationListItem.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.as.OrganizationListItem.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.as.OrganizationListItem.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string display_name = 3;
 * @return {string}
 */
proto.as.OrganizationListItem.prototype.getDisplayName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.as.OrganizationListItem.prototype.setDisplayName = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bool can_have_gateways = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.as.OrganizationListItem.prototype.getCanHaveGateways = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 4, false));
};


/** @param {boolean} value  */
proto.as.OrganizationListItem.prototype.setCanHaveGateways = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional google.protobuf.Timestamp created_at = 5;
 * @return {proto.google.protobuf.Timestamp}
 */
proto.as.OrganizationListItem.prototype.getCreatedAt = function() {
  return /** @type{proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/** @param {proto.google.protobuf.Timestamp|undefined} value  */
proto.as.OrganizationListItem.prototype.setCreatedAt = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.as.OrganizationListItem.prototype.clearCreatedAt = function() {
  this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.as.OrganizationListItem.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional google.protobuf.Timestamp updated_at = 6;
 * @return {proto.google.protobuf.Timestamp}
 */
proto.as.OrganizationListItem.prototype.getUpdatedAt = function() {
  return /** @type{proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 6));
};


/** @param {proto.google.protobuf.Timestamp|undefined} value  */
proto.as.OrganizationListItem.prototype.setUpdatedAt = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.as.OrganizationListItem.prototype.clearUpdatedAt = function() {
  this.setUpdatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.as.OrganizationListItem.prototype.hasUpdatedAt = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.as.GetDevicesSummaryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.as.GetDevicesSummaryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.as.GetDevicesSummaryRequest.displayName = 'proto.as.GetDevicesSummaryRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.as.GetDevicesSummaryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.as.GetDevicesSummaryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.as.GetDevicesSummaryRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.as.GetDevicesSummaryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organizationId: msg.getOrganizationId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.as.GetDevicesSummaryRequest}
 */
proto.as.GetDevicesSummaryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.as.GetDevicesSummaryRequest;
  return proto.as.GetDevicesSummaryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.as.GetDevicesSummaryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.as.GetDevicesSummaryRequest}
 */
proto.as.GetDevicesSummaryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOrganizationId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.as.GetDevicesSummaryRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.GetDevicesSummaryRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.as.GetDevicesSummaryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.GetDevicesSummaryRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOrganizationId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.as.GetDevicesSummaryRequest} The clone.
 */
proto.as.GetDevicesSummaryRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.as.GetDevicesSummaryRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 organization_id = 1;
 * @return {number}
 */
proto.as.GetDevicesSummaryRequest.prototype.getOrganizationId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.as.GetDevicesSummaryRequest.prototype.setOrganizationId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.as.GetDevicesSummaryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.as.GetDevicesSummaryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.as.GetDevicesSummaryResponse.displayName = 'proto.as.GetDevicesSummaryResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.as.GetDevicesSummaryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.as.GetDevicesSummaryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.as.GetDevicesSummaryResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.as.GetDevicesSummaryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    activeCount: msg.getActiveCount(),
    inactiveCount: msg.getInactiveCount(),
    drCountMap: (f = msg.getDrCountMap(true)) ? f.toArray() : [],
    neverSeenCount: msg.getNeverSeenCount()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.as.GetDevicesSummaryResponse}
 */
proto.as.GetDevicesSummaryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.as.GetDevicesSummaryResponse;
  return proto.as.GetDevicesSummaryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.as.GetDevicesSummaryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.as.GetDevicesSummaryResponse}
 */
proto.as.GetDevicesSummaryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setActiveCount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInactiveCount(value);
      break;
    case 3:
      var value = msg.getDrCountMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readUint32);
         });
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNeverSeenCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.as.GetDevicesSummaryResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.GetDevicesSummaryResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.as.GetDevicesSummaryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.GetDevicesSummaryResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getActiveCount();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getInactiveCount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getDrCountMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeUint32);
  }
  f = this.getNeverSeenCount();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.as.GetDevicesSummaryResponse} The clone.
 */
proto.as.GetDevicesSummaryResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.as.GetDevicesSummaryResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 active_count = 1;
 * @return {number}
 */
proto.as.GetDevicesSummaryResponse.prototype.getActiveCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.as.GetDevicesSummaryResponse.prototype.setActiveCount = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 inactive_count = 2;
 * @return {number}
 */
proto.as.GetDevicesSummaryResponse.prototype.getInactiveCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.as.GetDevicesSummaryResponse.prototype.setInactiveCount = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * map<uint32, uint32> dr_count = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,number>}
 */
proto.as.GetDevicesSummaryResponse.prototype.getDrCountMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,number>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * optional uint32 never_seen_count = 4;
 * @return {number}
 */
proto.as.GetDevicesSummaryResponse.prototype.getNeverSeenCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.as.GetDevicesSummaryResponse.prototype.setNeverSeenCount = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.as.GetGatewaysSummaryRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.as.GetGatewaysSummaryRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.as.GetGatewaysSummaryRequest.displayName = 'proto.as.GetGatewaysSummaryRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.as.GetGatewaysSummaryRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.as.GetGatewaysSummaryRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.as.GetGatewaysSummaryRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.as.GetGatewaysSummaryRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    organizationId: msg.getOrganizationId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.as.GetGatewaysSummaryRequest}
 */
proto.as.GetGatewaysSummaryRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.as.GetGatewaysSummaryRequest;
  return proto.as.GetGatewaysSummaryRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.as.GetGatewaysSummaryRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.as.GetGatewaysSummaryRequest}
 */
proto.as.GetGatewaysSummaryRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOrganizationId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.as.GetGatewaysSummaryRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.GetGatewaysSummaryRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.as.GetGatewaysSummaryRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.GetGatewaysSummaryRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getOrganizationId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.as.GetGatewaysSummaryRequest} The clone.
 */
proto.as.GetGatewaysSummaryRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.as.GetGatewaysSummaryRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 organization_id = 1;
 * @return {number}
 */
proto.as.GetGatewaysSummaryRequest.prototype.getOrganizationId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.as.GetGatewaysSummaryRequest.prototype.setOrganizationId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.as.GetGatewaysSummaryResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.as.GetGatewaysSummaryResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.as.GetGatewaysSummaryResponse.displayName = 'proto.as.GetGatewaysSummaryResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.as.GetGatewaysSummaryResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.as.GetGatewaysSummaryResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.as.GetGatewaysSummaryResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.as.GetGatewaysSummaryResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    activeCount: msg.getActiveCount(),
    inactiveCount: msg.getInactiveCount(),
    neverSeenCount: msg.getNeverSeenCount()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.as.GetGatewaysSummaryResponse}
 */
proto.as.GetGatewaysSummaryResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.as.GetGatewaysSummaryResponse;
  return proto.as.GetGatewaysSummaryResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.as.GetGatewaysSummaryResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.as.GetGatewaysSummaryResponse}
 */
proto.as.GetGatewaysSummaryResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setActiveCount(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInactiveCount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setNeverSeenCount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.as.GetGatewaysSummaryResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.GetGatewaysSummaryResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.as.GetGatewaysSummaryResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.GetGatewaysSummaryResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getActiveCount();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = this.getInactiveCount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getNeverSeenCount();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.as.GetGatewaysSummaryResponse} The clone.
 */
proto.as.GetGatewaysSummaryResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.as.GetGatewaysSummaryResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 active_count = 1;
 * @return {number}
 */
proto.as.GetGatewaysSummaryResponse.prototype.getActiveCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.as.GetGatewaysSummaryResponse.prototype.setActiveCount = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 inactive_count = 2;
 * @return {number}
 */
proto.as.GetGatewaysSummaryResponse.prototype.getInactiveCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.as.GetGatewaysSummaryResponse.prototype.setInactiveCount = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 never_seen_count = 3;
 * @return {number}
 */
proto.as.GetGatewaysSummaryResponse.prototype.getNeverSeenCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.as.GetGatewaysSummaryResponse.prototype.setNeverSeenCount = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.as.DeviceActivationContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.as.DeviceActivationContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.as.DeviceActivationContext.displayName = 'proto.as.DeviceActivationContext';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.as.DeviceActivationContext.prototype.toObject = function(opt_includeInstance) {
  return proto.as.DeviceActivationContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.as.DeviceActivationContext} msg The msg instance to transform.
 * @return {!Object}
 */
proto.as.DeviceActivationContext.toObject = function(includeInstance, msg) {
  var f, obj = {
    devAddr: msg.getDevAddr_asB64(),
    appSKey: (f = msg.getAppSKey()) && common_common_pb.KeyEnvelope.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.as.DeviceActivationContext}
 */
proto.as.DeviceActivationContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.as.DeviceActivationContext;
  return proto.as.DeviceActivationContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.as.DeviceActivationContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.as.DeviceActivationContext}
 */
proto.as.DeviceActivationContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevAddr(value);
      break;
    case 2:
      var value = new common_common_pb.KeyEnvelope;
      reader.readMessage(value,common_common_pb.KeyEnvelope.deserializeBinaryFromReader);
      msg.setAppSKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.as.DeviceActivationContext} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.DeviceActivationContext.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.as.DeviceActivationContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.DeviceActivationContext.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDevAddr_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getAppSKey();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_common_pb.KeyEnvelope.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.as.DeviceActivationContext} The clone.
 */
proto.as.DeviceActivationContext.prototype.cloneMessage = function() {
  return /** @type {!proto.as.DeviceActivationContext} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes dev_addr = 1;
 * @return {!(string|Uint8Array)}
 */
proto.as.DeviceActivationContext.prototype.getDevAddr = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes dev_addr = 1;
 * This is a type-conversion wrapper around `getDevAddr()`
 * @return {string}
 */
proto.as.DeviceActivationContext.prototype.getDevAddr_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevAddr()));
};


/**
 * optional bytes dev_addr = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevAddr()`
 * @return {!Uint8Array}
 */
proto.as.DeviceActivationContext.prototype.getDevAddr_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevAddr()));
};


/** @param {!(string|Uint8Array)} value  */
proto.as.DeviceActivationContext.prototype.setDevAddr = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional common.KeyEnvelope app_s_key = 2;
 * @return {proto.common.KeyEnvelope}
 */
proto.as.DeviceActivationContext.prototype.getAppSKey = function() {
  return /** @type{proto.common.KeyEnvelope} */ (
    jspb.Message.getWrapperField(this, common_common_pb.KeyEnvelope, 2));
};


/** @param {proto.common.KeyEnvelope|undefined} value  */
proto.as.DeviceActivationContext.prototype.setAppSKey = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.as.DeviceActivationContext.prototype.clearAppSKey = function() {
  this.setAppSKey(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.as.DeviceActivationContext.prototype.hasAppSKey = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.as.HandleUplinkDataRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.as.HandleUplinkDataRequest.repeatedFields_, null);
};
goog.inherits(proto.as.HandleUplinkDataRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.as.HandleUplinkDataRequest.displayName = 'proto.as.HandleUplinkDataRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.as.HandleUplinkDataRequest.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.as.HandleUplinkDataRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.as.HandleUplinkDataRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.as.HandleUplinkDataRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.as.HandleUplinkDataRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    devEui: msg.getDevEui_asB64(),
    joinEui: msg.getJoinEui_asB64(),
    fCnt: msg.getFCnt(),
    fPort: msg.getFPort(),
    adr: msg.getAdr(),
    dr: msg.getDr(),
    txInfo: (f = msg.getTxInfo()) && gw_gw_pb.UplinkTXInfo.toObject(includeInstance, f),
    rxInfoList: jspb.Message.toObjectList(msg.getRxInfoList(),
    gw_gw_pb.UplinkRXInfo.toObject, includeInstance),
    data: msg.getData_asB64(),
    deviceActivationContext: (f = msg.getDeviceActivationContext()) && proto.as.DeviceActivationContext.toObject(includeInstance, f),
    confirmedUplink: msg.getConfirmedUplink(),
    late: msg.getLate(),
    mic: msg.getMic_asB64(),
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.as.HandleUplinkDataRequest}
 */
proto.as.HandleUplinkDataRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.as.HandleUplinkDataRequest;
  return proto.as.HandleUplinkDataRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.as.HandleUplinkDataRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.as.HandleUplinkDataRequest}
 */
proto.as.HandleUplinkDataRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevEui(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setJoinEui(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFCnt(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFPort(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAdr(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDr(value);
      break;
    case 7:
      var value = new gw_gw_pb.UplinkTXInfo;
      reader.readMessage(value,gw_gw_pb.UplinkTXInfo.deserializeBinaryFromReader);
      msg.setTxInfo(value);
      break;
    case 8:
      var value = new gw_gw_pb.UplinkRXInfo;
      reader.readMessage(value,gw_gw_pb.UplinkRXInfo.deserializeBinaryFromReader);
      msg.getRxInfoList().push(value);
      msg.setRxInfoList(msg.getRxInfoList());
      break;
    case 9:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 10:
      var value = new proto.as.DeviceActivationContext;
      reader.readMessage(value,proto.as.DeviceActivationContext.deserializeBinaryFromReader);
      msg.setDeviceActivationContext(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConfirmedUplink(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLate(value);
      break;
    case 13:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMic(value);
      break;
    case 14:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.as.HandleUplinkDataRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.HandleUplinkDataRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.as.HandleUplinkDataRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.HandleUplinkDataRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDevEui_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getJoinEui_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getFCnt();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = this.getFPort();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = this.getAdr();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = this.getDr();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = this.getTxInfo();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      gw_gw_pb.UplinkTXInfo.serializeBinaryToWriter
    );
  }
  f = this.getRxInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      gw_gw_pb.UplinkRXInfo.serializeBinaryToWriter
    );
  }
  f = this.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      9,
      f
    );
  }
  f = this.getDeviceActivationContext();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.as.DeviceActivationContext.serializeBinaryToWriter
    );
  }
  f = this.getConfirmedUplink();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = this.getLate();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = this.getMic_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      13,
      f
    );
  }
  f = this.getTime();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.as.HandleUplinkDataRequest} The clone.
 */
proto.as.HandleUplinkDataRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.as.HandleUplinkDataRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes dev_eui = 1;
 * @return {!(string|Uint8Array)}
 */
proto.as.HandleUplinkDataRequest.prototype.getDevEui = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes dev_eui = 1;
 * This is a type-conversion wrapper around `getDevEui()`
 * @return {string}
 */
proto.as.HandleUplinkDataRequest.prototype.getDevEui_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevEui()));
};


/**
 * optional bytes dev_eui = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevEui()`
 * @return {!Uint8Array}
 */
proto.as.HandleUplinkDataRequest.prototype.getDevEui_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevEui()));
};


/** @param {!(string|Uint8Array)} value  */
proto.as.HandleUplinkDataRequest.prototype.setDevEui = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes join_eui = 2;
 * @return {!(string|Uint8Array)}
 */
proto.as.HandleUplinkDataRequest.prototype.getJoinEui = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes join_eui = 2;
 * This is a type-conversion wrapper around `getJoinEui()`
 * @return {string}
 */
proto.as.HandleUplinkDataRequest.prototype.getJoinEui_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getJoinEui()));
};


/**
 * optional bytes join_eui = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getJoinEui()`
 * @return {!Uint8Array}
 */
proto.as.HandleUplinkDataRequest.prototype.getJoinEui_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getJoinEui()));
};


/** @param {!(string|Uint8Array)} value  */
proto.as.HandleUplinkDataRequest.prototype.setJoinEui = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 f_cnt = 3;
 * @return {number}
 */
proto.as.HandleUplinkDataRequest.prototype.getFCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.as.HandleUplinkDataRequest.prototype.setFCnt = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 f_port = 4;
 * @return {number}
 */
proto.as.HandleUplinkDataRequest.prototype.getFPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.as.HandleUplinkDataRequest.prototype.setFPort = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bool adr = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.as.HandleUplinkDataRequest.prototype.getAdr = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 5, false));
};


/** @param {boolean} value  */
proto.as.HandleUplinkDataRequest.prototype.setAdr = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint32 dr = 6;
 * @return {number}
 */
proto.as.HandleUplinkDataRequest.prototype.getDr = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.as.HandleUplinkDataRequest.prototype.setDr = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional gw.UplinkTXInfo tx_info = 7;
 * @return {proto.gw.UplinkTXInfo}
 */
proto.as.HandleUplinkDataRequest.prototype.getTxInfo = function() {
  return /** @type{proto.gw.UplinkTXInfo} */ (
    jspb.Message.getWrapperField(this, gw_gw_pb.UplinkTXInfo, 7));
};


/** @param {proto.gw.UplinkTXInfo|undefined} value  */
proto.as.HandleUplinkDataRequest.prototype.setTxInfo = function(value) {
  jspb.Message.setWrapperField(this, 7, value);
};


proto.as.HandleUplinkDataRequest.prototype.clearTxInfo = function() {
  this.setTxInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.as.HandleUplinkDataRequest.prototype.hasTxInfo = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated gw.UplinkRXInfo rx_info = 8;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.gw.UplinkRXInfo>}
 */
proto.as.HandleUplinkDataRequest.prototype.getRxInfoList = function() {
  return /** @type{!Array.<!proto.gw.UplinkRXInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, gw_gw_pb.UplinkRXInfo, 8));
};


/** @param {Array.<!proto.gw.UplinkRXInfo>} value  */
proto.as.HandleUplinkDataRequest.prototype.setRxInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


proto.as.HandleUplinkDataRequest.prototype.clearRxInfoList = function() {
  this.setRxInfoList([]);
};


/**
 * optional bytes data = 9;
 * @return {!(string|Uint8Array)}
 */
proto.as.HandleUplinkDataRequest.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 9, ""));
};


/**
 * optional bytes data = 9;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.as.HandleUplinkDataRequest.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 9;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.as.HandleUplinkDataRequest.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value  */
proto.as.HandleUplinkDataRequest.prototype.setData = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional DeviceActivationContext device_activation_context = 10;
 * @return {proto.as.DeviceActivationContext}
 */
proto.as.HandleUplinkDataRequest.prototype.getDeviceActivationContext = function() {
  return /** @type{proto.as.DeviceActivationContext} */ (
    jspb.Message.getWrapperField(this, proto.as.DeviceActivationContext, 10));
};


/** @param {proto.as.DeviceActivationContext|undefined} value  */
proto.as.HandleUplinkDataRequest.prototype.setDeviceActivationContext = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.as.HandleUplinkDataRequest.prototype.clearDeviceActivationContext = function() {
  this.setDeviceActivationContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.as.HandleUplinkDataRequest.prototype.hasDeviceActivationContext = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bool confirmed_uplink = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.as.HandleUplinkDataRequest.prototype.getConfirmedUplink = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 11, false));
};


/** @param {boolean} value  */
proto.as.HandleUplinkDataRequest.prototype.setConfirmedUplink = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional bool late = 12;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.as.HandleUplinkDataRequest.prototype.getLate = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 12, false));
};


/** @param {boolean} value  */
proto.as.HandleUplinkDataRequest.prototype.setLate = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional bytes mic = 13;
 * @return {!(string|Uint8Array)}
 */
proto.as.HandleUplinkDataRequest.prototype.getMic = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 13, ""));
};


/**
 * optional bytes mic = 13;
 * This is a type-conversion wrapper around `getMic()`
 * @return {string}
 */
proto.as.HandleUplinkDataRequest.prototype.getMic_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMic()));
};


/**
 * optional bytes mic = 13;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMic()`
 * @return {!Uint8Array}
 */
proto.as.HandleUplinkDataRequest.prototype.getMic_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMic()));
};


/** @param {!(string|Uint8Array)} value  */
proto.as.HandleUplinkDataRequest.prototype.setMic = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional google.protobuf.Timestamp time = 14;
 * @return {proto.google.protobuf.Timestamp}
 */
proto.as.HandleUplinkDataRequest.prototype.getTime = function() {
  return /** @type{proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 14));
};


/** @param {proto.google.protobuf.Timestamp|undefined} value  */
proto.as.HandleUplinkDataRequest.prototype.setTime = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.as.HandleUplinkDataRequest.prototype.clearTime = function() {
  this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.as.HandleUplinkDataRequest.prototype.hasTime = function() {
  return jspb.Message.getField(this, 14) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.as.HandleProprietaryUplinkRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.as.HandleProprietaryUplinkRequest.repeatedFields_, null);
};
goog.inherits(proto.as.HandleProprietaryUplinkRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.as.HandleProprietaryUplinkRequest.displayName = 'proto.as.HandleProprietaryUplinkRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.as.HandleProprietaryUplinkRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.as.HandleProprietaryUplinkRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.as.HandleProprietaryUplinkRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.as.HandleProprietaryUplinkRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.as.HandleProprietaryUplinkRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    macPayload: msg.getMacPayload_asB64(),
    mic: msg.getMic_asB64(),
    txInfo: (f = msg.getTxInfo()) && gw_gw_pb.UplinkTXInfo.toObject(includeInstance, f),
    rxInfoList: jspb.Message.toObjectList(msg.getRxInfoList(),
    gw_gw_pb.UplinkRXInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.as.HandleProprietaryUplinkRequest}
 */
proto.as.HandleProprietaryUplinkRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.as.HandleProprietaryUplinkRequest;
  return proto.as.HandleProprietaryUplinkRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.as.HandleProprietaryUplinkRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.as.HandleProprietaryUplinkRequest}
 */
proto.as.HandleProprietaryUplinkRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMacPayload(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMic(value);
      break;
    case 3:
      var value = new gw_gw_pb.UplinkTXInfo;
      reader.readMessage(value,gw_gw_pb.UplinkTXInfo.deserializeBinaryFromReader);
      msg.setTxInfo(value);
      break;
    case 4:
      var value = new gw_gw_pb.UplinkRXInfo;
      reader.readMessage(value,gw_gw_pb.UplinkRXInfo.deserializeBinaryFromReader);
      msg.getRxInfoList().push(value);
      msg.setRxInfoList(msg.getRxInfoList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.as.HandleProprietaryUplinkRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.HandleProprietaryUplinkRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.as.HandleProprietaryUplinkRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.HandleProprietaryUplinkRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMacPayload_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getMic_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getTxInfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      gw_gw_pb.UplinkTXInfo.serializeBinaryToWriter
    );
  }
  f = this.getRxInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      gw_gw_pb.UplinkRXInfo.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.as.HandleProprietaryUplinkRequest} The clone.
 */
proto.as.HandleProprietaryUplinkRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.as.HandleProprietaryUplinkRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes mac_payload = 1;
 * @return {!(string|Uint8Array)}
 */
proto.as.HandleProprietaryUplinkRequest.prototype.getMacPayload = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes mac_payload = 1;
 * This is a type-conversion wrapper around `getMacPayload()`
 * @return {string}
 */
proto.as.HandleProprietaryUplinkRequest.prototype.getMacPayload_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMacPayload()));
};


/**
 * optional bytes mac_payload = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMacPayload()`
 * @return {!Uint8Array}
 */
proto.as.HandleProprietaryUplinkRequest.prototype.getMacPayload_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMacPayload()));
};


/** @param {!(string|Uint8Array)} value  */
proto.as.HandleProprietaryUplinkRequest.prototype.setMacPayload = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes mic = 2;
 * @return {!(string|Uint8Array)}
 */
proto.as.HandleProprietaryUplinkRequest.prototype.getMic = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes mic = 2;
 * This is a type-conversion wrapper around `getMic()`
 * @return {string}
 */
proto.as.HandleProprietaryUplinkRequest.prototype.getMic_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMic()));
};


/**
 * optional bytes mic = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMic()`
 * @return {!Uint8Array}
 */
proto.as.HandleProprietaryUplinkRequest.prototype.getMic_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMic()));
};


/** @param {!(string|Uint8Array)} value  */
proto.as.HandleProprietaryUplinkRequest.prototype.setMic = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional gw.UplinkTXInfo tx_info = 3;
 * @return {proto.gw.UplinkTXInfo}
 */
proto.as.HandleProprietaryUplinkRequest.prototype.getTxInfo = function() {
  return /** @type{proto.gw.UplinkTXInfo} */ (
    jspb.Message.getWrapperField(this, gw_gw_pb.UplinkTXInfo, 3));
};


/** @param {proto.gw.UplinkTXInfo|undefined} value  */
proto.as.HandleProprietaryUplinkRequest.prototype.setTxInfo = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.as.HandleProprietaryUplinkRequest.prototype.clearTxInfo = function() {
  this.setTxInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.as.HandleProprietaryUplinkRequest.prototype.hasTxInfo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated gw.UplinkRXInfo rx_info = 4;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.gw.UplinkRXInfo>}
 */
proto.as.HandleProprietaryUplinkRequest.prototype.getRxInfoList = function() {
  return /** @type{!Array.<!proto.gw.UplinkRXInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, gw_gw_pb.UplinkRXInfo, 4));
};


/** @param {Array.<!proto.gw.UplinkRXInfo>} value  */
proto.as.HandleProprietaryUplinkRequest.prototype.setRxInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


proto.as.HandleProprietaryUplinkRequest.prototype.clearRxInfoList = function() {
  this.setRxInfoList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.as.HandleErrorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.as.HandleErrorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.as.HandleErrorRequest.displayName = 'proto.as.HandleErrorRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.as.HandleErrorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.as.HandleErrorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.as.HandleErrorRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.as.HandleErrorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    devEui: msg.getDevEui_asB64(),
    type: msg.getType(),
    error: msg.getError(),
    fCnt: msg.getFCnt()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.as.HandleErrorRequest}
 */
proto.as.HandleErrorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.as.HandleErrorRequest;
  return proto.as.HandleErrorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.as.HandleErrorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.as.HandleErrorRequest}
 */
proto.as.HandleErrorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevEui(value);
      break;
    case 3:
      var value = /** @type {!proto.as.ErrorType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFCnt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.as.HandleErrorRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.HandleErrorRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.as.HandleErrorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.HandleErrorRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDevEui_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = this.getError();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getFCnt();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.as.HandleErrorRequest} The clone.
 */
proto.as.HandleErrorRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.as.HandleErrorRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes dev_eui = 1;
 * @return {!(string|Uint8Array)}
 */
proto.as.HandleErrorRequest.prototype.getDevEui = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes dev_eui = 1;
 * This is a type-conversion wrapper around `getDevEui()`
 * @return {string}
 */
proto.as.HandleErrorRequest.prototype.getDevEui_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevEui()));
};


/**
 * optional bytes dev_eui = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevEui()`
 * @return {!Uint8Array}
 */
proto.as.HandleErrorRequest.prototype.getDevEui_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevEui()));
};


/** @param {!(string|Uint8Array)} value  */
proto.as.HandleErrorRequest.prototype.setDevEui = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional ErrorType type = 3;
 * @return {!proto.as.ErrorType}
 */
proto.as.HandleErrorRequest.prototype.getType = function() {
  return /** @type {!proto.as.ErrorType} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {!proto.as.ErrorType} value  */
proto.as.HandleErrorRequest.prototype.setType = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string error = 4;
 * @return {string}
 */
proto.as.HandleErrorRequest.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.as.HandleErrorRequest.prototype.setError = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 f_cnt = 5;
 * @return {number}
 */
proto.as.HandleErrorRequest.prototype.getFCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.as.HandleErrorRequest.prototype.setFCnt = function(value) {
  jspb.Message.setField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.as.HandleDownlinkACKRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.as.HandleDownlinkACKRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.as.HandleDownlinkACKRequest.displayName = 'proto.as.HandleDownlinkACKRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.as.HandleDownlinkACKRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.as.HandleDownlinkACKRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.as.HandleDownlinkACKRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.as.HandleDownlinkACKRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    devEui: msg.getDevEui_asB64(),
    fCnt: msg.getFCnt(),
    acknowledged: msg.getAcknowledged()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.as.HandleDownlinkACKRequest}
 */
proto.as.HandleDownlinkACKRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.as.HandleDownlinkACKRequest;
  return proto.as.HandleDownlinkACKRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.as.HandleDownlinkACKRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.as.HandleDownlinkACKRequest}
 */
proto.as.HandleDownlinkACKRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevEui(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFCnt(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAcknowledged(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.as.HandleDownlinkACKRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.HandleDownlinkACKRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.as.HandleDownlinkACKRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.HandleDownlinkACKRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDevEui_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getFCnt();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getAcknowledged();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.as.HandleDownlinkACKRequest} The clone.
 */
proto.as.HandleDownlinkACKRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.as.HandleDownlinkACKRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes dev_eui = 1;
 * @return {!(string|Uint8Array)}
 */
proto.as.HandleDownlinkACKRequest.prototype.getDevEui = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes dev_eui = 1;
 * This is a type-conversion wrapper around `getDevEui()`
 * @return {string}
 */
proto.as.HandleDownlinkACKRequest.prototype.getDevEui_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevEui()));
};


/**
 * optional bytes dev_eui = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevEui()`
 * @return {!Uint8Array}
 */
proto.as.HandleDownlinkACKRequest.prototype.getDevEui_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevEui()));
};


/** @param {!(string|Uint8Array)} value  */
proto.as.HandleDownlinkACKRequest.prototype.setDevEui = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 f_cnt = 2;
 * @return {number}
 */
proto.as.HandleDownlinkACKRequest.prototype.getFCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.as.HandleDownlinkACKRequest.prototype.setFCnt = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bool acknowledged = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.as.HandleDownlinkACKRequest.prototype.getAcknowledged = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 3, false));
};


/** @param {boolean} value  */
proto.as.HandleDownlinkACKRequest.prototype.setAcknowledged = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.as.SetDeviceStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.as.SetDeviceStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.as.SetDeviceStatusRequest.displayName = 'proto.as.SetDeviceStatusRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.as.SetDeviceStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.as.SetDeviceStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.as.SetDeviceStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.as.SetDeviceStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    devEui: msg.getDevEui_asB64(),
    battery: msg.getBattery(),
    margin: msg.getMargin(),
    externalPowerSource: msg.getExternalPowerSource(),
    batteryLevelUnavailable: msg.getBatteryLevelUnavailable(),
    batteryLevel: msg.getBatteryLevel()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.as.SetDeviceStatusRequest}
 */
proto.as.SetDeviceStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.as.SetDeviceStatusRequest;
  return proto.as.SetDeviceStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.as.SetDeviceStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.as.SetDeviceStatusRequest}
 */
proto.as.SetDeviceStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevEui(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBattery(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMargin(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExternalPowerSource(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBatteryLevelUnavailable(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setBatteryLevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.as.SetDeviceStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.SetDeviceStatusRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.as.SetDeviceStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.SetDeviceStatusRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDevEui_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getBattery();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getMargin();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = this.getExternalPowerSource();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = this.getBatteryLevelUnavailable();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = this.getBatteryLevel();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.as.SetDeviceStatusRequest} The clone.
 */
proto.as.SetDeviceStatusRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.as.SetDeviceStatusRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes dev_eui = 1;
 * @return {!(string|Uint8Array)}
 */
proto.as.SetDeviceStatusRequest.prototype.getDevEui = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes dev_eui = 1;
 * This is a type-conversion wrapper around `getDevEui()`
 * @return {string}
 */
proto.as.SetDeviceStatusRequest.prototype.getDevEui_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevEui()));
};


/**
 * optional bytes dev_eui = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevEui()`
 * @return {!Uint8Array}
 */
proto.as.SetDeviceStatusRequest.prototype.getDevEui_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevEui()));
};


/** @param {!(string|Uint8Array)} value  */
proto.as.SetDeviceStatusRequest.prototype.setDevEui = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 battery = 2;
 * @return {number}
 */
proto.as.SetDeviceStatusRequest.prototype.getBattery = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.as.SetDeviceStatusRequest.prototype.setBattery = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int32 margin = 3;
 * @return {number}
 */
proto.as.SetDeviceStatusRequest.prototype.getMargin = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.as.SetDeviceStatusRequest.prototype.setMargin = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bool external_power_source = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.as.SetDeviceStatusRequest.prototype.getExternalPowerSource = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 4, false));
};


/** @param {boolean} value  */
proto.as.SetDeviceStatusRequest.prototype.setExternalPowerSource = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional bool battery_level_unavailable = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.as.SetDeviceStatusRequest.prototype.getBatteryLevelUnavailable = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 5, false));
};


/** @param {boolean} value  */
proto.as.SetDeviceStatusRequest.prototype.setBatteryLevelUnavailable = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional float battery_level = 6;
 * @return {number}
 */
proto.as.SetDeviceStatusRequest.prototype.getBatteryLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.as.SetDeviceStatusRequest.prototype.setBatteryLevel = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.as.SetDeviceLocationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.as.SetDeviceLocationRequest.repeatedFields_, null);
};
goog.inherits(proto.as.SetDeviceLocationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.as.SetDeviceLocationRequest.displayName = 'proto.as.SetDeviceLocationRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.as.SetDeviceLocationRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.as.SetDeviceLocationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.as.SetDeviceLocationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.as.SetDeviceLocationRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.as.SetDeviceLocationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    devEui: msg.getDevEui_asB64(),
    location: (f = msg.getLocation()) && common_common_pb.Location.toObject(includeInstance, f),
    uplinkIdsList: msg.getUplinkIdsList_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.as.SetDeviceLocationRequest}
 */
proto.as.SetDeviceLocationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.as.SetDeviceLocationRequest;
  return proto.as.SetDeviceLocationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.as.SetDeviceLocationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.as.SetDeviceLocationRequest}
 */
proto.as.SetDeviceLocationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevEui(value);
      break;
    case 2:
      var value = new common_common_pb.Location;
      reader.readMessage(value,common_common_pb.Location.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.getUplinkIdsList().push(value);
      msg.setUplinkIdsList(msg.getUplinkIdsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.as.SetDeviceLocationRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.SetDeviceLocationRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.as.SetDeviceLocationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.SetDeviceLocationRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDevEui_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getLocation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      common_common_pb.Location.serializeBinaryToWriter
    );
  }
  f = this.getUplinkIdsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.as.SetDeviceLocationRequest} The clone.
 */
proto.as.SetDeviceLocationRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.as.SetDeviceLocationRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes dev_eui = 1;
 * @return {!(string|Uint8Array)}
 */
proto.as.SetDeviceLocationRequest.prototype.getDevEui = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes dev_eui = 1;
 * This is a type-conversion wrapper around `getDevEui()`
 * @return {string}
 */
proto.as.SetDeviceLocationRequest.prototype.getDevEui_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevEui()));
};


/**
 * optional bytes dev_eui = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevEui()`
 * @return {!Uint8Array}
 */
proto.as.SetDeviceLocationRequest.prototype.getDevEui_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevEui()));
};


/** @param {!(string|Uint8Array)} value  */
proto.as.SetDeviceLocationRequest.prototype.setDevEui = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional common.Location location = 2;
 * @return {proto.common.Location}
 */
proto.as.SetDeviceLocationRequest.prototype.getLocation = function() {
  return /** @type{proto.common.Location} */ (
    jspb.Message.getWrapperField(this, common_common_pb.Location, 2));
};


/** @param {proto.common.Location|undefined} value  */
proto.as.SetDeviceLocationRequest.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.as.SetDeviceLocationRequest.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.as.SetDeviceLocationRequest.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated bytes uplink_ids = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!(Array<!Uint8Array>|Array<string>)}
 */
proto.as.SetDeviceLocationRequest.prototype.getUplinkIdsList = function() {
  return /** @type {!(Array<!Uint8Array>|Array<string>)} */ (jspb.Message.getField(this, 3));
};


/**
 * repeated bytes uplink_ids = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * This is a type-conversion wrapper around `getUplinkIdsList()`
 * @return {!Array.<string>}
 */
proto.as.SetDeviceLocationRequest.prototype.getUplinkIdsList_asB64 = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.bytesListAsB64(
      this.getUplinkIdsList()));
};


/**
 * repeated bytes uplink_ids = 3;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getUplinkIdsList()`
 * @return {!Array.<!Uint8Array>}
 */
proto.as.SetDeviceLocationRequest.prototype.getUplinkIdsList_asU8 = function() {
  return /** @type {!Array.<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getUplinkIdsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value  */
proto.as.SetDeviceLocationRequest.prototype.setUplinkIdsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


proto.as.SetDeviceLocationRequest.prototype.clearUplinkIdsList = function() {
  jspb.Message.setField(this, 3, []);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.as.HandleGatewayStatsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.as.HandleGatewayStatsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.as.HandleGatewayStatsRequest.displayName = 'proto.as.HandleGatewayStatsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.as.HandleGatewayStatsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.as.HandleGatewayStatsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.as.HandleGatewayStatsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.as.HandleGatewayStatsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    gatewayId: msg.getGatewayId_asB64(),
    statsId: msg.getStatsId_asB64(),
    time: (f = msg.getTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    location: (f = msg.getLocation()) && common_common_pb.Location.toObject(includeInstance, f),
    rxPacketsReceived: msg.getRxPacketsReceived(),
    rxPacketsReceivedOk: msg.getRxPacketsReceivedOk(),
    txPacketsReceived: msg.getTxPacketsReceived(),
    txPacketsEmitted: msg.getTxPacketsEmitted(),
    metadataMap: (f = msg.getMetadataMap(true)) ? f.toArray() : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.as.HandleGatewayStatsRequest}
 */
proto.as.HandleGatewayStatsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.as.HandleGatewayStatsRequest;
  return proto.as.HandleGatewayStatsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.as.HandleGatewayStatsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.as.HandleGatewayStatsRequest}
 */
proto.as.HandleGatewayStatsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setGatewayId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setStatsId(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTime(value);
      break;
    case 4:
      var value = new common_common_pb.Location;
      reader.readMessage(value,common_common_pb.Location.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRxPacketsReceived(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRxPacketsReceivedOk(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTxPacketsReceived(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTxPacketsEmitted(value);
      break;
    case 9:
      var value = msg.getMetadataMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString);
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.as.HandleGatewayStatsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.HandleGatewayStatsRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.as.HandleGatewayStatsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.HandleGatewayStatsRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getGatewayId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getStatsId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getTime();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = this.getLocation();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      common_common_pb.Location.serializeBinaryToWriter
    );
  }
  f = this.getRxPacketsReceived();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = this.getRxPacketsReceivedOk();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = this.getTxPacketsReceived();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = this.getTxPacketsEmitted();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = this.getMetadataMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(9, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.as.HandleGatewayStatsRequest} The clone.
 */
proto.as.HandleGatewayStatsRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.as.HandleGatewayStatsRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes gateway_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.as.HandleGatewayStatsRequest.prototype.getGatewayId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes gateway_id = 1;
 * This is a type-conversion wrapper around `getGatewayId()`
 * @return {string}
 */
proto.as.HandleGatewayStatsRequest.prototype.getGatewayId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getGatewayId()));
};


/**
 * optional bytes gateway_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getGatewayId()`
 * @return {!Uint8Array}
 */
proto.as.HandleGatewayStatsRequest.prototype.getGatewayId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getGatewayId()));
};


/** @param {!(string|Uint8Array)} value  */
proto.as.HandleGatewayStatsRequest.prototype.setGatewayId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes stats_id = 2;
 * @return {!(string|Uint8Array)}
 */
proto.as.HandleGatewayStatsRequest.prototype.getStatsId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes stats_id = 2;
 * This is a type-conversion wrapper around `getStatsId()`
 * @return {string}
 */
proto.as.HandleGatewayStatsRequest.prototype.getStatsId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getStatsId()));
};


/**
 * optional bytes stats_id = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getStatsId()`
 * @return {!Uint8Array}
 */
proto.as.HandleGatewayStatsRequest.prototype.getStatsId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getStatsId()));
};


/** @param {!(string|Uint8Array)} value  */
proto.as.HandleGatewayStatsRequest.prototype.setStatsId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp time = 3;
 * @return {proto.google.protobuf.Timestamp}
 */
proto.as.HandleGatewayStatsRequest.prototype.getTime = function() {
  return /** @type{proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/** @param {proto.google.protobuf.Timestamp|undefined} value  */
proto.as.HandleGatewayStatsRequest.prototype.setTime = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.as.HandleGatewayStatsRequest.prototype.clearTime = function() {
  this.setTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.as.HandleGatewayStatsRequest.prototype.hasTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional common.Location location = 4;
 * @return {proto.common.Location}
 */
proto.as.HandleGatewayStatsRequest.prototype.getLocation = function() {
  return /** @type{proto.common.Location} */ (
    jspb.Message.getWrapperField(this, common_common_pb.Location, 4));
};


/** @param {proto.common.Location|undefined} value  */
proto.as.HandleGatewayStatsRequest.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.as.HandleGatewayStatsRequest.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.as.HandleGatewayStatsRequest.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 rx_packets_received = 5;
 * @return {number}
 */
proto.as.HandleGatewayStatsRequest.prototype.getRxPacketsReceived = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.as.HandleGatewayStatsRequest.prototype.setRxPacketsReceived = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint32 rx_packets_received_ok = 6;
 * @return {number}
 */
proto.as.HandleGatewayStatsRequest.prototype.getRxPacketsReceivedOk = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.as.HandleGatewayStatsRequest.prototype.setRxPacketsReceivedOk = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional uint32 tx_packets_received = 7;
 * @return {number}
 */
proto.as.HandleGatewayStatsRequest.prototype.getTxPacketsReceived = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 7, 0));
};


/** @param {number} value  */
proto.as.HandleGatewayStatsRequest.prototype.setTxPacketsReceived = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional uint32 tx_packets_emitted = 8;
 * @return {number}
 */
proto.as.HandleGatewayStatsRequest.prototype.getTxPacketsEmitted = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 8, 0));
};


/** @param {number} value  */
proto.as.HandleGatewayStatsRequest.prototype.setTxPacketsEmitted = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * map<string, string> metadata = 9;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.as.HandleGatewayStatsRequest.prototype.getMetadataMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 9, opt_noLazyCreate,
      null));
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.as.HandleTxAckRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.as.HandleTxAckRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.as.HandleTxAckRequest.displayName = 'proto.as.HandleTxAckRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.as.HandleTxAckRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.as.HandleTxAckRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.as.HandleTxAckRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.as.HandleTxAckRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    devEui: msg.getDevEui_asB64(),
    fCnt: msg.getFCnt()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.as.HandleTxAckRequest}
 */
proto.as.HandleTxAckRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.as.HandleTxAckRequest;
  return proto.as.HandleTxAckRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.as.HandleTxAckRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.as.HandleTxAckRequest}
 */
proto.as.HandleTxAckRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevEui(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFCnt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.as.HandleTxAckRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.HandleTxAckRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.as.HandleTxAckRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.as.HandleTxAckRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDevEui_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getFCnt();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.as.HandleTxAckRequest} The clone.
 */
proto.as.HandleTxAckRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.as.HandleTxAckRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes dev_eui = 1;
 * @return {!(string|Uint8Array)}
 */
proto.as.HandleTxAckRequest.prototype.getDevEui = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes dev_eui = 1;
 * This is a type-conversion wrapper around `getDevEui()`
 * @return {string}
 */
proto.as.HandleTxAckRequest.prototype.getDevEui_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevEui()));
};


/**
 * optional bytes dev_eui = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevEui()`
 * @return {!Uint8Array}
 */
proto.as.HandleTxAckRequest.prototype.getDevEui_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevEui()));
};


/** @param {!(string|Uint8Array)} value  */
proto.as.HandleTxAckRequest.prototype.setDevEui = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 f_cnt = 2;
 * @return {number}
 */
proto.as.HandleTxAckRequest.prototype.getFCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.as.HandleTxAckRequest.prototype.setFCnt = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.as.RXWindow = {
  RX1: 0,
  RX2: 1
};

/**
 * @enum {number}
 */
proto.as.ErrorType = {
  GENERIC: 0,
  OTAA: 1,
  DATA_UP_FCNT_RESET: 2,
  DATA_UP_MIC: 3,
  DEVICE_QUEUE_ITEM_SIZE: 4,
  DEVICE_QUEUE_ITEM_FCNT: 5,
  DATA_UP_FCNT_RETRANSMISSION: 6,
  DATA_DOWN_GATEWAY: 7
};

goog.object.extend(exports, proto.as);
